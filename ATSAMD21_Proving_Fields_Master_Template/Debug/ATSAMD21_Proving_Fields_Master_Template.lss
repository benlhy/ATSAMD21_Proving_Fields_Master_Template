
ATSAMD21_Proving_Fields_Master_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000197c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  0000197c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000094  2000000c  00001988  0002000c  2**2
                  ALLOC
  3 .stack        00002000  200000a0  00001a1c  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   00022c30  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003289  00000000  00000000  00042cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006c57  00000000  00000000  00045f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000458  00000000  00000000  0004cb9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008f8  00000000  00000000  0004cff5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a2a4  00000000  00000000  0004d8ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aa83  00000000  00000000  00067b91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008db81  00000000  00000000  00072614  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000b68  00000000  00000000  00100198  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 20 00 20 e5 15 00 00 e1 15 00 00 e1 15 00 00     . . ............
	...
      2c:	e1 15 00 00 00 00 00 00 00 00 00 00 e1 15 00 00     ................
      3c:	e1 15 00 00 e1 15 00 00 e1 15 00 00 e1 15 00 00     ................
      4c:	e1 15 00 00 71 02 00 00 e1 15 00 00 e1 15 00 00     ....q...........
      5c:	e1 15 00 00 e1 15 00 00 e1 15 00 00 e1 15 00 00     ................
      6c:	e1 15 00 00 e1 15 00 00 e1 15 00 00 e1 15 00 00     ................
      7c:	e1 15 00 00 e1 15 00 00 e1 15 00 00 e1 15 00 00     ................
      8c:	e1 15 00 00 e1 15 00 00 e1 15 00 00 e1 15 00 00     ................
      9c:	e1 15 00 00 e1 15 00 00 e1 15 00 00 e1 15 00 00     ................
      ac:	e1 15 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	0000197c 	.word	0x0000197c

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	0000197c 	.word	0x0000197c
     10c:	0000197c 	.word	0x0000197c
     110:	00000000 	.word	0x00000000

00000114 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     114:	4a04      	ldr	r2, [pc, #16]	; (128 <_extint_enable+0x14>)
     116:	7813      	ldrb	r3, [r2, #0]
     118:	2102      	movs	r1, #2
     11a:	430b      	orrs	r3, r1
     11c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     11e:	7853      	ldrb	r3, [r2, #1]
     120:	b25b      	sxtb	r3, r3
     122:	2b00      	cmp	r3, #0
     124:	dbfb      	blt.n	11e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     126:	4770      	bx	lr
     128:	40001800 	.word	0x40001800

0000012c <_system_extint_init>:
{
     12c:	b500      	push	{lr}
     12e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     130:	4a12      	ldr	r2, [pc, #72]	; (17c <_system_extint_init+0x50>)
     132:	6993      	ldr	r3, [r2, #24]
     134:	2140      	movs	r1, #64	; 0x40
     136:	430b      	orrs	r3, r1
     138:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     13a:	a901      	add	r1, sp, #4
     13c:	2300      	movs	r3, #0
     13e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     140:	2005      	movs	r0, #5
     142:	4b0f      	ldr	r3, [pc, #60]	; (180 <_system_extint_init+0x54>)
     144:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     146:	2005      	movs	r0, #5
     148:	4b0e      	ldr	r3, [pc, #56]	; (184 <_system_extint_init+0x58>)
     14a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     14c:	4a0e      	ldr	r2, [pc, #56]	; (188 <_system_extint_init+0x5c>)
     14e:	7813      	ldrb	r3, [r2, #0]
     150:	2101      	movs	r1, #1
     152:	430b      	orrs	r3, r1
     154:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     156:	7853      	ldrb	r3, [r2, #1]
     158:	b25b      	sxtb	r3, r3
     15a:	2b00      	cmp	r3, #0
     15c:	dbfb      	blt.n	156 <_system_extint_init+0x2a>
     15e:	4b0b      	ldr	r3, [pc, #44]	; (18c <_system_extint_init+0x60>)
     160:	0019      	movs	r1, r3
     162:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     164:	2200      	movs	r2, #0
     166:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     168:	4299      	cmp	r1, r3
     16a:	d1fc      	bne.n	166 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     16c:	2210      	movs	r2, #16
     16e:	4b08      	ldr	r3, [pc, #32]	; (190 <_system_extint_init+0x64>)
     170:	601a      	str	r2, [r3, #0]
	_extint_enable();
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <_system_extint_init+0x68>)
     174:	4798      	blx	r3
}
     176:	b003      	add	sp, #12
     178:	bd00      	pop	{pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	40000400 	.word	0x40000400
     180:	00001489 	.word	0x00001489
     184:	000013fd 	.word	0x000013fd
     188:	40001800 	.word	0x40001800
     18c:	2000004c 	.word	0x2000004c
     190:	e000e100 	.word	0xe000e100
     194:	00000115 	.word	0x00000115

00000198 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     198:	2300      	movs	r3, #0
     19a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     19c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     19e:	2201      	movs	r2, #1
     1a0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     1a2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     1a4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     1a6:	3302      	adds	r3, #2
     1a8:	72c3      	strb	r3, [r0, #11]
}
     1aa:	4770      	bx	lr

000001ac <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ae:	b083      	sub	sp, #12
     1b0:	0005      	movs	r5, r0
     1b2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b4:	a901      	add	r1, sp, #4
     1b6:	2300      	movs	r3, #0
     1b8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1ba:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     1bc:	7923      	ldrb	r3, [r4, #4]
     1be:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     1c0:	7a23      	ldrb	r3, [r4, #8]
     1c2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     1c4:	7820      	ldrb	r0, [r4, #0]
     1c6:	4b15      	ldr	r3, [pc, #84]	; (21c <extint_chan_set_config+0x70>)
     1c8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     1ca:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     1cc:	2d1f      	cmp	r5, #31
     1ce:	d800      	bhi.n	1d2 <extint_chan_set_config+0x26>
		return eics[eic_index];
     1d0:	4813      	ldr	r0, [pc, #76]	; (220 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     1d2:	2207      	movs	r2, #7
     1d4:	402a      	ands	r2, r5
     1d6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     1d8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     1da:	7aa3      	ldrb	r3, [r4, #10]
     1dc:	2b00      	cmp	r3, #0
     1de:	d001      	beq.n	1e4 <extint_chan_set_config+0x38>
     1e0:	2308      	movs	r3, #8
     1e2:	431f      	orrs	r7, r3
     1e4:	08eb      	lsrs	r3, r5, #3
     1e6:	009b      	lsls	r3, r3, #2
     1e8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1ea:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1ec:	260f      	movs	r6, #15
     1ee:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     1f0:	43b1      	bics	r1, r6
			(new_config << config_pos);
     1f2:	4097      	lsls	r7, r2
     1f4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1f6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     1f8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     1fa:	7a63      	ldrb	r3, [r4, #9]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d106      	bne.n	20e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     200:	6943      	ldr	r3, [r0, #20]
     202:	2201      	movs	r2, #1
     204:	40aa      	lsls	r2, r5
     206:	4393      	bics	r3, r2
     208:	6143      	str	r3, [r0, #20]
	}
}
     20a:	b003      	add	sp, #12
     20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     20e:	6942      	ldr	r2, [r0, #20]
     210:	2301      	movs	r3, #1
     212:	40ab      	lsls	r3, r5
     214:	4313      	orrs	r3, r2
     216:	6143      	str	r3, [r0, #20]
     218:	e7f7      	b.n	20a <extint_chan_set_config+0x5e>
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	00001581 	.word	0x00001581
     220:	40001800 	.word	0x40001800

00000224 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     224:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     226:	2a00      	cmp	r2, #0
     228:	d001      	beq.n	22e <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     22a:	0018      	movs	r0, r3
     22c:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     22e:	008b      	lsls	r3, r1, #2
     230:	4a06      	ldr	r2, [pc, #24]	; (24c <extint_register_callback+0x28>)
     232:	589b      	ldr	r3, [r3, r2]
     234:	2b00      	cmp	r3, #0
     236:	d003      	beq.n	240 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     238:	4283      	cmp	r3, r0
     23a:	d005      	beq.n	248 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     23c:	231d      	movs	r3, #29
     23e:	e7f4      	b.n	22a <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     240:	0089      	lsls	r1, r1, #2
     242:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     244:	2300      	movs	r3, #0
     246:	e7f0      	b.n	22a <extint_register_callback+0x6>
		return STATUS_OK;
     248:	2300      	movs	r3, #0
     24a:	e7ee      	b.n	22a <extint_register_callback+0x6>
     24c:	2000004c 	.word	0x2000004c

00000250 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     250:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     252:	2900      	cmp	r1, #0
     254:	d001      	beq.n	25a <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     256:	0018      	movs	r0, r3
     258:	4770      	bx	lr
		return NULL;
     25a:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     25c:	281f      	cmp	r0, #31
     25e:	d800      	bhi.n	262 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     260:	4a02      	ldr	r2, [pc, #8]	; (26c <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     262:	2301      	movs	r3, #1
     264:	4083      	lsls	r3, r0
     266:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     268:	2300      	movs	r3, #0
     26a:	e7f4      	b.n	256 <extint_chan_enable_callback+0x6>
     26c:	40001800 	.word	0x40001800

00000270 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     270:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     272:	2200      	movs	r2, #0
     274:	4b10      	ldr	r3, [pc, #64]	; (2b8 <EIC_Handler+0x48>)
     276:	701a      	strb	r2, [r3, #0]
     278:	2300      	movs	r3, #0
     27a:	4910      	ldr	r1, [pc, #64]	; (2bc <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     27c:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     27e:	4e10      	ldr	r6, [pc, #64]	; (2c0 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     280:	4c0d      	ldr	r4, [pc, #52]	; (2b8 <EIC_Handler+0x48>)
     282:	e00a      	b.n	29a <EIC_Handler+0x2a>
		return eics[eic_index];
     284:	490d      	ldr	r1, [pc, #52]	; (2bc <EIC_Handler+0x4c>)
     286:	e008      	b.n	29a <EIC_Handler+0x2a>
     288:	7823      	ldrb	r3, [r4, #0]
     28a:	3301      	adds	r3, #1
     28c:	b2db      	uxtb	r3, r3
     28e:	7023      	strb	r3, [r4, #0]
     290:	2b0f      	cmp	r3, #15
     292:	d810      	bhi.n	2b6 <EIC_Handler+0x46>
		return NULL;
     294:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     296:	2b1f      	cmp	r3, #31
     298:	d9f4      	bls.n	284 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     29a:	0028      	movs	r0, r5
     29c:	4018      	ands	r0, r3
     29e:	2201      	movs	r2, #1
     2a0:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     2a2:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     2a4:	4210      	tst	r0, r2
     2a6:	d0ef      	beq.n	288 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     2a8:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     2aa:	009b      	lsls	r3, r3, #2
     2ac:	599b      	ldr	r3, [r3, r6]
     2ae:	2b00      	cmp	r3, #0
     2b0:	d0ea      	beq.n	288 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     2b2:	4798      	blx	r3
     2b4:	e7e8      	b.n	288 <EIC_Handler+0x18>
			}
		}
	}
}
     2b6:	bd70      	pop	{r4, r5, r6, pc}
     2b8:	2000008c 	.word	0x2000008c
     2bc:	40001800 	.word	0x40001800
     2c0:	2000004c 	.word	0x2000004c

000002c4 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     2c4:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     2c6:	2000      	movs	r0, #0
     2c8:	4b08      	ldr	r3, [pc, #32]	; (2ec <delay_init+0x28>)
     2ca:	4798      	blx	r3
     2cc:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     2ce:	4c08      	ldr	r4, [pc, #32]	; (2f0 <delay_init+0x2c>)
     2d0:	21fa      	movs	r1, #250	; 0xfa
     2d2:	0089      	lsls	r1, r1, #2
     2d4:	47a0      	blx	r4
     2d6:	4b07      	ldr	r3, [pc, #28]	; (2f4 <delay_init+0x30>)
     2d8:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     2da:	4907      	ldr	r1, [pc, #28]	; (2f8 <delay_init+0x34>)
     2dc:	0028      	movs	r0, r5
     2de:	47a0      	blx	r4
     2e0:	4b06      	ldr	r3, [pc, #24]	; (2fc <delay_init+0x38>)
     2e2:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     2e4:	2205      	movs	r2, #5
     2e6:	4b06      	ldr	r3, [pc, #24]	; (300 <delay_init+0x3c>)
     2e8:	601a      	str	r2, [r3, #0]
}
     2ea:	bd70      	pop	{r4, r5, r6, pc}
     2ec:	00001371 	.word	0x00001371
     2f0:	0000178d 	.word	0x0000178d
     2f4:	20000000 	.word	0x20000000
     2f8:	000f4240 	.word	0x000f4240
     2fc:	20000004 	.word	0x20000004
     300:	e000e010 	.word	0xe000e010

00000304 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     304:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     306:	4b08      	ldr	r3, [pc, #32]	; (328 <delay_cycles_ms+0x24>)
     308:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     30a:	4a08      	ldr	r2, [pc, #32]	; (32c <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     30c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     30e:	2180      	movs	r1, #128	; 0x80
     310:	0249      	lsls	r1, r1, #9
	while (n--) {
     312:	3801      	subs	r0, #1
     314:	d307      	bcc.n	326 <delay_cycles_ms+0x22>
	if (n > 0) {
     316:	2c00      	cmp	r4, #0
     318:	d0fb      	beq.n	312 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     31a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     31c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     31e:	6813      	ldr	r3, [r2, #0]
     320:	420b      	tst	r3, r1
     322:	d0fc      	beq.n	31e <delay_cycles_ms+0x1a>
     324:	e7f5      	b.n	312 <delay_cycles_ms+0xe>
	}
}
     326:	bd30      	pop	{r4, r5, pc}
     328:	20000000 	.word	0x20000000
     32c:	e000e010 	.word	0xe000e010

00000330 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     330:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     332:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     334:	2340      	movs	r3, #64	; 0x40
     336:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     338:	4281      	cmp	r1, r0
     33a:	d202      	bcs.n	342 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     33c:	0018      	movs	r0, r3
     33e:	bd10      	pop	{r4, pc}
		baud_calculated++;
     340:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     342:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     344:	1c63      	adds	r3, r4, #1
     346:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     348:	4288      	cmp	r0, r1
     34a:	d9f9      	bls.n	340 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     34c:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     34e:	2cff      	cmp	r4, #255	; 0xff
     350:	d8f4      	bhi.n	33c <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     352:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     354:	2300      	movs	r3, #0
     356:	e7f1      	b.n	33c <_sercom_get_sync_baud_val+0xc>

00000358 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     358:	b510      	push	{r4, lr}
     35a:	b082      	sub	sp, #8
     35c:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     35e:	4b0e      	ldr	r3, [pc, #56]	; (398 <sercom_set_gclk_generator+0x40>)
     360:	781b      	ldrb	r3, [r3, #0]
     362:	2b00      	cmp	r3, #0
     364:	d007      	beq.n	376 <sercom_set_gclk_generator+0x1e>
     366:	2900      	cmp	r1, #0
     368:	d105      	bne.n	376 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     36a:	4b0b      	ldr	r3, [pc, #44]	; (398 <sercom_set_gclk_generator+0x40>)
     36c:	785b      	ldrb	r3, [r3, #1]
     36e:	4283      	cmp	r3, r0
     370:	d010      	beq.n	394 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     372:	201d      	movs	r0, #29
     374:	e00c      	b.n	390 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     376:	a901      	add	r1, sp, #4
     378:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     37a:	2013      	movs	r0, #19
     37c:	4b07      	ldr	r3, [pc, #28]	; (39c <sercom_set_gclk_generator+0x44>)
     37e:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     380:	2013      	movs	r0, #19
     382:	4b07      	ldr	r3, [pc, #28]	; (3a0 <sercom_set_gclk_generator+0x48>)
     384:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     386:	4b04      	ldr	r3, [pc, #16]	; (398 <sercom_set_gclk_generator+0x40>)
     388:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     38a:	2201      	movs	r2, #1
     38c:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     38e:	2000      	movs	r0, #0
}
     390:	b002      	add	sp, #8
     392:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     394:	2000      	movs	r0, #0
     396:	e7fb      	b.n	390 <sercom_set_gclk_generator+0x38>
     398:	20000028 	.word	0x20000028
     39c:	00001489 	.word	0x00001489
     3a0:	000013fd 	.word	0x000013fd

000003a4 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     3a4:	4b40      	ldr	r3, [pc, #256]	; (4a8 <_sercom_get_default_pad+0x104>)
     3a6:	4298      	cmp	r0, r3
     3a8:	d031      	beq.n	40e <_sercom_get_default_pad+0x6a>
     3aa:	d90a      	bls.n	3c2 <_sercom_get_default_pad+0x1e>
     3ac:	4b3f      	ldr	r3, [pc, #252]	; (4ac <_sercom_get_default_pad+0x108>)
     3ae:	4298      	cmp	r0, r3
     3b0:	d04d      	beq.n	44e <_sercom_get_default_pad+0xaa>
     3b2:	4b3f      	ldr	r3, [pc, #252]	; (4b0 <_sercom_get_default_pad+0x10c>)
     3b4:	4298      	cmp	r0, r3
     3b6:	d05a      	beq.n	46e <_sercom_get_default_pad+0xca>
     3b8:	4b3e      	ldr	r3, [pc, #248]	; (4b4 <_sercom_get_default_pad+0x110>)
     3ba:	4298      	cmp	r0, r3
     3bc:	d037      	beq.n	42e <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     3be:	2000      	movs	r0, #0
}
     3c0:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     3c2:	4b3d      	ldr	r3, [pc, #244]	; (4b8 <_sercom_get_default_pad+0x114>)
     3c4:	4298      	cmp	r0, r3
     3c6:	d00c      	beq.n	3e2 <_sercom_get_default_pad+0x3e>
     3c8:	4b3c      	ldr	r3, [pc, #240]	; (4bc <_sercom_get_default_pad+0x118>)
     3ca:	4298      	cmp	r0, r3
     3cc:	d1f7      	bne.n	3be <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3ce:	2901      	cmp	r1, #1
     3d0:	d017      	beq.n	402 <_sercom_get_default_pad+0x5e>
     3d2:	2900      	cmp	r1, #0
     3d4:	d05d      	beq.n	492 <_sercom_get_default_pad+0xee>
     3d6:	2902      	cmp	r1, #2
     3d8:	d015      	beq.n	406 <_sercom_get_default_pad+0x62>
     3da:	2903      	cmp	r1, #3
     3dc:	d015      	beq.n	40a <_sercom_get_default_pad+0x66>
	return 0;
     3de:	2000      	movs	r0, #0
     3e0:	e7ee      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3e2:	2901      	cmp	r1, #1
     3e4:	d007      	beq.n	3f6 <_sercom_get_default_pad+0x52>
     3e6:	2900      	cmp	r1, #0
     3e8:	d051      	beq.n	48e <_sercom_get_default_pad+0xea>
     3ea:	2902      	cmp	r1, #2
     3ec:	d005      	beq.n	3fa <_sercom_get_default_pad+0x56>
     3ee:	2903      	cmp	r1, #3
     3f0:	d005      	beq.n	3fe <_sercom_get_default_pad+0x5a>
	return 0;
     3f2:	2000      	movs	r0, #0
     3f4:	e7e4      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3f6:	4832      	ldr	r0, [pc, #200]	; (4c0 <_sercom_get_default_pad+0x11c>)
     3f8:	e7e2      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     3fa:	4832      	ldr	r0, [pc, #200]	; (4c4 <_sercom_get_default_pad+0x120>)
     3fc:	e7e0      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     3fe:	4832      	ldr	r0, [pc, #200]	; (4c8 <_sercom_get_default_pad+0x124>)
     400:	e7de      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     402:	4832      	ldr	r0, [pc, #200]	; (4cc <_sercom_get_default_pad+0x128>)
     404:	e7dc      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     406:	4832      	ldr	r0, [pc, #200]	; (4d0 <_sercom_get_default_pad+0x12c>)
     408:	e7da      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     40a:	4832      	ldr	r0, [pc, #200]	; (4d4 <_sercom_get_default_pad+0x130>)
     40c:	e7d8      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     40e:	2901      	cmp	r1, #1
     410:	d007      	beq.n	422 <_sercom_get_default_pad+0x7e>
     412:	2900      	cmp	r1, #0
     414:	d03f      	beq.n	496 <_sercom_get_default_pad+0xf2>
     416:	2902      	cmp	r1, #2
     418:	d005      	beq.n	426 <_sercom_get_default_pad+0x82>
     41a:	2903      	cmp	r1, #3
     41c:	d005      	beq.n	42a <_sercom_get_default_pad+0x86>
	return 0;
     41e:	2000      	movs	r0, #0
     420:	e7ce      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     422:	482d      	ldr	r0, [pc, #180]	; (4d8 <_sercom_get_default_pad+0x134>)
     424:	e7cc      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     426:	482d      	ldr	r0, [pc, #180]	; (4dc <_sercom_get_default_pad+0x138>)
     428:	e7ca      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     42a:	482d      	ldr	r0, [pc, #180]	; (4e0 <_sercom_get_default_pad+0x13c>)
     42c:	e7c8      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     42e:	2901      	cmp	r1, #1
     430:	d007      	beq.n	442 <_sercom_get_default_pad+0x9e>
     432:	2900      	cmp	r1, #0
     434:	d031      	beq.n	49a <_sercom_get_default_pad+0xf6>
     436:	2902      	cmp	r1, #2
     438:	d005      	beq.n	446 <_sercom_get_default_pad+0xa2>
     43a:	2903      	cmp	r1, #3
     43c:	d005      	beq.n	44a <_sercom_get_default_pad+0xa6>
	return 0;
     43e:	2000      	movs	r0, #0
     440:	e7be      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     442:	4828      	ldr	r0, [pc, #160]	; (4e4 <_sercom_get_default_pad+0x140>)
     444:	e7bc      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     446:	4828      	ldr	r0, [pc, #160]	; (4e8 <_sercom_get_default_pad+0x144>)
     448:	e7ba      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     44a:	4828      	ldr	r0, [pc, #160]	; (4ec <_sercom_get_default_pad+0x148>)
     44c:	e7b8      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     44e:	2901      	cmp	r1, #1
     450:	d007      	beq.n	462 <_sercom_get_default_pad+0xbe>
     452:	2900      	cmp	r1, #0
     454:	d023      	beq.n	49e <_sercom_get_default_pad+0xfa>
     456:	2902      	cmp	r1, #2
     458:	d005      	beq.n	466 <_sercom_get_default_pad+0xc2>
     45a:	2903      	cmp	r1, #3
     45c:	d005      	beq.n	46a <_sercom_get_default_pad+0xc6>
	return 0;
     45e:	2000      	movs	r0, #0
     460:	e7ae      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     462:	4823      	ldr	r0, [pc, #140]	; (4f0 <_sercom_get_default_pad+0x14c>)
     464:	e7ac      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     466:	4823      	ldr	r0, [pc, #140]	; (4f4 <_sercom_get_default_pad+0x150>)
     468:	e7aa      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     46a:	4823      	ldr	r0, [pc, #140]	; (4f8 <_sercom_get_default_pad+0x154>)
     46c:	e7a8      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     46e:	2901      	cmp	r1, #1
     470:	d007      	beq.n	482 <_sercom_get_default_pad+0xde>
     472:	2900      	cmp	r1, #0
     474:	d015      	beq.n	4a2 <_sercom_get_default_pad+0xfe>
     476:	2902      	cmp	r1, #2
     478:	d005      	beq.n	486 <_sercom_get_default_pad+0xe2>
     47a:	2903      	cmp	r1, #3
     47c:	d005      	beq.n	48a <_sercom_get_default_pad+0xe6>
	return 0;
     47e:	2000      	movs	r0, #0
     480:	e79e      	b.n	3c0 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     482:	481e      	ldr	r0, [pc, #120]	; (4fc <_sercom_get_default_pad+0x158>)
     484:	e79c      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     486:	481e      	ldr	r0, [pc, #120]	; (500 <_sercom_get_default_pad+0x15c>)
     488:	e79a      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     48a:	481e      	ldr	r0, [pc, #120]	; (504 <_sercom_get_default_pad+0x160>)
     48c:	e798      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     48e:	481e      	ldr	r0, [pc, #120]	; (508 <_sercom_get_default_pad+0x164>)
     490:	e796      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     492:	2003      	movs	r0, #3
     494:	e794      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     496:	481d      	ldr	r0, [pc, #116]	; (50c <_sercom_get_default_pad+0x168>)
     498:	e792      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     49a:	481d      	ldr	r0, [pc, #116]	; (510 <_sercom_get_default_pad+0x16c>)
     49c:	e790      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     49e:	481d      	ldr	r0, [pc, #116]	; (514 <_sercom_get_default_pad+0x170>)
     4a0:	e78e      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     4a2:	481d      	ldr	r0, [pc, #116]	; (518 <_sercom_get_default_pad+0x174>)
     4a4:	e78c      	b.n	3c0 <_sercom_get_default_pad+0x1c>
     4a6:	46c0      	nop			; (mov r8, r8)
     4a8:	42001000 	.word	0x42001000
     4ac:	42001800 	.word	0x42001800
     4b0:	42001c00 	.word	0x42001c00
     4b4:	42001400 	.word	0x42001400
     4b8:	42000800 	.word	0x42000800
     4bc:	42000c00 	.word	0x42000c00
     4c0:	00050003 	.word	0x00050003
     4c4:	00060003 	.word	0x00060003
     4c8:	00070003 	.word	0x00070003
     4cc:	00010003 	.word	0x00010003
     4d0:	001e0003 	.word	0x001e0003
     4d4:	001f0003 	.word	0x001f0003
     4d8:	00090003 	.word	0x00090003
     4dc:	000a0003 	.word	0x000a0003
     4e0:	000b0003 	.word	0x000b0003
     4e4:	00110003 	.word	0x00110003
     4e8:	00120003 	.word	0x00120003
     4ec:	00130003 	.word	0x00130003
     4f0:	000d0003 	.word	0x000d0003
     4f4:	000e0003 	.word	0x000e0003
     4f8:	000f0003 	.word	0x000f0003
     4fc:	00170003 	.word	0x00170003
     500:	00180003 	.word	0x00180003
     504:	00190003 	.word	0x00190003
     508:	00040003 	.word	0x00040003
     50c:	00080003 	.word	0x00080003
     510:	00100003 	.word	0x00100003
     514:	000c0003 	.word	0x000c0003
     518:	00160003 	.word	0x00160003

0000051c <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     51c:	b530      	push	{r4, r5, lr}
     51e:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     520:	4b0b      	ldr	r3, [pc, #44]	; (550 <_sercom_get_sercom_inst_index+0x34>)
     522:	466a      	mov	r2, sp
     524:	cb32      	ldmia	r3!, {r1, r4, r5}
     526:	c232      	stmia	r2!, {r1, r4, r5}
     528:	cb32      	ldmia	r3!, {r1, r4, r5}
     52a:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     52c:	9b00      	ldr	r3, [sp, #0]
     52e:	4283      	cmp	r3, r0
     530:	d00b      	beq.n	54a <_sercom_get_sercom_inst_index+0x2e>
     532:	2301      	movs	r3, #1
     534:	009a      	lsls	r2, r3, #2
     536:	4669      	mov	r1, sp
     538:	5852      	ldr	r2, [r2, r1]
     53a:	4282      	cmp	r2, r0
     53c:	d006      	beq.n	54c <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     53e:	3301      	adds	r3, #1
     540:	2b06      	cmp	r3, #6
     542:	d1f7      	bne.n	534 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     544:	2000      	movs	r0, #0
}
     546:	b007      	add	sp, #28
     548:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     54a:	2300      	movs	r3, #0
			return i;
     54c:	b2d8      	uxtb	r0, r3
     54e:	e7fa      	b.n	546 <_sercom_get_sercom_inst_index+0x2a>
     550:	000018fc 	.word	0x000018fc

00000554 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     554:	b5f0      	push	{r4, r5, r6, r7, lr}
     556:	46d6      	mov	lr, sl
     558:	464f      	mov	r7, r9
     55a:	b580      	push	{r7, lr}
     55c:	b08b      	sub	sp, #44	; 0x2c
     55e:	4681      	mov	r9, r0
     560:	000f      	movs	r7, r1
     562:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     564:	0003      	movs	r3, r0
     566:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     568:	680b      	ldr	r3, [r1, #0]
     56a:	079b      	lsls	r3, r3, #30
     56c:	d409      	bmi.n	582 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     56e:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     570:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     572:	07db      	lsls	r3, r3, #31
     574:	d400      	bmi.n	578 <spi_init+0x24>
     576:	e0b1      	b.n	6dc <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     578:	b00b      	add	sp, #44	; 0x2c
     57a:	bc0c      	pop	{r2, r3}
     57c:	4691      	mov	r9, r2
     57e:	469a      	mov	sl, r3
     580:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     582:	6a93      	ldr	r3, [r2, #40]	; 0x28
     584:	9305      	str	r3, [sp, #20]
     586:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     588:	9306      	str	r3, [sp, #24]
     58a:	6b13      	ldr	r3, [r2, #48]	; 0x30
     58c:	9307      	str	r3, [sp, #28]
     58e:	6b53      	ldr	r3, [r2, #52]	; 0x34
     590:	9308      	str	r3, [sp, #32]
     592:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     594:	ab05      	add	r3, sp, #20
     596:	9301      	str	r3, [sp, #4]
     598:	e00a      	b.n	5b0 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     59a:	0038      	movs	r0, r7
     59c:	4baf      	ldr	r3, [pc, #700]	; (85c <spi_init+0x308>)
     59e:	4798      	blx	r3
     5a0:	e00c      	b.n	5bc <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     5a2:	230f      	movs	r3, #15
     5a4:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     5a6:	4281      	cmp	r1, r0
     5a8:	d12d      	bne.n	606 <spi_init+0xb2>
     5aa:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     5ac:	2e04      	cmp	r6, #4
     5ae:	d02f      	beq.n	610 <spi_init+0xbc>
     5b0:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     5b2:	00b3      	lsls	r3, r6, #2
     5b4:	9a01      	ldr	r2, [sp, #4]
     5b6:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     5b8:	2800      	cmp	r0, #0
     5ba:	d0ee      	beq.n	59a <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     5bc:	1c43      	adds	r3, r0, #1
     5be:	d0f4      	beq.n	5aa <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     5c0:	0401      	lsls	r1, r0, #16
     5c2:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     5c4:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     5c6:	b2c3      	uxtb	r3, r0
     5c8:	469c      	mov	ip, r3
		return NULL;
     5ca:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     5cc:	0602      	lsls	r2, r0, #24
     5ce:	d405      	bmi.n	5dc <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     5d0:	4663      	mov	r3, ip
     5d2:	095b      	lsrs	r3, r3, #5
     5d4:	01db      	lsls	r3, r3, #7
     5d6:	4aa2      	ldr	r2, [pc, #648]	; (860 <spi_init+0x30c>)
     5d8:	4692      	mov	sl, r2
     5da:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     5dc:	221f      	movs	r2, #31
     5de:	4660      	mov	r0, ip
     5e0:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     5e2:	1898      	adds	r0, r3, r2
     5e4:	3040      	adds	r0, #64	; 0x40
     5e6:	7800      	ldrb	r0, [r0, #0]
     5e8:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     5ea:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     5ec:	4655      	mov	r5, sl
     5ee:	07ed      	lsls	r5, r5, #31
     5f0:	d5d9      	bpl.n	5a6 <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     5f2:	0852      	lsrs	r2, r2, #1
     5f4:	189b      	adds	r3, r3, r2
     5f6:	3330      	adds	r3, #48	; 0x30
     5f8:	7818      	ldrb	r0, [r3, #0]
     5fa:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     5fc:	4663      	mov	r3, ip
     5fe:	07db      	lsls	r3, r3, #31
     600:	d5cf      	bpl.n	5a2 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     602:	0900      	lsrs	r0, r0, #4
     604:	e7cf      	b.n	5a6 <spi_init+0x52>
			module->hw = NULL;
     606:	2300      	movs	r3, #0
     608:	464a      	mov	r2, r9
     60a:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     60c:	201c      	movs	r0, #28
     60e:	e7b3      	b.n	578 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     610:	2013      	movs	r0, #19
     612:	4b94      	ldr	r3, [pc, #592]	; (864 <spi_init+0x310>)
     614:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     616:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     618:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     61a:	2a01      	cmp	r2, #1
     61c:	d016      	beq.n	64c <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
     61e:	7821      	ldrb	r1, [r4, #0]
     620:	2900      	cmp	r1, #0
     622:	d127      	bne.n	674 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
     624:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     626:	7fe2      	ldrb	r2, [r4, #31]
     628:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     62a:	7fa0      	ldrb	r0, [r4, #30]
     62c:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
     62e:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
     630:	429a      	cmp	r2, r3
     632:	d1a1      	bne.n	578 <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
     634:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
     636:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
     638:	3004      	adds	r0, #4
     63a:	5c20      	ldrb	r0, [r4, r0]
     63c:	2800      	cmp	r0, #0
     63e:	d001      	beq.n	644 <spi_init+0xf0>
     640:	2040      	movs	r0, #64	; 0x40
     642:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     644:	2008      	movs	r0, #8
     646:	4303      	orrs	r3, r0
     648:	431d      	orrs	r5, r3
     64a:	e014      	b.n	676 <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
     64c:	aa04      	add	r2, sp, #16
     64e:	0001      	movs	r1, r0
     650:	69a0      	ldr	r0, [r4, #24]
     652:	4b85      	ldr	r3, [pc, #532]	; (868 <spi_init+0x314>)
     654:	4798      	blx	r3
     656:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     658:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     65a:	2b00      	cmp	r3, #0
     65c:	d000      	beq.n	660 <spi_init+0x10c>
     65e:	e78b      	b.n	578 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     660:	7b3b      	ldrb	r3, [r7, #12]
     662:	b2db      	uxtb	r3, r3
     664:	aa04      	add	r2, sp, #16
     666:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     668:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     66a:	429a      	cmp	r2, r3
     66c:	d000      	beq.n	670 <spi_init+0x11c>
     66e:	e783      	b.n	578 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     670:	350c      	adds	r5, #12
     672:	e7d4      	b.n	61e <spi_init+0xca>
	uint32_t ctrlb = 0;
     674:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
     676:	6863      	ldr	r3, [r4, #4]
     678:	68a0      	ldr	r0, [r4, #8]
     67a:	4303      	orrs	r3, r0
     67c:	68e0      	ldr	r0, [r4, #12]
     67e:	4303      	orrs	r3, r0
     680:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     682:	7c20      	ldrb	r0, [r4, #16]
     684:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
     686:	7c60      	ldrb	r0, [r4, #17]
     688:	2800      	cmp	r0, #0
     68a:	d001      	beq.n	690 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     68c:	2080      	movs	r0, #128	; 0x80
     68e:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
     690:	7ca0      	ldrb	r0, [r4, #18]
     692:	2800      	cmp	r0, #0
     694:	d002      	beq.n	69c <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     696:	2080      	movs	r0, #128	; 0x80
     698:	0280      	lsls	r0, r0, #10
     69a:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
     69c:	7ce0      	ldrb	r0, [r4, #19]
     69e:	2800      	cmp	r0, #0
     6a0:	d002      	beq.n	6a8 <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     6a2:	2080      	movs	r0, #128	; 0x80
     6a4:	0080      	lsls	r0, r0, #2
     6a6:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
     6a8:	7d20      	ldrb	r0, [r4, #20]
     6aa:	2800      	cmp	r0, #0
     6ac:	d002      	beq.n	6b4 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     6ae:	2080      	movs	r0, #128	; 0x80
     6b0:	0180      	lsls	r0, r0, #6
     6b2:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
     6b4:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     6b6:	2502      	movs	r5, #2
     6b8:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
     6ba:	4283      	cmp	r3, r0
     6bc:	d004      	beq.n	6c8 <spi_init+0x174>
	module->hw = NULL;
     6be:	2300      	movs	r3, #0
     6c0:	464a      	mov	r2, r9
     6c2:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     6c4:	201c      	movs	r0, #28
     6c6:	e757      	b.n	578 <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
     6c8:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     6ca:	4293      	cmp	r3, r2
     6cc:	d1f7      	bne.n	6be <spi_init+0x16a>
		module->mode           = config->mode;
     6ce:	464b      	mov	r3, r9
     6d0:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
     6d2:	7c23      	ldrb	r3, [r4, #16]
     6d4:	464a      	mov	r2, r9
     6d6:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     6d8:	2000      	movs	r0, #0
     6da:	e74d      	b.n	578 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     6dc:	0008      	movs	r0, r1
     6de:	4b63      	ldr	r3, [pc, #396]	; (86c <spi_init+0x318>)
     6e0:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     6e2:	4a63      	ldr	r2, [pc, #396]	; (870 <spi_init+0x31c>)
     6e4:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     6e6:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     6e8:	2301      	movs	r3, #1
     6ea:	40ab      	lsls	r3, r5
     6ec:	430b      	orrs	r3, r1
     6ee:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     6f0:	a909      	add	r1, sp, #36	; 0x24
     6f2:	2624      	movs	r6, #36	; 0x24
     6f4:	5da3      	ldrb	r3, [r4, r6]
     6f6:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     6f8:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     6fa:	b2c5      	uxtb	r5, r0
     6fc:	0028      	movs	r0, r5
     6fe:	4b5d      	ldr	r3, [pc, #372]	; (874 <spi_init+0x320>)
     700:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     702:	0028      	movs	r0, r5
     704:	4b5c      	ldr	r3, [pc, #368]	; (878 <spi_init+0x324>)
     706:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     708:	5da0      	ldrb	r0, [r4, r6]
     70a:	2100      	movs	r1, #0
     70c:	4b5b      	ldr	r3, [pc, #364]	; (87c <spi_init+0x328>)
     70e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     710:	7823      	ldrb	r3, [r4, #0]
     712:	2b01      	cmp	r3, #1
     714:	d020      	beq.n	758 <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
     716:	7823      	ldrb	r3, [r4, #0]
     718:	2b00      	cmp	r3, #0
     71a:	d103      	bne.n	724 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     71c:	683b      	ldr	r3, [r7, #0]
     71e:	2208      	movs	r2, #8
     720:	4313      	orrs	r3, r2
     722:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     724:	464b      	mov	r3, r9
     726:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     728:	ab04      	add	r3, sp, #16
     72a:	2280      	movs	r2, #128	; 0x80
     72c:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     72e:	2200      	movs	r2, #0
     730:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     732:	2101      	movs	r1, #1
     734:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     736:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     738:	7823      	ldrb	r3, [r4, #0]
     73a:	2b00      	cmp	r3, #0
     73c:	d101      	bne.n	742 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     73e:	ab04      	add	r3, sp, #16
     740:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     744:	9305      	str	r3, [sp, #20]
     746:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     748:	9306      	str	r3, [sp, #24]
     74a:	6b23      	ldr	r3, [r4, #48]	; 0x30
     74c:	9307      	str	r3, [sp, #28]
     74e:	6b63      	ldr	r3, [r4, #52]	; 0x34
     750:	9308      	str	r3, [sp, #32]
     752:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     754:	ad05      	add	r5, sp, #20
     756:	e011      	b.n	77c <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     758:	683b      	ldr	r3, [r7, #0]
     75a:	220c      	movs	r2, #12
     75c:	4313      	orrs	r3, r2
     75e:	603b      	str	r3, [r7, #0]
     760:	e7d9      	b.n	716 <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     762:	0030      	movs	r0, r6
     764:	4b3d      	ldr	r3, [pc, #244]	; (85c <spi_init+0x308>)
     766:	4798      	blx	r3
     768:	e00d      	b.n	786 <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     76a:	a904      	add	r1, sp, #16
     76c:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     76e:	0c00      	lsrs	r0, r0, #16
     770:	b2c0      	uxtb	r0, r0
     772:	4b43      	ldr	r3, [pc, #268]	; (880 <spi_init+0x32c>)
     774:	4798      	blx	r3
     776:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     778:	2f04      	cmp	r7, #4
     77a:	d007      	beq.n	78c <spi_init+0x238>
     77c:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     77e:	00bb      	lsls	r3, r7, #2
     780:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     782:	2800      	cmp	r0, #0
     784:	d0ed      	beq.n	762 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
     786:	1c43      	adds	r3, r0, #1
     788:	d1ef      	bne.n	76a <spi_init+0x216>
     78a:	e7f4      	b.n	776 <spi_init+0x222>
	module->mode             = config->mode;
     78c:	7823      	ldrb	r3, [r4, #0]
     78e:	464a      	mov	r2, r9
     790:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     792:	7c23      	ldrb	r3, [r4, #16]
     794:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     796:	7ca3      	ldrb	r3, [r4, #18]
     798:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     79a:	7d23      	ldrb	r3, [r4, #20]
     79c:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     79e:	2200      	movs	r2, #0
     7a0:	ab02      	add	r3, sp, #8
     7a2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     7a4:	7823      	ldrb	r3, [r4, #0]
     7a6:	2b01      	cmp	r3, #1
     7a8:	d012      	beq.n	7d0 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
     7aa:	7823      	ldrb	r3, [r4, #0]
     7ac:	2b00      	cmp	r3, #0
     7ae:	d127      	bne.n	800 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
     7b0:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     7b2:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
     7b4:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     7b6:	7fe1      	ldrb	r1, [r4, #31]
     7b8:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     7ba:	7fa5      	ldrb	r5, [r4, #30]
     7bc:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     7be:	4319      	orrs	r1, r3
     7c0:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     7c2:	2320      	movs	r3, #32
     7c4:	5ce3      	ldrb	r3, [r4, r3]
     7c6:	2b00      	cmp	r3, #0
     7c8:	d01c      	beq.n	804 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     7ca:	2340      	movs	r3, #64	; 0x40
     7cc:	431a      	orrs	r2, r3
     7ce:	e019      	b.n	804 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7d0:	464b      	mov	r3, r9
     7d2:	6818      	ldr	r0, [r3, #0]
     7d4:	4b25      	ldr	r3, [pc, #148]	; (86c <spi_init+0x318>)
     7d6:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7d8:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     7da:	b2c0      	uxtb	r0, r0
     7dc:	4b21      	ldr	r3, [pc, #132]	; (864 <spi_init+0x310>)
     7de:	4798      	blx	r3
     7e0:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     7e2:	ab02      	add	r3, sp, #8
     7e4:	1d9a      	adds	r2, r3, #6
     7e6:	69a0      	ldr	r0, [r4, #24]
     7e8:	4b1f      	ldr	r3, [pc, #124]	; (868 <spi_init+0x314>)
     7ea:	4798      	blx	r3
     7ec:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     7ee:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     7f0:	2b00      	cmp	r3, #0
     7f2:	d000      	beq.n	7f6 <spi_init+0x2a2>
     7f4:	e6c0      	b.n	578 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     7f6:	ab02      	add	r3, sp, #8
     7f8:	3306      	adds	r3, #6
     7fa:	781b      	ldrb	r3, [r3, #0]
     7fc:	7333      	strb	r3, [r6, #12]
     7fe:	e7d4      	b.n	7aa <spi_init+0x256>
	uint32_t ctrlb = 0;
     800:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     802:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     804:	6863      	ldr	r3, [r4, #4]
     806:	68a1      	ldr	r1, [r4, #8]
     808:	430b      	orrs	r3, r1
     80a:	68e1      	ldr	r1, [r4, #12]
     80c:	430b      	orrs	r3, r1
     80e:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     810:	7c21      	ldrb	r1, [r4, #16]
     812:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     814:	7c61      	ldrb	r1, [r4, #17]
     816:	2900      	cmp	r1, #0
     818:	d103      	bne.n	822 <spi_init+0x2ce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     81a:	491a      	ldr	r1, [pc, #104]	; (884 <spi_init+0x330>)
     81c:	7889      	ldrb	r1, [r1, #2]
     81e:	0789      	lsls	r1, r1, #30
     820:	d501      	bpl.n	826 <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     822:	2180      	movs	r1, #128	; 0x80
     824:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     826:	7ca1      	ldrb	r1, [r4, #18]
     828:	2900      	cmp	r1, #0
     82a:	d002      	beq.n	832 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     82c:	2180      	movs	r1, #128	; 0x80
     82e:	0289      	lsls	r1, r1, #10
     830:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     832:	7ce1      	ldrb	r1, [r4, #19]
     834:	2900      	cmp	r1, #0
     836:	d002      	beq.n	83e <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     838:	2180      	movs	r1, #128	; 0x80
     83a:	0089      	lsls	r1, r1, #2
     83c:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     83e:	7d21      	ldrb	r1, [r4, #20]
     840:	2900      	cmp	r1, #0
     842:	d002      	beq.n	84a <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     844:	2180      	movs	r1, #128	; 0x80
     846:	0189      	lsls	r1, r1, #6
     848:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     84a:	6831      	ldr	r1, [r6, #0]
     84c:	430b      	orrs	r3, r1
     84e:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     850:	6873      	ldr	r3, [r6, #4]
     852:	431a      	orrs	r2, r3
     854:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
     856:	2000      	movs	r0, #0
     858:	e68e      	b.n	578 <spi_init+0x24>
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	000003a5 	.word	0x000003a5
     860:	41004400 	.word	0x41004400
     864:	000014a5 	.word	0x000014a5
     868:	00000331 	.word	0x00000331
     86c:	0000051d 	.word	0x0000051d
     870:	40000400 	.word	0x40000400
     874:	00001489 	.word	0x00001489
     878:	000013fd 	.word	0x000013fd
     87c:	00000359 	.word	0x00000359
     880:	00001581 	.word	0x00001581
     884:	41002000 	.word	0x41002000

00000888 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     888:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     88a:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     88c:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     88e:	2c01      	cmp	r4, #1
     890:	d001      	beq.n	896 <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     892:	0018      	movs	r0, r3
     894:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     896:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     898:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     89a:	2c00      	cmp	r4, #0
     89c:	d1f9      	bne.n	892 <spi_select_slave+0xa>
		if (select) {
     89e:	2a00      	cmp	r2, #0
     8a0:	d058      	beq.n	954 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     8a2:	784b      	ldrb	r3, [r1, #1]
     8a4:	2b00      	cmp	r3, #0
     8a6:	d044      	beq.n	932 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8a8:	6803      	ldr	r3, [r0, #0]
     8aa:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     8ac:	07db      	lsls	r3, r3, #31
     8ae:	d410      	bmi.n	8d2 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     8b0:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     8b2:	09d1      	lsrs	r1, r2, #7
		return NULL;
     8b4:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     8b6:	2900      	cmp	r1, #0
     8b8:	d104      	bne.n	8c4 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     8ba:	0953      	lsrs	r3, r2, #5
     8bc:	01db      	lsls	r3, r3, #7
     8be:	492e      	ldr	r1, [pc, #184]	; (978 <spi_select_slave+0xf0>)
     8c0:	468c      	mov	ip, r1
     8c2:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     8c4:	211f      	movs	r1, #31
     8c6:	4011      	ands	r1, r2
     8c8:	2201      	movs	r2, #1
     8ca:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     8cc:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     8ce:	2305      	movs	r3, #5
     8d0:	e7df      	b.n	892 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     8d2:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     8d4:	09d4      	lsrs	r4, r2, #7
		return NULL;
     8d6:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     8d8:	2c00      	cmp	r4, #0
     8da:	d104      	bne.n	8e6 <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     8dc:	0953      	lsrs	r3, r2, #5
     8de:	01db      	lsls	r3, r3, #7
     8e0:	4c25      	ldr	r4, [pc, #148]	; (978 <spi_select_slave+0xf0>)
     8e2:	46a4      	mov	ip, r4
     8e4:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     8e6:	241f      	movs	r4, #31
     8e8:	4014      	ands	r4, r2
     8ea:	2201      	movs	r2, #1
     8ec:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     8ee:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     8f0:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     8f2:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     8f4:	07d2      	lsls	r2, r2, #31
     8f6:	d501      	bpl.n	8fc <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     8f8:	788a      	ldrb	r2, [r1, #2]
     8fa:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     8fc:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     8fe:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     900:	2a00      	cmp	r2, #0
     902:	d1c6      	bne.n	892 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     904:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     906:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     908:	7e13      	ldrb	r3, [r2, #24]
     90a:	420b      	tst	r3, r1
     90c:	d0fc      	beq.n	908 <spi_select_slave+0x80>
     90e:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     910:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     912:	0749      	lsls	r1, r1, #29
     914:	d5bd      	bpl.n	892 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     916:	8b53      	ldrh	r3, [r2, #26]
     918:	075b      	lsls	r3, r3, #29
     91a:	d501      	bpl.n	920 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     91c:	2304      	movs	r3, #4
     91e:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     920:	7983      	ldrb	r3, [r0, #6]
     922:	2b01      	cmp	r3, #1
     924:	d002      	beq.n	92c <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     926:	6a93      	ldr	r3, [r2, #40]	; 0x28
     928:	2300      	movs	r3, #0
     92a:	e7b2      	b.n	892 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     92c:	6a93      	ldr	r3, [r2, #40]	; 0x28
     92e:	2300      	movs	r3, #0
     930:	e7af      	b.n	892 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     932:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     934:	09d1      	lsrs	r1, r2, #7
		return NULL;
     936:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     938:	2900      	cmp	r1, #0
     93a:	d104      	bne.n	946 <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     93c:	0953      	lsrs	r3, r2, #5
     93e:	01db      	lsls	r3, r3, #7
     940:	490d      	ldr	r1, [pc, #52]	; (978 <spi_select_slave+0xf0>)
     942:	468c      	mov	ip, r1
     944:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     946:	211f      	movs	r1, #31
     948:	4011      	ands	r1, r2
     94a:	2201      	movs	r2, #1
     94c:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     94e:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     950:	2300      	movs	r3, #0
     952:	e79e      	b.n	892 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     954:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     956:	09d1      	lsrs	r1, r2, #7
		return NULL;
     958:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     95a:	2900      	cmp	r1, #0
     95c:	d104      	bne.n	968 <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     95e:	0953      	lsrs	r3, r2, #5
     960:	01db      	lsls	r3, r3, #7
     962:	4905      	ldr	r1, [pc, #20]	; (978 <spi_select_slave+0xf0>)
     964:	468c      	mov	ip, r1
     966:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     968:	211f      	movs	r1, #31
     96a:	4011      	ands	r1, r2
     96c:	2201      	movs	r2, #1
     96e:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     970:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     972:	2300      	movs	r3, #0
     974:	e78d      	b.n	892 <spi_select_slave+0xa>
     976:	46c0      	nop			; (mov r8, r8)
     978:	41004400 	.word	0x41004400

0000097c <configure_port_pins>:
#define MAX_X 128
#define MAX_Y 160


void configure_port_pins(void)
{
     97c:	b500      	push	{lr}
     97e:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     980:	a901      	add	r1, sp, #4
     982:	2301      	movs	r3, #1
     984:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     986:	2200      	movs	r2, #0
     988:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     98a:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA16, &config_port_pin);
     98c:	2010      	movs	r0, #16
     98e:	4b02      	ldr	r3, [pc, #8]	; (998 <configure_port_pins+0x1c>)
     990:	4798      	blx	r3
}
     992:	b003      	add	sp, #12
     994:	bd00      	pop	{pc}
     996:	46c0      	nop			; (mov r8, r8)
     998:	00000e21 	.word	0x00000e21

0000099c <configure_spi_master>:
struct spi_module spi_master_instance;
struct spi_slave_inst slave;


void configure_spi_master(void)
{
     99c:	b530      	push	{r4, r5, lr}
     99e:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
     9a0:	4c24      	ldr	r4, [pc, #144]	; (a34 <configure_spi_master+0x98>)
     9a2:	2311      	movs	r3, #17
     9a4:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     9a6:	2300      	movs	r3, #0
     9a8:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     9aa:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     9ac:	a901      	add	r1, sp, #4
     9ae:	2201      	movs	r2, #1
     9b0:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     9b2:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     9b4:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     9b6:	2011      	movs	r0, #17
     9b8:	4b1f      	ldr	r3, [pc, #124]	; (a38 <configure_spi_master+0x9c>)
     9ba:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     9bc:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
     9be:	09d9      	lsrs	r1, r3, #7
		return NULL;
     9c0:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     9c2:	2900      	cmp	r1, #0
     9c4:	d104      	bne.n	9d0 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
     9c6:	095a      	lsrs	r2, r3, #5
     9c8:	01d2      	lsls	r2, r2, #7
     9ca:	491c      	ldr	r1, [pc, #112]	; (a3c <configure_spi_master+0xa0>)
     9cc:	468c      	mov	ip, r1
     9ce:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9d0:	211f      	movs	r1, #31
     9d2:	4019      	ands	r1, r3
     9d4:	2301      	movs	r3, #1
     9d6:	0018      	movs	r0, r3
     9d8:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     9da:	6190      	str	r0, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
     9dc:	ac02      	add	r4, sp, #8
     9de:	7023      	strb	r3, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     9e0:	2500      	movs	r5, #0
     9e2:	9503      	str	r5, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     9e4:	9504      	str	r5, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     9e6:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     9e8:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     9ea:	74a3      	strb	r3, [r4, #18]
	config->select_slave_low_detect_enable= true;
     9ec:	74e3      	strb	r3, [r4, #19]
	config->master_slave_select_enable= false;
     9ee:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     9f0:	3323      	adds	r3, #35	; 0x23
     9f2:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     9f4:	220c      	movs	r2, #12
     9f6:	2100      	movs	r1, #0
     9f8:	a808      	add	r0, sp, #32
     9fa:	4b11      	ldr	r3, [pc, #68]	; (a40 <configure_spi_master+0xa4>)
     9fc:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	/*config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;*/
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
     9fe:	60e5      	str	r5, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
     a00:	4b10      	ldr	r3, [pc, #64]	; (a44 <configure_spi_master+0xa8>)
     a02:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
     a04:	4b10      	ldr	r3, [pc, #64]	; (a48 <configure_spi_master+0xac>)
     a06:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
     a08:	2301      	movs	r3, #1
     a0a:	425b      	negs	r3, r3
     a0c:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
     a0e:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  12000000; //12MHz  = 400ns per signal
     a10:	4b0e      	ldr	r3, [pc, #56]	; (a4c <configure_spi_master+0xb0>)
     a12:	61a3      	str	r3, [r4, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
     a14:	4d0e      	ldr	r5, [pc, #56]	; (a50 <configure_spi_master+0xb4>)
     a16:	0022      	movs	r2, r4
     a18:	490e      	ldr	r1, [pc, #56]	; (a54 <configure_spi_master+0xb8>)
     a1a:	0028      	movs	r0, r5
     a1c:	4b0e      	ldr	r3, [pc, #56]	; (a58 <configure_spi_master+0xbc>)
     a1e:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     a20:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     a22:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     a24:	2b00      	cmp	r3, #0
     a26:	d1fc      	bne.n	a22 <configure_spi_master+0x86>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     a28:	6813      	ldr	r3, [r2, #0]
     a2a:	2102      	movs	r1, #2
     a2c:	430b      	orrs	r3, r1
     a2e:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
}
     a30:	b011      	add	sp, #68	; 0x44
     a32:	bd30      	pop	{r4, r5, pc}
     a34:	2000009c 	.word	0x2000009c
     a38:	00000e21 	.word	0x00000e21
     a3c:	41004400 	.word	0x41004400
     a40:	000018ed 	.word	0x000018ed
     a44:	00040003 	.word	0x00040003
     a48:	00050003 	.word	0x00050003
     a4c:	00b71b00 	.word	0x00b71b00
     a50:	20000090 	.word	0x20000090
     a54:	42000800 	.word	0x42000800
     a58:	00000555 	.word	0x00000555

00000a5c <spi_io>:
	SercomSpi *const spi_module = &(module->hw->SPI);
     a5c:	4b03      	ldr	r3, [pc, #12]	; (a6c <spi_io+0x10>)
     a5e:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     a60:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     a62:	07d2      	lsls	r2, r2, #31
     a64:	d500      	bpl.n	a68 <spi_io+0xc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     a66:	6298      	str	r0, [r3, #40]	; 0x28


void spi_io(unsigned char o) {
	spi_write(&spi_master_instance,o);
}
     a68:	4770      	bx	lr
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	20000090 	.word	0x20000090

00000a70 <LCD_command>:

void LCD_command(unsigned char com) {
     a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a72:	0007      	movs	r7, r0
		port_base->OUTCLR.reg = pin_mask;
     a74:	2280      	movs	r2, #128	; 0x80
     a76:	0252      	lsls	r2, r2, #9
     a78:	4b08      	ldr	r3, [pc, #32]	; (a9c <LCD_command+0x2c>)
     a7a:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(DAT_PIN,false);
	spi_select_slave(&spi_master_instance, &slave, true);
     a7c:	4e08      	ldr	r6, [pc, #32]	; (aa0 <LCD_command+0x30>)
     a7e:	4d09      	ldr	r5, [pc, #36]	; (aa4 <LCD_command+0x34>)
     a80:	2201      	movs	r2, #1
     a82:	0031      	movs	r1, r6
     a84:	0028      	movs	r0, r5
     a86:	4c08      	ldr	r4, [pc, #32]	; (aa8 <LCD_command+0x38>)
     a88:	47a0      	blx	r4
	spi_io(com);
     a8a:	0038      	movs	r0, r7
     a8c:	4b07      	ldr	r3, [pc, #28]	; (aac <LCD_command+0x3c>)
     a8e:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
     a90:	2200      	movs	r2, #0
     a92:	0031      	movs	r1, r6
     a94:	0028      	movs	r0, r5
     a96:	47a0      	blx	r4
}
     a98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     a9a:	46c0      	nop			; (mov r8, r8)
     a9c:	41004400 	.word	0x41004400
     aa0:	2000009c 	.word	0x2000009c
     aa4:	20000090 	.word	0x20000090
     aa8:	00000889 	.word	0x00000889
     aac:	00000a5d 	.word	0x00000a5d

00000ab0 <LCD_data>:

void LCD_data(unsigned char dat) {
     ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ab2:	0007      	movs	r7, r0
		port_base->OUTSET.reg = pin_mask;
     ab4:	2280      	movs	r2, #128	; 0x80
     ab6:	0252      	lsls	r2, r2, #9
     ab8:	4b08      	ldr	r3, [pc, #32]	; (adc <LCD_data+0x2c>)
     aba:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(DAT_PIN,true);
	spi_select_slave(&spi_master_instance, &slave, true);
     abc:	4e08      	ldr	r6, [pc, #32]	; (ae0 <LCD_data+0x30>)
     abe:	4d09      	ldr	r5, [pc, #36]	; (ae4 <LCD_data+0x34>)
     ac0:	2201      	movs	r2, #1
     ac2:	0031      	movs	r1, r6
     ac4:	0028      	movs	r0, r5
     ac6:	4c08      	ldr	r4, [pc, #32]	; (ae8 <LCD_data+0x38>)
     ac8:	47a0      	blx	r4
	spi_io(dat);
     aca:	0038      	movs	r0, r7
     acc:	4b07      	ldr	r3, [pc, #28]	; (aec <LCD_data+0x3c>)
     ace:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
     ad0:	2200      	movs	r2, #0
     ad2:	0031      	movs	r1, r6
     ad4:	0028      	movs	r0, r5
     ad6:	47a0      	blx	r4
}
     ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ada:	46c0      	nop			; (mov r8, r8)
     adc:	41004400 	.word	0x41004400
     ae0:	2000009c 	.word	0x2000009c
     ae4:	20000090 	.word	0x20000090
     ae8:	00000889 	.word	0x00000889
     aec:	00000a5d 	.word	0x00000a5d

00000af0 <LCD_data16>:

void LCD_data16(unsigned short dat) {
     af0:	b5f0      	push	{r4, r5, r6, r7, lr}
     af2:	b083      	sub	sp, #12
     af4:	0004      	movs	r4, r0
     af6:	2280      	movs	r2, #128	; 0x80
     af8:	0252      	lsls	r2, r2, #9
     afa:	4b0b      	ldr	r3, [pc, #44]	; (b28 <LCD_data16+0x38>)
     afc:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(DAT_PIN,true);
	spi_select_slave(&spi_master_instance, &slave, true);
     afe:	4e0b      	ldr	r6, [pc, #44]	; (b2c <LCD_data16+0x3c>)
     b00:	4d0b      	ldr	r5, [pc, #44]	; (b30 <LCD_data16+0x40>)
     b02:	2201      	movs	r2, #1
     b04:	0031      	movs	r1, r6
     b06:	0028      	movs	r0, r5
     b08:	4f0a      	ldr	r7, [pc, #40]	; (b34 <LCD_data16+0x44>)
     b0a:	47b8      	blx	r7
	spi_io(dat>>8);
     b0c:	9401      	str	r4, [sp, #4]
     b0e:	0a20      	lsrs	r0, r4, #8
     b10:	4c09      	ldr	r4, [pc, #36]	; (b38 <LCD_data16+0x48>)
     b12:	47a0      	blx	r4
	spi_io(dat);
     b14:	466b      	mov	r3, sp
     b16:	7918      	ldrb	r0, [r3, #4]
     b18:	47a0      	blx	r4
	spi_select_slave(&spi_master_instance, &slave, false);
     b1a:	2200      	movs	r2, #0
     b1c:	0031      	movs	r1, r6
     b1e:	0028      	movs	r0, r5
     b20:	47b8      	blx	r7
}
     b22:	b003      	add	sp, #12
     b24:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	41004400 	.word	0x41004400
     b2c:	2000009c 	.word	0x2000009c
     b30:	20000090 	.word	0x20000090
     b34:	00000889 	.word	0x00000889
     b38:	00000a5d 	.word	0x00000a5d

00000b3c <LCD_init>:




void LCD_init() {
     b3c:	b570      	push	{r4, r5, r6, lr}
	configure_spi_master();
     b3e:	4b71      	ldr	r3, [pc, #452]	; (d04 <LCD_init+0x1c8>)
     b40:	4798      	blx	r3
	delay_ms(1);
     b42:	2001      	movs	r0, #1
     b44:	4e70      	ldr	r6, [pc, #448]	; (d08 <LCD_init+0x1cc>)
     b46:	47b0      	blx	r6
  LCD_command(ST7735_SWRESET);//software reset
     b48:	2001      	movs	r0, #1
     b4a:	4d70      	ldr	r5, [pc, #448]	; (d0c <LCD_init+0x1d0>)
     b4c:	47a8      	blx	r5
  delay_ms(50);
     b4e:	2032      	movs	r0, #50	; 0x32
     b50:	47b0      	blx	r6
	LCD_command(ST7735_SLPOUT);//exit sleep
     b52:	2011      	movs	r0, #17
     b54:	47a8      	blx	r5
	delay_ms(5);
     b56:	2005      	movs	r0, #5
     b58:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR1);//Frame Rate Control (In normal mode/Full colors)
     b5a:	20b1      	movs	r0, #177	; 0xb1
     b5c:	47a8      	blx	r5
	LCD_data(0x01);
     b5e:	2001      	movs	r0, #1
     b60:	4c6b      	ldr	r4, [pc, #428]	; (d10 <LCD_init+0x1d4>)
     b62:	47a0      	blx	r4
	LCD_data(0x2C);
     b64:	202c      	movs	r0, #44	; 0x2c
     b66:	47a0      	blx	r4
	LCD_data(0x2D);
     b68:	202d      	movs	r0, #45	; 0x2d
     b6a:	47a0      	blx	r4
	delay_ms(1);
     b6c:	2001      	movs	r0, #1
     b6e:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR2);//Frame Rate Control (In normal mode/Full colors)
     b70:	20b2      	movs	r0, #178	; 0xb2
     b72:	47a8      	blx	r5
	LCD_data(0x01);
     b74:	2001      	movs	r0, #1
     b76:	47a0      	blx	r4
	LCD_data(0x2C);
     b78:	202c      	movs	r0, #44	; 0x2c
     b7a:	47a0      	blx	r4
	LCD_data(0x2D);
     b7c:	202d      	movs	r0, #45	; 0x2d
     b7e:	47a0      	blx	r4
	delay_ms(1);
     b80:	2001      	movs	r0, #1
     b82:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR3);//Frame Rate Control (In normal mode/Full colors)
     b84:	20b3      	movs	r0, #179	; 0xb3
     b86:	47a8      	blx	r5
	LCD_data(0x01);
     b88:	2001      	movs	r0, #1
     b8a:	47a0      	blx	r4
	LCD_data(0x2C);
     b8c:	202c      	movs	r0, #44	; 0x2c
     b8e:	47a0      	blx	r4
	LCD_data(0x2D);
     b90:	202d      	movs	r0, #45	; 0x2d
     b92:	47a0      	blx	r4
	LCD_data(0x01);
     b94:	2001      	movs	r0, #1
     b96:	47a0      	blx	r4
	LCD_data(0x2C);
     b98:	202c      	movs	r0, #44	; 0x2c
     b9a:	47a0      	blx	r4
	LCD_data(0x2D);
     b9c:	202d      	movs	r0, #45	; 0x2d
     b9e:	47a0      	blx	r4
	delay_ms(1);
     ba0:	2001      	movs	r0, #1
     ba2:	47b0      	blx	r6
	LCD_command(ST7735_INVCTR);//display inversion
     ba4:	20b4      	movs	r0, #180	; 0xb4
     ba6:	47a8      	blx	r5
	LCD_data(0x07);
     ba8:	2007      	movs	r0, #7
     baa:	47a0      	blx	r4
	delay_ms(1);
     bac:	2001      	movs	r0, #1
     bae:	47b0      	blx	r6
	LCD_command(ST7735_PWCTR1);
     bb0:	20c0      	movs	r0, #192	; 0xc0
     bb2:	47a8      	blx	r5
	LCD_data(0x0A);//4.30 - 0x0A
     bb4:	200a      	movs	r0, #10
     bb6:	47a0      	blx	r4
	LCD_data(0x02);//0x05
     bb8:	2002      	movs	r0, #2
     bba:	47a0      	blx	r4
	LCD_data(0x84);//added auto mode
     bbc:	2084      	movs	r0, #132	; 0x84
     bbe:	47a0      	blx	r4
	delay_ms(1);
     bc0:	2001      	movs	r0, #1
     bc2:	47b0      	blx	r6
	LCD_command(ST7735_PWCTR2);
     bc4:	20c1      	movs	r0, #193	; 0xc1
     bc6:	47a8      	blx	r5
	LCD_data(0xC5);
     bc8:	20c5      	movs	r0, #197	; 0xc5
     bca:	47a0      	blx	r4
	delay_ms(1);
     bcc:	2001      	movs	r0, #1
     bce:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR3);
     bd0:	20c2      	movs	r0, #194	; 0xc2
     bd2:	47a8      	blx	r5
	LCD_data(0x0A);
     bd4:	200a      	movs	r0, #10
     bd6:	47a0      	blx	r4
	LCD_data(0x00);
     bd8:	2000      	movs	r0, #0
     bda:	47a0      	blx	r4
	delay_ms(1);
     bdc:	2001      	movs	r0, #1
     bde:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR4);
     be0:	20c3      	movs	r0, #195	; 0xc3
     be2:	47a8      	blx	r5
	LCD_data(0x8A);
     be4:	208a      	movs	r0, #138	; 0x8a
     be6:	47a0      	blx	r4
	LCD_data(0x2A);
     be8:	202a      	movs	r0, #42	; 0x2a
     bea:	47a0      	blx	r4
	delay_ms(1);
     bec:	2001      	movs	r0, #1
     bee:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR5);
     bf0:	20c4      	movs	r0, #196	; 0xc4
     bf2:	47a8      	blx	r5
	LCD_data(0x8A);
     bf4:	208a      	movs	r0, #138	; 0x8a
     bf6:	47a0      	blx	r4
	LCD_data(0xEE);
     bf8:	20ee      	movs	r0, #238	; 0xee
     bfa:	47a0      	blx	r4
	delay_ms(1);
     bfc:	2001      	movs	r0, #1
     bfe:	47b0      	blx	r6
	LCD_command(ST7735_VMCTR1);
     c00:	20c5      	movs	r0, #197	; 0xc5
     c02:	47a8      	blx	r5
	LCD_data(0x0E);
     c04:	200e      	movs	r0, #14
     c06:	47a0      	blx	r4
	delay_ms(1);
     c08:	2001      	movs	r0, #1
     c0a:	47b0      	blx	r6
	LCD_command(ST7735_INVOFF);
     c0c:	2020      	movs	r0, #32
     c0e:	47a8      	blx	r5
	LCD_command(ST7735_MADCTL);
     c10:	2036      	movs	r0, #54	; 0x36
     c12:	47a8      	blx	r5
	LCD_data(0xC8);
     c14:	20c8      	movs	r0, #200	; 0xc8
     c16:	47a0      	blx	r4
	delay_ms(1);
     c18:	2001      	movs	r0, #1
     c1a:	47b0      	blx	r6
	LCD_command(ST7735_COLMOD);
     c1c:	203a      	movs	r0, #58	; 0x3a
     c1e:	47a8      	blx	r5
	LCD_data(0x05);
     c20:	2005      	movs	r0, #5
     c22:	47a0      	blx	r4
	delay_ms(1);
     c24:	2001      	movs	r0, #1
     c26:	47b0      	blx	r6
	LCD_command(ST7735_CASET);
     c28:	202a      	movs	r0, #42	; 0x2a
     c2a:	47a8      	blx	r5
	LCD_data(0x00);
     c2c:	2000      	movs	r0, #0
     c2e:	47a0      	blx	r4
	LCD_data(0x00);
     c30:	2000      	movs	r0, #0
     c32:	47a0      	blx	r4
	LCD_data(0x00);
     c34:	2000      	movs	r0, #0
     c36:	47a0      	blx	r4
	LCD_data(0x7F);
     c38:	207f      	movs	r0, #127	; 0x7f
     c3a:	47a0      	blx	r4
	delay_ms(1);
     c3c:	2001      	movs	r0, #1
     c3e:	47b0      	blx	r6
	LCD_command(ST7735_RASET);
     c40:	202b      	movs	r0, #43	; 0x2b
     c42:	47a8      	blx	r5
	LCD_data(0x00);
     c44:	2000      	movs	r0, #0
     c46:	47a0      	blx	r4
	LCD_data(0x00);
     c48:	2000      	movs	r0, #0
     c4a:	47a0      	blx	r4
	LCD_data(0x00);
     c4c:	2000      	movs	r0, #0
     c4e:	47a0      	blx	r4
	LCD_data(0x9F);
     c50:	209f      	movs	r0, #159	; 0x9f
     c52:	47a0      	blx	r4
	delay_ms(1);
     c54:	2001      	movs	r0, #1
     c56:	47b0      	blx	r6
	LCD_command(ST7735_GMCTRP1);
     c58:	20e0      	movs	r0, #224	; 0xe0
     c5a:	47a8      	blx	r5
	LCD_data(0x02);
     c5c:	2002      	movs	r0, #2
     c5e:	47a0      	blx	r4
	LCD_data(0x1C);
     c60:	201c      	movs	r0, #28
     c62:	47a0      	blx	r4
	LCD_data(0x07);
     c64:	2007      	movs	r0, #7
     c66:	47a0      	blx	r4
	LCD_data(0x12);
     c68:	2012      	movs	r0, #18
     c6a:	47a0      	blx	r4
	LCD_data(0x37);
     c6c:	2037      	movs	r0, #55	; 0x37
     c6e:	47a0      	blx	r4
	LCD_data(0x32);
     c70:	2032      	movs	r0, #50	; 0x32
     c72:	47a0      	blx	r4
	LCD_data(0x29);
     c74:	2029      	movs	r0, #41	; 0x29
     c76:	47a0      	blx	r4
	LCD_data(0x2D);
     c78:	202d      	movs	r0, #45	; 0x2d
     c7a:	47a0      	blx	r4
	LCD_data(0x29);
     c7c:	2029      	movs	r0, #41	; 0x29
     c7e:	47a0      	blx	r4
	LCD_data(0x25);
     c80:	2025      	movs	r0, #37	; 0x25
     c82:	47a0      	blx	r4
	LCD_data(0x2B);
     c84:	202b      	movs	r0, #43	; 0x2b
     c86:	47a0      	blx	r4
	LCD_data(0x39);
     c88:	2039      	movs	r0, #57	; 0x39
     c8a:	47a0      	blx	r4
	LCD_data(0x00);
     c8c:	2000      	movs	r0, #0
     c8e:	47a0      	blx	r4
	LCD_data(0x01);
     c90:	2001      	movs	r0, #1
     c92:	47a0      	blx	r4
	LCD_data(0x03);
     c94:	2003      	movs	r0, #3
     c96:	47a0      	blx	r4
	LCD_data(0x10);
     c98:	2010      	movs	r0, #16
     c9a:	47a0      	blx	r4
	delay_ms(1);
     c9c:	2001      	movs	r0, #1
     c9e:	47b0      	blx	r6
	LCD_command(ST7735_GMCTRN1);
     ca0:	20e1      	movs	r0, #225	; 0xe1
     ca2:	47a8      	blx	r5
	LCD_data(0x03);
     ca4:	2003      	movs	r0, #3
     ca6:	47a0      	blx	r4
	LCD_data(0x1D);
     ca8:	201d      	movs	r0, #29
     caa:	47a0      	blx	r4
	LCD_data(0x07);
     cac:	2007      	movs	r0, #7
     cae:	47a0      	blx	r4
	LCD_data(0x06);
     cb0:	2006      	movs	r0, #6
     cb2:	47a0      	blx	r4
	LCD_data(0x2E);
     cb4:	202e      	movs	r0, #46	; 0x2e
     cb6:	47a0      	blx	r4
	LCD_data(0x2C);
     cb8:	202c      	movs	r0, #44	; 0x2c
     cba:	47a0      	blx	r4
	LCD_data(0x29);
     cbc:	2029      	movs	r0, #41	; 0x29
     cbe:	47a0      	blx	r4
	LCD_data(0x2D);
     cc0:	202d      	movs	r0, #45	; 0x2d
     cc2:	47a0      	blx	r4
	LCD_data(0x2E);
     cc4:	202e      	movs	r0, #46	; 0x2e
     cc6:	47a0      	blx	r4
	LCD_data(0x2E);
     cc8:	202e      	movs	r0, #46	; 0x2e
     cca:	47a0      	blx	r4
	LCD_data(0x37);
     ccc:	2037      	movs	r0, #55	; 0x37
     cce:	47a0      	blx	r4
	LCD_data(0x3F);
     cd0:	203f      	movs	r0, #63	; 0x3f
     cd2:	47a0      	blx	r4
	LCD_data(0x00);
     cd4:	2000      	movs	r0, #0
     cd6:	47a0      	blx	r4
	LCD_data(0x00);
     cd8:	2000      	movs	r0, #0
     cda:	47a0      	blx	r4
	LCD_data(0x02);
     cdc:	2002      	movs	r0, #2
     cde:	47a0      	blx	r4
	LCD_data(0x10);
     ce0:	2010      	movs	r0, #16
     ce2:	47a0      	blx	r4
	delay_ms(1);
     ce4:	2001      	movs	r0, #1
     ce6:	47b0      	blx	r6
	LCD_command(ST7735_NORON);
     ce8:	2013      	movs	r0, #19
     cea:	47a8      	blx	r5
	delay_ms(10);
     cec:	200a      	movs	r0, #10
     cee:	47b0      	blx	r6
	LCD_command(ST7735_DISPON);
     cf0:	2029      	movs	r0, #41	; 0x29
     cf2:	47a8      	blx	r5
	delay_ms(100);
     cf4:	2064      	movs	r0, #100	; 0x64
     cf6:	47b0      	blx	r6
	LCD_command(ST7735_MADCTL); // rotation
     cf8:	2036      	movs	r0, #54	; 0x36
     cfa:	47a8      	blx	r5
    LCD_data(MADCTL_MX | MADCTL_MY | MADCTL_RGB);
     cfc:	20c0      	movs	r0, #192	; 0xc0
     cfe:	47a0      	blx	r4
}
     d00:	bd70      	pop	{r4, r5, r6, pc}
     d02:	46c0      	nop			; (mov r8, r8)
     d04:	0000099d 	.word	0x0000099d
     d08:	00000305 	.word	0x00000305
     d0c:	00000a71 	.word	0x00000a71
     d10:	00000ab1 	.word	0x00000ab1

00000d14 <LCD_setAddr>:
  // check boundary
  LCD_setAddr(x,y,x+1,y+1);
  LCD_data16(color);
}

void LCD_setAddr(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1) {
     d14:	b5f0      	push	{r4, r5, r6, r7, lr}
     d16:	b083      	sub	sp, #12
     d18:	0004      	movs	r4, r0
     d1a:	000e      	movs	r6, r1
     d1c:	0017      	movs	r7, r2
     d1e:	9301      	str	r3, [sp, #4]
  LCD_command(ST7735_CASET); // Column
     d20:	202a      	movs	r0, #42	; 0x2a
     d22:	4d08      	ldr	r5, [pc, #32]	; (d44 <LCD_setAddr+0x30>)
     d24:	47a8      	blx	r5
  LCD_data16(x0);
     d26:	0020      	movs	r0, r4
     d28:	4c07      	ldr	r4, [pc, #28]	; (d48 <LCD_setAddr+0x34>)
     d2a:	47a0      	blx	r4
	LCD_data16(x1);
     d2c:	0038      	movs	r0, r7
     d2e:	47a0      	blx	r4
	LCD_command(ST7735_RASET); // Page
     d30:	202b      	movs	r0, #43	; 0x2b
     d32:	47a8      	blx	r5
	LCD_data16(y0);
     d34:	0030      	movs	r0, r6
     d36:	47a0      	blx	r4
	LCD_data16(y1);
     d38:	9801      	ldr	r0, [sp, #4]
     d3a:	47a0      	blx	r4
	LCD_command(ST7735_RAMWR); // Into RAM
     d3c:	202c      	movs	r0, #44	; 0x2c
     d3e:	47a8      	blx	r5
}
     d40:	b003      	add	sp, #12
     d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d44:	00000a71 	.word	0x00000a71
     d48:	00000af1 	.word	0x00000af1

00000d4c <LCD_clearScreen>:

void LCD_clearScreen(unsigned short color) {
     d4c:	b570      	push	{r4, r5, r6, lr}
     d4e:	0006      	movs	r6, r0
  int i;
  LCD_setAddr(0,0,_GRAMWIDTH,_GRAMHEIGH);
     d50:	23a0      	movs	r3, #160	; 0xa0
     d52:	2280      	movs	r2, #128	; 0x80
     d54:	2100      	movs	r1, #0
     d56:	2000      	movs	r0, #0
     d58:	4c05      	ldr	r4, [pc, #20]	; (d70 <LCD_clearScreen+0x24>)
     d5a:	47a0      	blx	r4
     d5c:	24a0      	movs	r4, #160	; 0xa0
     d5e:	01e4      	lsls	r4, r4, #7
	for (i = 0;i < _GRAMSIZE; i++){
		LCD_data16(color);
     d60:	4d04      	ldr	r5, [pc, #16]	; (d74 <LCD_clearScreen+0x28>)
     d62:	0030      	movs	r0, r6
     d64:	47a8      	blx	r5
     d66:	3c01      	subs	r4, #1
	for (i = 0;i < _GRAMSIZE; i++){
     d68:	2c00      	cmp	r4, #0
     d6a:	d1fa      	bne.n	d62 <LCD_clearScreen+0x16>
	}
     d6c:	bd70      	pop	{r4, r5, r6, pc}
     d6e:	46c0      	nop			; (mov r8, r8)
     d70:	00000d15 	.word	0x00000d15
     d74:	00000af1 	.word	0x00000af1

00000d78 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     d78:	4b0c      	ldr	r3, [pc, #48]	; (dac <cpu_irq_enter_critical+0x34>)
     d7a:	681b      	ldr	r3, [r3, #0]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d106      	bne.n	d8e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     d80:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     d84:	2b00      	cmp	r3, #0
     d86:	d007      	beq.n	d98 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     d88:	2200      	movs	r2, #0
     d8a:	4b09      	ldr	r3, [pc, #36]	; (db0 <cpu_irq_enter_critical+0x38>)
     d8c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     d8e:	4a07      	ldr	r2, [pc, #28]	; (dac <cpu_irq_enter_critical+0x34>)
     d90:	6813      	ldr	r3, [r2, #0]
     d92:	3301      	adds	r3, #1
     d94:	6013      	str	r3, [r2, #0]
}
     d96:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     d98:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     d9a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     d9e:	2200      	movs	r2, #0
     da0:	4b04      	ldr	r3, [pc, #16]	; (db4 <cpu_irq_enter_critical+0x3c>)
     da2:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     da4:	3201      	adds	r2, #1
     da6:	4b02      	ldr	r3, [pc, #8]	; (db0 <cpu_irq_enter_critical+0x38>)
     da8:	701a      	strb	r2, [r3, #0]
     daa:	e7f0      	b.n	d8e <cpu_irq_enter_critical+0x16>
     dac:	2000002c 	.word	0x2000002c
     db0:	20000030 	.word	0x20000030
     db4:	20000008 	.word	0x20000008

00000db8 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     db8:	4b08      	ldr	r3, [pc, #32]	; (ddc <cpu_irq_leave_critical+0x24>)
     dba:	681a      	ldr	r2, [r3, #0]
     dbc:	3a01      	subs	r2, #1
     dbe:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     dc0:	681b      	ldr	r3, [r3, #0]
     dc2:	2b00      	cmp	r3, #0
     dc4:	d109      	bne.n	dda <cpu_irq_leave_critical+0x22>
     dc6:	4b06      	ldr	r3, [pc, #24]	; (de0 <cpu_irq_leave_critical+0x28>)
     dc8:	781b      	ldrb	r3, [r3, #0]
     dca:	2b00      	cmp	r3, #0
     dcc:	d005      	beq.n	dda <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     dce:	2201      	movs	r2, #1
     dd0:	4b04      	ldr	r3, [pc, #16]	; (de4 <cpu_irq_leave_critical+0x2c>)
     dd2:	701a      	strb	r2, [r3, #0]
     dd4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     dd8:	b662      	cpsie	i
	}
}
     dda:	4770      	bx	lr
     ddc:	2000002c 	.word	0x2000002c
     de0:	20000030 	.word	0x20000030
     de4:	20000008 	.word	0x20000008

00000de8 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     de8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dea:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     dec:	ac01      	add	r4, sp, #4
     dee:	2501      	movs	r5, #1
     df0:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     df2:	2700      	movs	r7, #0
     df4:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     df6:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     df8:	0021      	movs	r1, r4
     dfa:	203e      	movs	r0, #62	; 0x3e
     dfc:	4e06      	ldr	r6, [pc, #24]	; (e18 <system_board_init+0x30>)
     dfe:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     e00:	2280      	movs	r2, #128	; 0x80
     e02:	05d2      	lsls	r2, r2, #23
     e04:	4b05      	ldr	r3, [pc, #20]	; (e1c <system_board_init+0x34>)
     e06:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     e08:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     e0a:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     e0c:	0021      	movs	r1, r4
     e0e:	200f      	movs	r0, #15
     e10:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     e12:	b003      	add	sp, #12
     e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e16:	46c0      	nop			; (mov r8, r8)
     e18:	00000e21 	.word	0x00000e21
     e1c:	41004480 	.word	0x41004480

00000e20 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e20:	b500      	push	{lr}
     e22:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e24:	ab01      	add	r3, sp, #4
     e26:	2280      	movs	r2, #128	; 0x80
     e28:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e2a:	780a      	ldrb	r2, [r1, #0]
     e2c:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e2e:	784a      	ldrb	r2, [r1, #1]
     e30:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e32:	788a      	ldrb	r2, [r1, #2]
     e34:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e36:	0019      	movs	r1, r3
     e38:	4b01      	ldr	r3, [pc, #4]	; (e40 <port_pin_set_config+0x20>)
     e3a:	4798      	blx	r3
}
     e3c:	b003      	add	sp, #12
     e3e:	bd00      	pop	{pc}
     e40:	00001581 	.word	0x00001581

00000e44 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     e44:	b510      	push	{r4, lr}
	switch (clock_source) {
     e46:	2808      	cmp	r0, #8
     e48:	d803      	bhi.n	e52 <system_clock_source_get_hz+0xe>
     e4a:	0080      	lsls	r0, r0, #2
     e4c:	4b1c      	ldr	r3, [pc, #112]	; (ec0 <system_clock_source_get_hz+0x7c>)
     e4e:	581b      	ldr	r3, [r3, r0]
     e50:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     e52:	2000      	movs	r0, #0
     e54:	e032      	b.n	ebc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
     e56:	4b1b      	ldr	r3, [pc, #108]	; (ec4 <system_clock_source_get_hz+0x80>)
     e58:	6918      	ldr	r0, [r3, #16]
     e5a:	e02f      	b.n	ebc <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     e5c:	4b1a      	ldr	r3, [pc, #104]	; (ec8 <system_clock_source_get_hz+0x84>)
     e5e:	6a1b      	ldr	r3, [r3, #32]
     e60:	059b      	lsls	r3, r3, #22
     e62:	0f9b      	lsrs	r3, r3, #30
     e64:	4819      	ldr	r0, [pc, #100]	; (ecc <system_clock_source_get_hz+0x88>)
     e66:	40d8      	lsrs	r0, r3
     e68:	e028      	b.n	ebc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
     e6a:	4b16      	ldr	r3, [pc, #88]	; (ec4 <system_clock_source_get_hz+0x80>)
     e6c:	6958      	ldr	r0, [r3, #20]
     e6e:	e025      	b.n	ebc <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e70:	4b14      	ldr	r3, [pc, #80]	; (ec4 <system_clock_source_get_hz+0x80>)
     e72:	681b      	ldr	r3, [r3, #0]
			return 0;
     e74:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     e76:	079b      	lsls	r3, r3, #30
     e78:	d520      	bpl.n	ebc <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     e7a:	4913      	ldr	r1, [pc, #76]	; (ec8 <system_clock_source_get_hz+0x84>)
     e7c:	2210      	movs	r2, #16
     e7e:	68cb      	ldr	r3, [r1, #12]
     e80:	421a      	tst	r2, r3
     e82:	d0fc      	beq.n	e7e <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
     e84:	4b0f      	ldr	r3, [pc, #60]	; (ec4 <system_clock_source_get_hz+0x80>)
     e86:	681a      	ldr	r2, [r3, #0]
     e88:	2324      	movs	r3, #36	; 0x24
     e8a:	4013      	ands	r3, r2
     e8c:	2b04      	cmp	r3, #4
     e8e:	d001      	beq.n	e94 <system_clock_source_get_hz+0x50>
			return 48000000UL;
     e90:	480f      	ldr	r0, [pc, #60]	; (ed0 <system_clock_source_get_hz+0x8c>)
     e92:	e013      	b.n	ebc <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     e94:	2000      	movs	r0, #0
     e96:	4b0f      	ldr	r3, [pc, #60]	; (ed4 <system_clock_source_get_hz+0x90>)
     e98:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     e9a:	4b0a      	ldr	r3, [pc, #40]	; (ec4 <system_clock_source_get_hz+0x80>)
     e9c:	689b      	ldr	r3, [r3, #8]
     e9e:	041b      	lsls	r3, r3, #16
     ea0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     ea2:	4358      	muls	r0, r3
     ea4:	e00a      	b.n	ebc <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     ea6:	2350      	movs	r3, #80	; 0x50
     ea8:	4a07      	ldr	r2, [pc, #28]	; (ec8 <system_clock_source_get_hz+0x84>)
     eaa:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     eac:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     eae:	075b      	lsls	r3, r3, #29
     eb0:	d504      	bpl.n	ebc <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
     eb2:	4b04      	ldr	r3, [pc, #16]	; (ec4 <system_clock_source_get_hz+0x80>)
     eb4:	68d8      	ldr	r0, [r3, #12]
     eb6:	e001      	b.n	ebc <system_clock_source_get_hz+0x78>
		return 32768UL;
     eb8:	2080      	movs	r0, #128	; 0x80
     eba:	0200      	lsls	r0, r0, #8
	}
}
     ebc:	bd10      	pop	{r4, pc}
     ebe:	46c0      	nop			; (mov r8, r8)
     ec0:	00001914 	.word	0x00001914
     ec4:	20000034 	.word	0x20000034
     ec8:	40000800 	.word	0x40000800
     ecc:	007a1200 	.word	0x007a1200
     ed0:	02dc6c00 	.word	0x02dc6c00
     ed4:	000014a5 	.word	0x000014a5

00000ed8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     ed8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     eda:	490c      	ldr	r1, [pc, #48]	; (f0c <system_clock_source_osc8m_set_config+0x34>)
     edc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     ede:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     ee0:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     ee2:	7840      	ldrb	r0, [r0, #1]
     ee4:	2201      	movs	r2, #1
     ee6:	4010      	ands	r0, r2
     ee8:	0180      	lsls	r0, r0, #6
     eea:	2640      	movs	r6, #64	; 0x40
     eec:	43b3      	bics	r3, r6
     eee:	4303      	orrs	r3, r0
     ef0:	402a      	ands	r2, r5
     ef2:	01d2      	lsls	r2, r2, #7
     ef4:	2080      	movs	r0, #128	; 0x80
     ef6:	4383      	bics	r3, r0
     ef8:	4313      	orrs	r3, r2
     efa:	2203      	movs	r2, #3
     efc:	4022      	ands	r2, r4
     efe:	0212      	lsls	r2, r2, #8
     f00:	4803      	ldr	r0, [pc, #12]	; (f10 <system_clock_source_osc8m_set_config+0x38>)
     f02:	4003      	ands	r3, r0
     f04:	4313      	orrs	r3, r2
     f06:	620b      	str	r3, [r1, #32]
}
     f08:	bd70      	pop	{r4, r5, r6, pc}
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	40000800 	.word	0x40000800
     f10:	fffffcff 	.word	0xfffffcff

00000f14 <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
     f14:	b5f0      	push	{r4, r5, r6, r7, lr}
     f16:	46de      	mov	lr, fp
     f18:	4657      	mov	r7, sl
     f1a:	464e      	mov	r6, r9
     f1c:	4645      	mov	r5, r8
     f1e:	b5e0      	push	{r5, r6, r7, lr}
     f20:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
     f22:	4b26      	ldr	r3, [pc, #152]	; (fbc <system_clock_source_xosc32k_set_config+0xa8>)
     f24:	469b      	mov	fp, r3
     f26:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
     f28:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
     f2a:	7800      	ldrb	r0, [r0, #0]
     f2c:	4242      	negs	r2, r0
     f2e:	4142      	adcs	r2, r0
     f30:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
     f32:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
     f34:	78ca      	ldrb	r2, [r1, #3]
     f36:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
     f38:	790a      	ldrb	r2, [r1, #4]
     f3a:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
     f3c:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
     f3e:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
     f40:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
     f42:	688a      	ldr	r2, [r1, #8]
     f44:	491e      	ldr	r1, [pc, #120]	; (fc0 <system_clock_source_xosc32k_set_config+0xac>)
     f46:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
     f48:	2101      	movs	r1, #1
     f4a:	464a      	mov	r2, r9
     f4c:	0092      	lsls	r2, r2, #2
     f4e:	4691      	mov	r9, r2
     f50:	2204      	movs	r2, #4
     f52:	4393      	bics	r3, r2
     f54:	464a      	mov	r2, r9
     f56:	4313      	orrs	r3, r2
     f58:	4642      	mov	r2, r8
     f5a:	400a      	ands	r2, r1
     f5c:	00d2      	lsls	r2, r2, #3
     f5e:	4690      	mov	r8, r2
     f60:	2208      	movs	r2, #8
     f62:	4393      	bics	r3, r2
     f64:	4642      	mov	r2, r8
     f66:	4313      	orrs	r3, r2
     f68:	4662      	mov	r2, ip
     f6a:	400a      	ands	r2, r1
     f6c:	0112      	lsls	r2, r2, #4
     f6e:	4694      	mov	ip, r2
     f70:	2210      	movs	r2, #16
     f72:	4393      	bics	r3, r2
     f74:	4662      	mov	r2, ip
     f76:	4313      	orrs	r3, r2
     f78:	4008      	ands	r0, r1
     f7a:	0140      	lsls	r0, r0, #5
     f7c:	2220      	movs	r2, #32
     f7e:	4393      	bics	r3, r2
     f80:	4303      	orrs	r3, r0
     f82:	400f      	ands	r7, r1
     f84:	01bf      	lsls	r7, r7, #6
     f86:	2040      	movs	r0, #64	; 0x40
     f88:	4383      	bics	r3, r0
     f8a:	433b      	orrs	r3, r7
     f8c:	400e      	ands	r6, r1
     f8e:	01f6      	lsls	r6, r6, #7
     f90:	3040      	adds	r0, #64	; 0x40
     f92:	4383      	bics	r3, r0
     f94:	4333      	orrs	r3, r6
     f96:	3879      	subs	r0, #121	; 0x79
     f98:	4005      	ands	r5, r0
     f9a:	022d      	lsls	r5, r5, #8
     f9c:	4809      	ldr	r0, [pc, #36]	; (fc4 <system_clock_source_xosc32k_set_config+0xb0>)
     f9e:	4003      	ands	r3, r0
     fa0:	432b      	orrs	r3, r5
     fa2:	4021      	ands	r1, r4
     fa4:	0309      	lsls	r1, r1, #12
     fa6:	4808      	ldr	r0, [pc, #32]	; (fc8 <system_clock_source_xosc32k_set_config+0xb4>)
     fa8:	4003      	ands	r3, r0
     faa:	430b      	orrs	r3, r1
     fac:	465a      	mov	r2, fp
     fae:	8293      	strh	r3, [r2, #20]
}
     fb0:	bc3c      	pop	{r2, r3, r4, r5}
     fb2:	4690      	mov	r8, r2
     fb4:	4699      	mov	r9, r3
     fb6:	46a2      	mov	sl, r4
     fb8:	46ab      	mov	fp, r5
     fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
     fbc:	40000800 	.word	0x40000800
     fc0:	20000034 	.word	0x20000034
     fc4:	fffff8ff 	.word	0xfffff8ff
     fc8:	ffffefff 	.word	0xffffefff

00000fcc <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     fcc:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     fce:	7a03      	ldrb	r3, [r0, #8]
     fd0:	069b      	lsls	r3, r3, #26
     fd2:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
     fd4:	8942      	ldrh	r2, [r0, #10]
     fd6:	0592      	lsls	r2, r2, #22
     fd8:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
     fda:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
     fdc:	4918      	ldr	r1, [pc, #96]	; (1040 <system_clock_source_dfll_set_config+0x74>)
     fde:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     fe0:	7983      	ldrb	r3, [r0, #6]
     fe2:	79c2      	ldrb	r2, [r0, #7]
     fe4:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     fe6:	8842      	ldrh	r2, [r0, #2]
     fe8:	8884      	ldrh	r4, [r0, #4]
     fea:	4322      	orrs	r2, r4
     fec:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     fee:	7842      	ldrb	r2, [r0, #1]
     ff0:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
     ff2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
     ff4:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     ff6:	7803      	ldrb	r3, [r0, #0]
     ff8:	2b04      	cmp	r3, #4
     ffa:	d011      	beq.n	1020 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
     ffc:	2b20      	cmp	r3, #32
     ffe:	d10e      	bne.n	101e <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1000:	7b03      	ldrb	r3, [r0, #12]
    1002:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1004:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1006:	4313      	orrs	r3, r2
    1008:	89c2      	ldrh	r2, [r0, #14]
    100a:	0412      	lsls	r2, r2, #16
    100c:	490d      	ldr	r1, [pc, #52]	; (1044 <system_clock_source_dfll_set_config+0x78>)
    100e:	400a      	ands	r2, r1
    1010:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1012:	4a0b      	ldr	r2, [pc, #44]	; (1040 <system_clock_source_dfll_set_config+0x74>)
    1014:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    1016:	6811      	ldr	r1, [r2, #0]
    1018:	4b0b      	ldr	r3, [pc, #44]	; (1048 <system_clock_source_dfll_set_config+0x7c>)
    101a:	430b      	orrs	r3, r1
    101c:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    101e:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1020:	7b03      	ldrb	r3, [r0, #12]
    1022:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    1024:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    1026:	4313      	orrs	r3, r2
    1028:	89c2      	ldrh	r2, [r0, #14]
    102a:	0412      	lsls	r2, r2, #16
    102c:	4905      	ldr	r1, [pc, #20]	; (1044 <system_clock_source_dfll_set_config+0x78>)
    102e:	400a      	ands	r2, r1
    1030:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    1032:	4a03      	ldr	r2, [pc, #12]	; (1040 <system_clock_source_dfll_set_config+0x74>)
    1034:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    1036:	6813      	ldr	r3, [r2, #0]
    1038:	2104      	movs	r1, #4
    103a:	430b      	orrs	r3, r1
    103c:	6013      	str	r3, [r2, #0]
    103e:	e7ee      	b.n	101e <system_clock_source_dfll_set_config+0x52>
    1040:	20000034 	.word	0x20000034
    1044:	03ff0000 	.word	0x03ff0000
    1048:	00000424 	.word	0x00000424

0000104c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    104c:	2808      	cmp	r0, #8
    104e:	d803      	bhi.n	1058 <system_clock_source_enable+0xc>
    1050:	0080      	lsls	r0, r0, #2
    1052:	4b25      	ldr	r3, [pc, #148]	; (10e8 <system_clock_source_enable+0x9c>)
    1054:	581b      	ldr	r3, [r3, r0]
    1056:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1058:	2017      	movs	r0, #23
    105a:	e044      	b.n	10e6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    105c:	4a23      	ldr	r2, [pc, #140]	; (10ec <system_clock_source_enable+0xa0>)
    105e:	6a13      	ldr	r3, [r2, #32]
    1060:	2102      	movs	r1, #2
    1062:	430b      	orrs	r3, r1
    1064:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    1066:	2000      	movs	r0, #0
    1068:	e03d      	b.n	10e6 <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    106a:	4a20      	ldr	r2, [pc, #128]	; (10ec <system_clock_source_enable+0xa0>)
    106c:	6993      	ldr	r3, [r2, #24]
    106e:	2102      	movs	r1, #2
    1070:	430b      	orrs	r3, r1
    1072:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1074:	2000      	movs	r0, #0
		break;
    1076:	e036      	b.n	10e6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1078:	4a1c      	ldr	r2, [pc, #112]	; (10ec <system_clock_source_enable+0xa0>)
    107a:	8a13      	ldrh	r3, [r2, #16]
    107c:	2102      	movs	r1, #2
    107e:	430b      	orrs	r3, r1
    1080:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1082:	2000      	movs	r0, #0
		break;
    1084:	e02f      	b.n	10e6 <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    1086:	4a19      	ldr	r2, [pc, #100]	; (10ec <system_clock_source_enable+0xa0>)
    1088:	8a93      	ldrh	r3, [r2, #20]
    108a:	2102      	movs	r1, #2
    108c:	430b      	orrs	r3, r1
    108e:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1090:	2000      	movs	r0, #0
		break;
    1092:	e028      	b.n	10e6 <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1094:	4916      	ldr	r1, [pc, #88]	; (10f0 <system_clock_source_enable+0xa4>)
    1096:	680b      	ldr	r3, [r1, #0]
    1098:	2202      	movs	r2, #2
    109a:	4313      	orrs	r3, r2
    109c:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    109e:	4b13      	ldr	r3, [pc, #76]	; (10ec <system_clock_source_enable+0xa0>)
    10a0:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10a2:	0019      	movs	r1, r3
    10a4:	320e      	adds	r2, #14
    10a6:	68cb      	ldr	r3, [r1, #12]
    10a8:	421a      	tst	r2, r3
    10aa:	d0fc      	beq.n	10a6 <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    10ac:	4a10      	ldr	r2, [pc, #64]	; (10f0 <system_clock_source_enable+0xa4>)
    10ae:	6891      	ldr	r1, [r2, #8]
    10b0:	4b0e      	ldr	r3, [pc, #56]	; (10ec <system_clock_source_enable+0xa0>)
    10b2:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    10b4:	6852      	ldr	r2, [r2, #4]
    10b6:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    10b8:	2200      	movs	r2, #0
    10ba:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10bc:	0019      	movs	r1, r3
    10be:	3210      	adds	r2, #16
    10c0:	68cb      	ldr	r3, [r1, #12]
    10c2:	421a      	tst	r2, r3
    10c4:	d0fc      	beq.n	10c0 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    10c6:	4b0a      	ldr	r3, [pc, #40]	; (10f0 <system_clock_source_enable+0xa4>)
    10c8:	681b      	ldr	r3, [r3, #0]
    10ca:	b29b      	uxth	r3, r3
    10cc:	4a07      	ldr	r2, [pc, #28]	; (10ec <system_clock_source_enable+0xa0>)
    10ce:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    10d0:	2000      	movs	r0, #0
    10d2:	e008      	b.n	10e6 <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    10d4:	4905      	ldr	r1, [pc, #20]	; (10ec <system_clock_source_enable+0xa0>)
    10d6:	2244      	movs	r2, #68	; 0x44
    10d8:	5c8b      	ldrb	r3, [r1, r2]
    10da:	2002      	movs	r0, #2
    10dc:	4303      	orrs	r3, r0
    10de:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    10e0:	2000      	movs	r0, #0
		break;
    10e2:	e000      	b.n	10e6 <system_clock_source_enable+0x9a>
		return STATUS_OK;
    10e4:	2000      	movs	r0, #0
}
    10e6:	4770      	bx	lr
    10e8:	00001938 	.word	0x00001938
    10ec:	40000800 	.word	0x40000800
    10f0:	20000034 	.word	0x20000034

000010f4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    10f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    10f6:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    10f8:	22c2      	movs	r2, #194	; 0xc2
    10fa:	00d2      	lsls	r2, r2, #3
    10fc:	4b47      	ldr	r3, [pc, #284]	; (121c <system_clock_init+0x128>)
    10fe:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1100:	4947      	ldr	r1, [pc, #284]	; (1220 <system_clock_init+0x12c>)
    1102:	684b      	ldr	r3, [r1, #4]
    1104:	221e      	movs	r2, #30
    1106:	4393      	bics	r3, r2
    1108:	3a1c      	subs	r2, #28
    110a:	4313      	orrs	r3, r2
    110c:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    110e:	ab01      	add	r3, sp, #4
    1110:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1112:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    1114:	4d43      	ldr	r5, [pc, #268]	; (1224 <system_clock_init+0x130>)
    1116:	b2e0      	uxtb	r0, r4
    1118:	a901      	add	r1, sp, #4
    111a:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    111c:	3401      	adds	r4, #1
    111e:	2c25      	cmp	r4, #37	; 0x25
    1120:	d1f9      	bne.n	1116 <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    1122:	a80a      	add	r0, sp, #40	; 0x28
    1124:	2300      	movs	r3, #0
    1126:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1128:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    112a:	2280      	movs	r2, #128	; 0x80
    112c:	0212      	lsls	r2, r2, #8
    112e:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1130:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    1132:	2201      	movs	r2, #1
    1134:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    1136:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1138:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    113a:	3205      	adds	r2, #5
    113c:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    113e:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1140:	4b39      	ldr	r3, [pc, #228]	; (1228 <system_clock_init+0x134>)
    1142:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    1144:	2005      	movs	r0, #5
    1146:	4b39      	ldr	r3, [pc, #228]	; (122c <system_clock_init+0x138>)
    1148:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    114a:	4934      	ldr	r1, [pc, #208]	; (121c <system_clock_init+0x128>)
    114c:	2202      	movs	r2, #2
    114e:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1150:	421a      	tst	r2, r3
    1152:	d0fc      	beq.n	114e <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    1154:	4a31      	ldr	r2, [pc, #196]	; (121c <system_clock_init+0x128>)
    1156:	8a93      	ldrh	r3, [r2, #20]
    1158:	2180      	movs	r1, #128	; 0x80
    115a:	430b      	orrs	r3, r1
    115c:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    115e:	ab05      	add	r3, sp, #20
    1160:	2100      	movs	r1, #0
    1162:	2200      	movs	r2, #0
    1164:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    1166:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1168:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    116a:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    116c:	313f      	adds	r1, #63	; 0x3f
    116e:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1170:	393b      	subs	r1, #59	; 0x3b
    1172:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    1174:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    1176:	4b2e      	ldr	r3, [pc, #184]	; (1230 <system_clock_init+0x13c>)
    1178:	681b      	ldr	r3, [r3, #0]
    117a:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    117c:	2b3f      	cmp	r3, #63	; 0x3f
    117e:	d04b      	beq.n	1218 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1180:	a805      	add	r0, sp, #20
    1182:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    1184:	23b7      	movs	r3, #183	; 0xb7
    1186:	00db      	lsls	r3, r3, #3
    1188:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    118a:	2307      	movs	r3, #7
    118c:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    118e:	3338      	adds	r3, #56	; 0x38
    1190:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    1192:	4b28      	ldr	r3, [pc, #160]	; (1234 <system_clock_init+0x140>)
    1194:	4798      	blx	r3
	config->run_in_standby  = false;
    1196:	a804      	add	r0, sp, #16
    1198:	2500      	movs	r5, #0
    119a:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    119c:	2601      	movs	r6, #1
    119e:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    11a0:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    11a2:	4b25      	ldr	r3, [pc, #148]	; (1238 <system_clock_init+0x144>)
    11a4:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    11a6:	2006      	movs	r0, #6
    11a8:	4f20      	ldr	r7, [pc, #128]	; (122c <system_clock_init+0x138>)
    11aa:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    11ac:	4b23      	ldr	r3, [pc, #140]	; (123c <system_clock_init+0x148>)
    11ae:	4798      	blx	r3
	config->division_factor    = 1;
    11b0:	ac01      	add	r4, sp, #4
    11b2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    11b4:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    11b6:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    11b8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    11ba:	2305      	movs	r3, #5
    11bc:	7023      	strb	r3, [r4, #0]
    11be:	0021      	movs	r1, r4
    11c0:	2001      	movs	r0, #1
    11c2:	4b1f      	ldr	r3, [pc, #124]	; (1240 <system_clock_init+0x14c>)
    11c4:	4798      	blx	r3
    11c6:	2001      	movs	r0, #1
    11c8:	4b1e      	ldr	r3, [pc, #120]	; (1244 <system_clock_init+0x150>)
    11ca:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    11cc:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    11ce:	0021      	movs	r1, r4
    11d0:	2000      	movs	r0, #0
    11d2:	4b14      	ldr	r3, [pc, #80]	; (1224 <system_clock_init+0x130>)
    11d4:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    11d6:	2000      	movs	r0, #0
    11d8:	4b1b      	ldr	r3, [pc, #108]	; (1248 <system_clock_init+0x154>)
    11da:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    11dc:	2007      	movs	r0, #7
    11de:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    11e0:	490e      	ldr	r1, [pc, #56]	; (121c <system_clock_init+0x128>)
    11e2:	22d0      	movs	r2, #208	; 0xd0
    11e4:	68cb      	ldr	r3, [r1, #12]
    11e6:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    11e8:	2bd0      	cmp	r3, #208	; 0xd0
    11ea:	d1fb      	bne.n	11e4 <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    11ec:	4a17      	ldr	r2, [pc, #92]	; (124c <system_clock_init+0x158>)
    11ee:	2300      	movs	r3, #0
    11f0:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    11f2:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    11f4:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    11f6:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    11f8:	a901      	add	r1, sp, #4
    11fa:	2201      	movs	r2, #1
    11fc:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    11fe:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    1200:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    1202:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1204:	3307      	adds	r3, #7
    1206:	700b      	strb	r3, [r1, #0]
    1208:	2000      	movs	r0, #0
    120a:	4b0d      	ldr	r3, [pc, #52]	; (1240 <system_clock_init+0x14c>)
    120c:	4798      	blx	r3
    120e:	2000      	movs	r0, #0
    1210:	4b0c      	ldr	r3, [pc, #48]	; (1244 <system_clock_init+0x150>)
    1212:	4798      	blx	r3
#endif
}
    1214:	b00f      	add	sp, #60	; 0x3c
    1216:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1218:	3b20      	subs	r3, #32
    121a:	e7b1      	b.n	1180 <system_clock_init+0x8c>
    121c:	40000800 	.word	0x40000800
    1220:	41004000 	.word	0x41004000
    1224:	00001489 	.word	0x00001489
    1228:	00000f15 	.word	0x00000f15
    122c:	0000104d 	.word	0x0000104d
    1230:	00806024 	.word	0x00806024
    1234:	00000fcd 	.word	0x00000fcd
    1238:	00000ed9 	.word	0x00000ed9
    123c:	00001251 	.word	0x00001251
    1240:	00001275 	.word	0x00001275
    1244:	0000132d 	.word	0x0000132d
    1248:	000013fd 	.word	0x000013fd
    124c:	40000400 	.word	0x40000400

00001250 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1250:	4a06      	ldr	r2, [pc, #24]	; (126c <system_gclk_init+0x1c>)
    1252:	6993      	ldr	r3, [r2, #24]
    1254:	2108      	movs	r1, #8
    1256:	430b      	orrs	r3, r1
    1258:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    125a:	2201      	movs	r2, #1
    125c:	4b04      	ldr	r3, [pc, #16]	; (1270 <system_gclk_init+0x20>)
    125e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1260:	0019      	movs	r1, r3
    1262:	780b      	ldrb	r3, [r1, #0]
    1264:	4213      	tst	r3, r2
    1266:	d1fc      	bne.n	1262 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1268:	4770      	bx	lr
    126a:	46c0      	nop			; (mov r8, r8)
    126c:	40000400 	.word	0x40000400
    1270:	40000c00 	.word	0x40000c00

00001274 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1274:	b570      	push	{r4, r5, r6, lr}
    1276:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1278:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    127a:	780d      	ldrb	r5, [r1, #0]
    127c:	022d      	lsls	r5, r5, #8
    127e:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1280:	784b      	ldrb	r3, [r1, #1]
    1282:	2b00      	cmp	r3, #0
    1284:	d002      	beq.n	128c <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1286:	2380      	movs	r3, #128	; 0x80
    1288:	02db      	lsls	r3, r3, #11
    128a:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    128c:	7a4b      	ldrb	r3, [r1, #9]
    128e:	2b00      	cmp	r3, #0
    1290:	d002      	beq.n	1298 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    1292:	2380      	movs	r3, #128	; 0x80
    1294:	031b      	lsls	r3, r3, #12
    1296:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1298:	6848      	ldr	r0, [r1, #4]
    129a:	2801      	cmp	r0, #1
    129c:	d910      	bls.n	12c0 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    129e:	1e43      	subs	r3, r0, #1
    12a0:	4218      	tst	r0, r3
    12a2:	d134      	bne.n	130e <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    12a4:	2802      	cmp	r0, #2
    12a6:	d930      	bls.n	130a <system_gclk_gen_set_config+0x96>
    12a8:	2302      	movs	r3, #2
    12aa:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    12ac:	3201      	adds	r2, #1
						mask <<= 1) {
    12ae:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    12b0:	4298      	cmp	r0, r3
    12b2:	d8fb      	bhi.n	12ac <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    12b4:	0212      	lsls	r2, r2, #8
    12b6:	4332      	orrs	r2, r6
    12b8:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    12ba:	2380      	movs	r3, #128	; 0x80
    12bc:	035b      	lsls	r3, r3, #13
    12be:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    12c0:	7a0b      	ldrb	r3, [r1, #8]
    12c2:	2b00      	cmp	r3, #0
    12c4:	d002      	beq.n	12cc <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    12c6:	2380      	movs	r3, #128	; 0x80
    12c8:	039b      	lsls	r3, r3, #14
    12ca:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12cc:	4a13      	ldr	r2, [pc, #76]	; (131c <system_gclk_gen_set_config+0xa8>)
    12ce:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    12d0:	b25b      	sxtb	r3, r3
    12d2:	2b00      	cmp	r3, #0
    12d4:	dbfb      	blt.n	12ce <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    12d6:	4b12      	ldr	r3, [pc, #72]	; (1320 <system_gclk_gen_set_config+0xac>)
    12d8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12da:	4b12      	ldr	r3, [pc, #72]	; (1324 <system_gclk_gen_set_config+0xb0>)
    12dc:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12de:	4a0f      	ldr	r2, [pc, #60]	; (131c <system_gclk_gen_set_config+0xa8>)
    12e0:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    12e2:	b25b      	sxtb	r3, r3
    12e4:	2b00      	cmp	r3, #0
    12e6:	dbfb      	blt.n	12e0 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    12e8:	4b0c      	ldr	r3, [pc, #48]	; (131c <system_gclk_gen_set_config+0xa8>)
    12ea:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12ec:	001a      	movs	r2, r3
    12ee:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    12f0:	b25b      	sxtb	r3, r3
    12f2:	2b00      	cmp	r3, #0
    12f4:	dbfb      	blt.n	12ee <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    12f6:	4a09      	ldr	r2, [pc, #36]	; (131c <system_gclk_gen_set_config+0xa8>)
    12f8:	6853      	ldr	r3, [r2, #4]
    12fa:	2180      	movs	r1, #128	; 0x80
    12fc:	0249      	lsls	r1, r1, #9
    12fe:	400b      	ands	r3, r1
    1300:	431d      	orrs	r5, r3
    1302:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1304:	4b08      	ldr	r3, [pc, #32]	; (1328 <system_gclk_gen_set_config+0xb4>)
    1306:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1308:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    130a:	2200      	movs	r2, #0
    130c:	e7d2      	b.n	12b4 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    130e:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1310:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1312:	2380      	movs	r3, #128	; 0x80
    1314:	029b      	lsls	r3, r3, #10
    1316:	431d      	orrs	r5, r3
    1318:	e7d2      	b.n	12c0 <system_gclk_gen_set_config+0x4c>
    131a:	46c0      	nop			; (mov r8, r8)
    131c:	40000c00 	.word	0x40000c00
    1320:	00000d79 	.word	0x00000d79
    1324:	40000c08 	.word	0x40000c08
    1328:	00000db9 	.word	0x00000db9

0000132c <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    132c:	b510      	push	{r4, lr}
    132e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1330:	4a0b      	ldr	r2, [pc, #44]	; (1360 <system_gclk_gen_enable+0x34>)
    1332:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1334:	b25b      	sxtb	r3, r3
    1336:	2b00      	cmp	r3, #0
    1338:	dbfb      	blt.n	1332 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    133a:	4b0a      	ldr	r3, [pc, #40]	; (1364 <system_gclk_gen_enable+0x38>)
    133c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    133e:	4b0a      	ldr	r3, [pc, #40]	; (1368 <system_gclk_gen_enable+0x3c>)
    1340:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1342:	4a07      	ldr	r2, [pc, #28]	; (1360 <system_gclk_gen_enable+0x34>)
    1344:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1346:	b25b      	sxtb	r3, r3
    1348:	2b00      	cmp	r3, #0
    134a:	dbfb      	blt.n	1344 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    134c:	4a04      	ldr	r2, [pc, #16]	; (1360 <system_gclk_gen_enable+0x34>)
    134e:	6851      	ldr	r1, [r2, #4]
    1350:	2380      	movs	r3, #128	; 0x80
    1352:	025b      	lsls	r3, r3, #9
    1354:	430b      	orrs	r3, r1
    1356:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1358:	4b04      	ldr	r3, [pc, #16]	; (136c <system_gclk_gen_enable+0x40>)
    135a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    135c:	bd10      	pop	{r4, pc}
    135e:	46c0      	nop			; (mov r8, r8)
    1360:	40000c00 	.word	0x40000c00
    1364:	00000d79 	.word	0x00000d79
    1368:	40000c04 	.word	0x40000c04
    136c:	00000db9 	.word	0x00000db9

00001370 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1370:	b570      	push	{r4, r5, r6, lr}
    1372:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1374:	4a1a      	ldr	r2, [pc, #104]	; (13e0 <system_gclk_gen_get_hz+0x70>)
    1376:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1378:	b25b      	sxtb	r3, r3
    137a:	2b00      	cmp	r3, #0
    137c:	dbfb      	blt.n	1376 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    137e:	4b19      	ldr	r3, [pc, #100]	; (13e4 <system_gclk_gen_get_hz+0x74>)
    1380:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1382:	4b19      	ldr	r3, [pc, #100]	; (13e8 <system_gclk_gen_get_hz+0x78>)
    1384:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1386:	4a16      	ldr	r2, [pc, #88]	; (13e0 <system_gclk_gen_get_hz+0x70>)
    1388:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    138a:	b25b      	sxtb	r3, r3
    138c:	2b00      	cmp	r3, #0
    138e:	dbfb      	blt.n	1388 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1390:	4e13      	ldr	r6, [pc, #76]	; (13e0 <system_gclk_gen_get_hz+0x70>)
    1392:	6870      	ldr	r0, [r6, #4]
    1394:	04c0      	lsls	r0, r0, #19
    1396:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1398:	4b14      	ldr	r3, [pc, #80]	; (13ec <system_gclk_gen_get_hz+0x7c>)
    139a:	4798      	blx	r3
    139c:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    139e:	4b12      	ldr	r3, [pc, #72]	; (13e8 <system_gclk_gen_get_hz+0x78>)
    13a0:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    13a2:	6876      	ldr	r6, [r6, #4]
    13a4:	02f6      	lsls	r6, r6, #11
    13a6:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13a8:	4b11      	ldr	r3, [pc, #68]	; (13f0 <system_gclk_gen_get_hz+0x80>)
    13aa:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13ac:	4a0c      	ldr	r2, [pc, #48]	; (13e0 <system_gclk_gen_get_hz+0x70>)
    13ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13b0:	b25b      	sxtb	r3, r3
    13b2:	2b00      	cmp	r3, #0
    13b4:	dbfb      	blt.n	13ae <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    13b6:	4b0a      	ldr	r3, [pc, #40]	; (13e0 <system_gclk_gen_get_hz+0x70>)
    13b8:	689c      	ldr	r4, [r3, #8]
    13ba:	0224      	lsls	r4, r4, #8
    13bc:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    13be:	4b0d      	ldr	r3, [pc, #52]	; (13f4 <system_gclk_gen_get_hz+0x84>)
    13c0:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    13c2:	2e00      	cmp	r6, #0
    13c4:	d107      	bne.n	13d6 <system_gclk_gen_get_hz+0x66>
    13c6:	2c01      	cmp	r4, #1
    13c8:	d907      	bls.n	13da <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    13ca:	0021      	movs	r1, r4
    13cc:	0028      	movs	r0, r5
    13ce:	4b0a      	ldr	r3, [pc, #40]	; (13f8 <system_gclk_gen_get_hz+0x88>)
    13d0:	4798      	blx	r3
    13d2:	0005      	movs	r5, r0
    13d4:	e001      	b.n	13da <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    13d6:	3401      	adds	r4, #1
    13d8:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    13da:	0028      	movs	r0, r5
    13dc:	bd70      	pop	{r4, r5, r6, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	40000c00 	.word	0x40000c00
    13e4:	00000d79 	.word	0x00000d79
    13e8:	40000c04 	.word	0x40000c04
    13ec:	00000e45 	.word	0x00000e45
    13f0:	40000c08 	.word	0x40000c08
    13f4:	00000db9 	.word	0x00000db9
    13f8:	0000178d 	.word	0x0000178d

000013fc <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    13fc:	b510      	push	{r4, lr}
    13fe:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1400:	4b06      	ldr	r3, [pc, #24]	; (141c <system_gclk_chan_enable+0x20>)
    1402:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1404:	4b06      	ldr	r3, [pc, #24]	; (1420 <system_gclk_chan_enable+0x24>)
    1406:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1408:	4a06      	ldr	r2, [pc, #24]	; (1424 <system_gclk_chan_enable+0x28>)
    140a:	8853      	ldrh	r3, [r2, #2]
    140c:	2180      	movs	r1, #128	; 0x80
    140e:	01c9      	lsls	r1, r1, #7
    1410:	430b      	orrs	r3, r1
    1412:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1414:	4b04      	ldr	r3, [pc, #16]	; (1428 <system_gclk_chan_enable+0x2c>)
    1416:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1418:	bd10      	pop	{r4, pc}
    141a:	46c0      	nop			; (mov r8, r8)
    141c:	00000d79 	.word	0x00000d79
    1420:	40000c02 	.word	0x40000c02
    1424:	40000c00 	.word	0x40000c00
    1428:	00000db9 	.word	0x00000db9

0000142c <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    142c:	b510      	push	{r4, lr}
    142e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1430:	4b0f      	ldr	r3, [pc, #60]	; (1470 <system_gclk_chan_disable+0x44>)
    1432:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1434:	4b0f      	ldr	r3, [pc, #60]	; (1474 <system_gclk_chan_disable+0x48>)
    1436:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1438:	4a0f      	ldr	r2, [pc, #60]	; (1478 <system_gclk_chan_disable+0x4c>)
    143a:	8853      	ldrh	r3, [r2, #2]
    143c:	051b      	lsls	r3, r3, #20
    143e:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1440:	8853      	ldrh	r3, [r2, #2]
    1442:	490e      	ldr	r1, [pc, #56]	; (147c <system_gclk_chan_disable+0x50>)
    1444:	400b      	ands	r3, r1
    1446:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1448:	8853      	ldrh	r3, [r2, #2]
    144a:	490d      	ldr	r1, [pc, #52]	; (1480 <system_gclk_chan_disable+0x54>)
    144c:	400b      	ands	r3, r1
    144e:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1450:	0011      	movs	r1, r2
    1452:	2280      	movs	r2, #128	; 0x80
    1454:	01d2      	lsls	r2, r2, #7
    1456:	884b      	ldrh	r3, [r1, #2]
    1458:	4213      	tst	r3, r2
    145a:	d1fc      	bne.n	1456 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    145c:	4906      	ldr	r1, [pc, #24]	; (1478 <system_gclk_chan_disable+0x4c>)
    145e:	884a      	ldrh	r2, [r1, #2]
    1460:	0203      	lsls	r3, r0, #8
    1462:	4806      	ldr	r0, [pc, #24]	; (147c <system_gclk_chan_disable+0x50>)
    1464:	4002      	ands	r2, r0
    1466:	4313      	orrs	r3, r2
    1468:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    146a:	4b06      	ldr	r3, [pc, #24]	; (1484 <system_gclk_chan_disable+0x58>)
    146c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    146e:	bd10      	pop	{r4, pc}
    1470:	00000d79 	.word	0x00000d79
    1474:	40000c02 	.word	0x40000c02
    1478:	40000c00 	.word	0x40000c00
    147c:	fffff0ff 	.word	0xfffff0ff
    1480:	ffffbfff 	.word	0xffffbfff
    1484:	00000db9 	.word	0x00000db9

00001488 <system_gclk_chan_set_config>:
{
    1488:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    148a:	780c      	ldrb	r4, [r1, #0]
    148c:	0224      	lsls	r4, r4, #8
    148e:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1490:	4b02      	ldr	r3, [pc, #8]	; (149c <system_gclk_chan_set_config+0x14>)
    1492:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    1494:	b2a4      	uxth	r4, r4
    1496:	4b02      	ldr	r3, [pc, #8]	; (14a0 <system_gclk_chan_set_config+0x18>)
    1498:	805c      	strh	r4, [r3, #2]
}
    149a:	bd10      	pop	{r4, pc}
    149c:	0000142d 	.word	0x0000142d
    14a0:	40000c00 	.word	0x40000c00

000014a4 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    14a4:	b510      	push	{r4, lr}
    14a6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14a8:	4b06      	ldr	r3, [pc, #24]	; (14c4 <system_gclk_chan_get_hz+0x20>)
    14aa:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14ac:	4b06      	ldr	r3, [pc, #24]	; (14c8 <system_gclk_chan_get_hz+0x24>)
    14ae:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    14b0:	4b06      	ldr	r3, [pc, #24]	; (14cc <system_gclk_chan_get_hz+0x28>)
    14b2:	885c      	ldrh	r4, [r3, #2]
    14b4:	0524      	lsls	r4, r4, #20
    14b6:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    14b8:	4b05      	ldr	r3, [pc, #20]	; (14d0 <system_gclk_chan_get_hz+0x2c>)
    14ba:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    14bc:	0020      	movs	r0, r4
    14be:	4b05      	ldr	r3, [pc, #20]	; (14d4 <system_gclk_chan_get_hz+0x30>)
    14c0:	4798      	blx	r3
}
    14c2:	bd10      	pop	{r4, pc}
    14c4:	00000d79 	.word	0x00000d79
    14c8:	40000c02 	.word	0x40000c02
    14cc:	40000c00 	.word	0x40000c00
    14d0:	00000db9 	.word	0x00000db9
    14d4:	00001371 	.word	0x00001371

000014d8 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    14d8:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    14da:	78d3      	ldrb	r3, [r2, #3]
    14dc:	2b00      	cmp	r3, #0
    14de:	d135      	bne.n	154c <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    14e0:	7813      	ldrb	r3, [r2, #0]
    14e2:	2b80      	cmp	r3, #128	; 0x80
    14e4:	d029      	beq.n	153a <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    14e6:	061b      	lsls	r3, r3, #24
    14e8:	2480      	movs	r4, #128	; 0x80
    14ea:	0264      	lsls	r4, r4, #9
    14ec:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    14ee:	7854      	ldrb	r4, [r2, #1]
    14f0:	2502      	movs	r5, #2
    14f2:	43ac      	bics	r4, r5
    14f4:	d106      	bne.n	1504 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    14f6:	7894      	ldrb	r4, [r2, #2]
    14f8:	2c00      	cmp	r4, #0
    14fa:	d120      	bne.n	153e <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    14fc:	2480      	movs	r4, #128	; 0x80
    14fe:	02a4      	lsls	r4, r4, #10
    1500:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1502:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1504:	7854      	ldrb	r4, [r2, #1]
    1506:	3c01      	subs	r4, #1
    1508:	2c01      	cmp	r4, #1
    150a:	d91c      	bls.n	1546 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    150c:	040d      	lsls	r5, r1, #16
    150e:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1510:	24a0      	movs	r4, #160	; 0xa0
    1512:	05e4      	lsls	r4, r4, #23
    1514:	432c      	orrs	r4, r5
    1516:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1518:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    151a:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    151c:	24d0      	movs	r4, #208	; 0xd0
    151e:	0624      	lsls	r4, r4, #24
    1520:	432c      	orrs	r4, r5
    1522:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1524:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1526:	78d4      	ldrb	r4, [r2, #3]
    1528:	2c00      	cmp	r4, #0
    152a:	d122      	bne.n	1572 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    152c:	035b      	lsls	r3, r3, #13
    152e:	d51c      	bpl.n	156a <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1530:	7893      	ldrb	r3, [r2, #2]
    1532:	2b01      	cmp	r3, #1
    1534:	d01e      	beq.n	1574 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1536:	6141      	str	r1, [r0, #20]
    1538:	e017      	b.n	156a <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    153a:	2300      	movs	r3, #0
    153c:	e7d7      	b.n	14ee <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    153e:	24c0      	movs	r4, #192	; 0xc0
    1540:	02e4      	lsls	r4, r4, #11
    1542:	4323      	orrs	r3, r4
    1544:	e7dd      	b.n	1502 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1546:	4c0d      	ldr	r4, [pc, #52]	; (157c <_system_pinmux_config+0xa4>)
    1548:	4023      	ands	r3, r4
    154a:	e7df      	b.n	150c <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    154c:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    154e:	040c      	lsls	r4, r1, #16
    1550:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1552:	23a0      	movs	r3, #160	; 0xa0
    1554:	05db      	lsls	r3, r3, #23
    1556:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1558:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    155a:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    155c:	23d0      	movs	r3, #208	; 0xd0
    155e:	061b      	lsls	r3, r3, #24
    1560:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1562:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1564:	78d3      	ldrb	r3, [r2, #3]
    1566:	2b00      	cmp	r3, #0
    1568:	d103      	bne.n	1572 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    156a:	7853      	ldrb	r3, [r2, #1]
    156c:	3b01      	subs	r3, #1
    156e:	2b01      	cmp	r3, #1
    1570:	d902      	bls.n	1578 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    1572:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1574:	6181      	str	r1, [r0, #24]
    1576:	e7f8      	b.n	156a <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1578:	6081      	str	r1, [r0, #8]
}
    157a:	e7fa      	b.n	1572 <_system_pinmux_config+0x9a>
    157c:	fffbffff 	.word	0xfffbffff

00001580 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1580:	b510      	push	{r4, lr}
    1582:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    1584:	09c1      	lsrs	r1, r0, #7
		return NULL;
    1586:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1588:	2900      	cmp	r1, #0
    158a:	d104      	bne.n	1596 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    158c:	0943      	lsrs	r3, r0, #5
    158e:	01db      	lsls	r3, r3, #7
    1590:	4905      	ldr	r1, [pc, #20]	; (15a8 <system_pinmux_pin_set_config+0x28>)
    1592:	468c      	mov	ip, r1
    1594:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    1596:	241f      	movs	r4, #31
    1598:	4020      	ands	r0, r4
    159a:	2101      	movs	r1, #1
    159c:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    159e:	0018      	movs	r0, r3
    15a0:	4b02      	ldr	r3, [pc, #8]	; (15ac <system_pinmux_pin_set_config+0x2c>)
    15a2:	4798      	blx	r3
}
    15a4:	bd10      	pop	{r4, pc}
    15a6:	46c0      	nop			; (mov r8, r8)
    15a8:	41004400 	.word	0x41004400
    15ac:	000014d9 	.word	0x000014d9

000015b0 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15b0:	4770      	bx	lr
	...

000015b4 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15b4:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15b6:	4b05      	ldr	r3, [pc, #20]	; (15cc <system_init+0x18>)
    15b8:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15ba:	4b05      	ldr	r3, [pc, #20]	; (15d0 <system_init+0x1c>)
    15bc:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15be:	4b05      	ldr	r3, [pc, #20]	; (15d4 <system_init+0x20>)
    15c0:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    15c2:	4b05      	ldr	r3, [pc, #20]	; (15d8 <system_init+0x24>)
    15c4:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <system_init+0x28>)
    15c8:	4798      	blx	r3
}
    15ca:	bd10      	pop	{r4, pc}
    15cc:	000010f5 	.word	0x000010f5
    15d0:	00000de9 	.word	0x00000de9
    15d4:	000015b1 	.word	0x000015b1
    15d8:	0000012d 	.word	0x0000012d
    15dc:	000015b1 	.word	0x000015b1

000015e0 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    15e0:	e7fe      	b.n	15e0 <Dummy_Handler>
	...

000015e4 <Reset_Handler>:
{
    15e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    15e6:	4a2a      	ldr	r2, [pc, #168]	; (1690 <Reset_Handler+0xac>)
    15e8:	4b2a      	ldr	r3, [pc, #168]	; (1694 <Reset_Handler+0xb0>)
    15ea:	429a      	cmp	r2, r3
    15ec:	d011      	beq.n	1612 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    15ee:	001a      	movs	r2, r3
    15f0:	4b29      	ldr	r3, [pc, #164]	; (1698 <Reset_Handler+0xb4>)
    15f2:	429a      	cmp	r2, r3
    15f4:	d20d      	bcs.n	1612 <Reset_Handler+0x2e>
    15f6:	4a29      	ldr	r2, [pc, #164]	; (169c <Reset_Handler+0xb8>)
    15f8:	3303      	adds	r3, #3
    15fa:	1a9b      	subs	r3, r3, r2
    15fc:	089b      	lsrs	r3, r3, #2
    15fe:	3301      	adds	r3, #1
    1600:	009b      	lsls	r3, r3, #2
    1602:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1604:	4823      	ldr	r0, [pc, #140]	; (1694 <Reset_Handler+0xb0>)
    1606:	4922      	ldr	r1, [pc, #136]	; (1690 <Reset_Handler+0xac>)
    1608:	588c      	ldr	r4, [r1, r2]
    160a:	5084      	str	r4, [r0, r2]
    160c:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    160e:	429a      	cmp	r2, r3
    1610:	d1fa      	bne.n	1608 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1612:	4a23      	ldr	r2, [pc, #140]	; (16a0 <Reset_Handler+0xbc>)
    1614:	4b23      	ldr	r3, [pc, #140]	; (16a4 <Reset_Handler+0xc0>)
    1616:	429a      	cmp	r2, r3
    1618:	d20a      	bcs.n	1630 <Reset_Handler+0x4c>
    161a:	43d3      	mvns	r3, r2
    161c:	4921      	ldr	r1, [pc, #132]	; (16a4 <Reset_Handler+0xc0>)
    161e:	185b      	adds	r3, r3, r1
    1620:	2103      	movs	r1, #3
    1622:	438b      	bics	r3, r1
    1624:	3304      	adds	r3, #4
    1626:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1628:	2100      	movs	r1, #0
    162a:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    162c:	4293      	cmp	r3, r2
    162e:	d1fc      	bne.n	162a <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1630:	4a1d      	ldr	r2, [pc, #116]	; (16a8 <Reset_Handler+0xc4>)
    1632:	21ff      	movs	r1, #255	; 0xff
    1634:	4b1d      	ldr	r3, [pc, #116]	; (16ac <Reset_Handler+0xc8>)
    1636:	438b      	bics	r3, r1
    1638:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    163a:	39fd      	subs	r1, #253	; 0xfd
    163c:	2390      	movs	r3, #144	; 0x90
    163e:	005b      	lsls	r3, r3, #1
    1640:	4a1b      	ldr	r2, [pc, #108]	; (16b0 <Reset_Handler+0xcc>)
    1642:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    1644:	4a1b      	ldr	r2, [pc, #108]	; (16b4 <Reset_Handler+0xd0>)
    1646:	78d3      	ldrb	r3, [r2, #3]
    1648:	2503      	movs	r5, #3
    164a:	43ab      	bics	r3, r5
    164c:	2402      	movs	r4, #2
    164e:	4323      	orrs	r3, r4
    1650:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    1652:	78d3      	ldrb	r3, [r2, #3]
    1654:	270c      	movs	r7, #12
    1656:	43bb      	bics	r3, r7
    1658:	2608      	movs	r6, #8
    165a:	4333      	orrs	r3, r6
    165c:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    165e:	4b16      	ldr	r3, [pc, #88]	; (16b8 <Reset_Handler+0xd4>)
    1660:	7b98      	ldrb	r0, [r3, #14]
    1662:	2230      	movs	r2, #48	; 0x30
    1664:	4390      	bics	r0, r2
    1666:	2220      	movs	r2, #32
    1668:	4310      	orrs	r0, r2
    166a:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    166c:	7b99      	ldrb	r1, [r3, #14]
    166e:	43b9      	bics	r1, r7
    1670:	4331      	orrs	r1, r6
    1672:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    1674:	7b9a      	ldrb	r2, [r3, #14]
    1676:	43aa      	bics	r2, r5
    1678:	4322      	orrs	r2, r4
    167a:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    167c:	4a0f      	ldr	r2, [pc, #60]	; (16bc <Reset_Handler+0xd8>)
    167e:	6853      	ldr	r3, [r2, #4]
    1680:	2180      	movs	r1, #128	; 0x80
    1682:	430b      	orrs	r3, r1
    1684:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1686:	4b0e      	ldr	r3, [pc, #56]	; (16c0 <Reset_Handler+0xdc>)
    1688:	4798      	blx	r3
        main();
    168a:	4b0e      	ldr	r3, [pc, #56]	; (16c4 <Reset_Handler+0xe0>)
    168c:	4798      	blx	r3
    168e:	e7fe      	b.n	168e <Reset_Handler+0xaa>
    1690:	0000197c 	.word	0x0000197c
    1694:	20000000 	.word	0x20000000
    1698:	2000000c 	.word	0x2000000c
    169c:	20000004 	.word	0x20000004
    16a0:	2000000c 	.word	0x2000000c
    16a4:	200000a0 	.word	0x200000a0
    16a8:	e000ed00 	.word	0xe000ed00
    16ac:	00000000 	.word	0x00000000
    16b0:	41007000 	.word	0x41007000
    16b4:	41005000 	.word	0x41005000
    16b8:	41004800 	.word	0x41004800
    16bc:	41004000 	.word	0x41004000
    16c0:	000018a5 	.word	0x000018a5
    16c4:	0000172d 	.word	0x0000172d

000016c8 <extint_detection_callback>:
 */
#include <asf.h>
#include "lcd.h"

void extint_detection_callback(void)
{
    16c8:	b510      	push	{r4, lr}
	LCD_clearScreen(RED);
    16ca:	20f8      	movs	r0, #248	; 0xf8
    16cc:	0200      	lsls	r0, r0, #8
    16ce:	4b01      	ldr	r3, [pc, #4]	; (16d4 <extint_detection_callback+0xc>)
    16d0:	4798      	blx	r3
}
    16d2:	bd10      	pop	{r4, pc}
    16d4:	00000d4d 	.word	0x00000d4d

000016d8 <configure_extint_channel>:

void configure_extint_channel(void)
{
    16d8:	b510      	push	{r4, lr}
    16da:	b084      	sub	sp, #16
	// 	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	// 	pin_conf.input_pull = PORT_PIN_PULL_UP;
	// 	port_pin_set_config(PORT_PA25, &pin_conf);
	
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    16dc:	ac01      	add	r4, sp, #4
    16de:	0020      	movs	r0, r4
    16e0:	4b07      	ldr	r3, [pc, #28]	; (1700 <configure_extint_channel+0x28>)
    16e2:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PB11A_EIC_EXTINT11;
    16e4:	232b      	movs	r3, #43	; 0x2b
    16e6:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = MUX_PB11A_EIC_EXTINT11;
    16e8:	2300      	movs	r3, #0
    16ea:	6063      	str	r3, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    16ec:	3301      	adds	r3, #1
    16ee:	7223      	strb	r3, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_BOTH;
    16f0:	3302      	adds	r3, #2
    16f2:	72e3      	strb	r3, [r4, #11]
	extint_chan_set_config(11, &config_extint_chan);
    16f4:	0021      	movs	r1, r4
    16f6:	200b      	movs	r0, #11
    16f8:	4b02      	ldr	r3, [pc, #8]	; (1704 <configure_extint_channel+0x2c>)
    16fa:	4798      	blx	r3

}
    16fc:	b004      	add	sp, #16
    16fe:	bd10      	pop	{r4, pc}
    1700:	00000199 	.word	0x00000199
    1704:	000001ad 	.word	0x000001ad

00001708 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    1708:	b510      	push	{r4, lr}
	extint_register_callback(extint_detection_callback,
    170a:	2200      	movs	r2, #0
    170c:	210b      	movs	r1, #11
    170e:	4804      	ldr	r0, [pc, #16]	; (1720 <configure_extint_callbacks+0x18>)
    1710:	4b04      	ldr	r3, [pc, #16]	; (1724 <configure_extint_callbacks+0x1c>)
    1712:	4798      	blx	r3
	11,
	EXTINT_CALLBACK_TYPE_DETECT);
	extint_chan_enable_callback(11,
    1714:	2100      	movs	r1, #0
    1716:	200b      	movs	r0, #11
    1718:	4b03      	ldr	r3, [pc, #12]	; (1728 <configure_extint_callbacks+0x20>)
    171a:	4798      	blx	r3
	EXTINT_CALLBACK_TYPE_DETECT);
}
    171c:	bd10      	pop	{r4, pc}
    171e:	46c0      	nop			; (mov r8, r8)
    1720:	000016c9 	.word	0x000016c9
    1724:	00000225 	.word	0x00000225
    1728:	00000251 	.word	0x00000251

0000172c <main>:


int main (void)
{
    172c:	b510      	push	{r4, lr}
	system_init();
    172e:	4b0e      	ldr	r3, [pc, #56]	; (1768 <main+0x3c>)
    1730:	4798      	blx	r3
	configure_extint_channel();
    1732:	4b0e      	ldr	r3, [pc, #56]	; (176c <main+0x40>)
    1734:	4798      	blx	r3
	configure_extint_callbacks();
    1736:	4b0e      	ldr	r3, [pc, #56]	; (1770 <main+0x44>)
    1738:	4798      	blx	r3
	delay_init();
    173a:	4b0e      	ldr	r3, [pc, #56]	; (1774 <main+0x48>)
    173c:	4798      	blx	r3
	configure_port_pins();
    173e:	4b0e      	ldr	r3, [pc, #56]	; (1778 <main+0x4c>)
    1740:	4798      	blx	r3

	LCD_init();
    1742:	4b0e      	ldr	r3, [pc, #56]	; (177c <main+0x50>)
    1744:	4798      	blx	r3
	LCD_clearScreen(BLACK);
    1746:	2000      	movs	r0, #0
    1748:	4b0d      	ldr	r3, [pc, #52]	; (1780 <main+0x54>)
    174a:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    174c:	4c0d      	ldr	r4, [pc, #52]	; (1784 <main+0x58>)
    174e:	2080      	movs	r0, #128	; 0x80
    1750:	0200      	lsls	r0, r0, #8
		port_base->OUTSET.reg = pin_mask;
    1752:	490d      	ldr	r1, [pc, #52]	; (1788 <main+0x5c>)
    1754:	2280      	movs	r2, #128	; 0x80
    1756:	05d2      	lsls	r2, r2, #23
    1758:	e000      	b.n	175c <main+0x30>
    175a:	618a      	str	r2, [r1, #24]
	return (port_base->IN.reg & pin_mask);
    175c:	6a23      	ldr	r3, [r4, #32]
	/* Insert application code here, after the board has been initialized. */

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    175e:	4203      	tst	r3, r0
    1760:	d1fb      	bne.n	175a <main+0x2e>
		port_base->OUTCLR.reg = pin_mask;
    1762:	614a      	str	r2, [r1, #20]
    1764:	e7fa      	b.n	175c <main+0x30>
    1766:	46c0      	nop			; (mov r8, r8)
    1768:	000015b5 	.word	0x000015b5
    176c:	000016d9 	.word	0x000016d9
    1770:	00001709 	.word	0x00001709
    1774:	000002c5 	.word	0x000002c5
    1778:	0000097d 	.word	0x0000097d
    177c:	00000b3d 	.word	0x00000b3d
    1780:	00000d4d 	.word	0x00000d4d
    1784:	41004400 	.word	0x41004400
    1788:	41004480 	.word	0x41004480

0000178c <__udivsi3>:
    178c:	2200      	movs	r2, #0
    178e:	0843      	lsrs	r3, r0, #1
    1790:	428b      	cmp	r3, r1
    1792:	d374      	bcc.n	187e <__udivsi3+0xf2>
    1794:	0903      	lsrs	r3, r0, #4
    1796:	428b      	cmp	r3, r1
    1798:	d35f      	bcc.n	185a <__udivsi3+0xce>
    179a:	0a03      	lsrs	r3, r0, #8
    179c:	428b      	cmp	r3, r1
    179e:	d344      	bcc.n	182a <__udivsi3+0x9e>
    17a0:	0b03      	lsrs	r3, r0, #12
    17a2:	428b      	cmp	r3, r1
    17a4:	d328      	bcc.n	17f8 <__udivsi3+0x6c>
    17a6:	0c03      	lsrs	r3, r0, #16
    17a8:	428b      	cmp	r3, r1
    17aa:	d30d      	bcc.n	17c8 <__udivsi3+0x3c>
    17ac:	22ff      	movs	r2, #255	; 0xff
    17ae:	0209      	lsls	r1, r1, #8
    17b0:	ba12      	rev	r2, r2
    17b2:	0c03      	lsrs	r3, r0, #16
    17b4:	428b      	cmp	r3, r1
    17b6:	d302      	bcc.n	17be <__udivsi3+0x32>
    17b8:	1212      	asrs	r2, r2, #8
    17ba:	0209      	lsls	r1, r1, #8
    17bc:	d065      	beq.n	188a <__udivsi3+0xfe>
    17be:	0b03      	lsrs	r3, r0, #12
    17c0:	428b      	cmp	r3, r1
    17c2:	d319      	bcc.n	17f8 <__udivsi3+0x6c>
    17c4:	e000      	b.n	17c8 <__udivsi3+0x3c>
    17c6:	0a09      	lsrs	r1, r1, #8
    17c8:	0bc3      	lsrs	r3, r0, #15
    17ca:	428b      	cmp	r3, r1
    17cc:	d301      	bcc.n	17d2 <__udivsi3+0x46>
    17ce:	03cb      	lsls	r3, r1, #15
    17d0:	1ac0      	subs	r0, r0, r3
    17d2:	4152      	adcs	r2, r2
    17d4:	0b83      	lsrs	r3, r0, #14
    17d6:	428b      	cmp	r3, r1
    17d8:	d301      	bcc.n	17de <__udivsi3+0x52>
    17da:	038b      	lsls	r3, r1, #14
    17dc:	1ac0      	subs	r0, r0, r3
    17de:	4152      	adcs	r2, r2
    17e0:	0b43      	lsrs	r3, r0, #13
    17e2:	428b      	cmp	r3, r1
    17e4:	d301      	bcc.n	17ea <__udivsi3+0x5e>
    17e6:	034b      	lsls	r3, r1, #13
    17e8:	1ac0      	subs	r0, r0, r3
    17ea:	4152      	adcs	r2, r2
    17ec:	0b03      	lsrs	r3, r0, #12
    17ee:	428b      	cmp	r3, r1
    17f0:	d301      	bcc.n	17f6 <__udivsi3+0x6a>
    17f2:	030b      	lsls	r3, r1, #12
    17f4:	1ac0      	subs	r0, r0, r3
    17f6:	4152      	adcs	r2, r2
    17f8:	0ac3      	lsrs	r3, r0, #11
    17fa:	428b      	cmp	r3, r1
    17fc:	d301      	bcc.n	1802 <__udivsi3+0x76>
    17fe:	02cb      	lsls	r3, r1, #11
    1800:	1ac0      	subs	r0, r0, r3
    1802:	4152      	adcs	r2, r2
    1804:	0a83      	lsrs	r3, r0, #10
    1806:	428b      	cmp	r3, r1
    1808:	d301      	bcc.n	180e <__udivsi3+0x82>
    180a:	028b      	lsls	r3, r1, #10
    180c:	1ac0      	subs	r0, r0, r3
    180e:	4152      	adcs	r2, r2
    1810:	0a43      	lsrs	r3, r0, #9
    1812:	428b      	cmp	r3, r1
    1814:	d301      	bcc.n	181a <__udivsi3+0x8e>
    1816:	024b      	lsls	r3, r1, #9
    1818:	1ac0      	subs	r0, r0, r3
    181a:	4152      	adcs	r2, r2
    181c:	0a03      	lsrs	r3, r0, #8
    181e:	428b      	cmp	r3, r1
    1820:	d301      	bcc.n	1826 <__udivsi3+0x9a>
    1822:	020b      	lsls	r3, r1, #8
    1824:	1ac0      	subs	r0, r0, r3
    1826:	4152      	adcs	r2, r2
    1828:	d2cd      	bcs.n	17c6 <__udivsi3+0x3a>
    182a:	09c3      	lsrs	r3, r0, #7
    182c:	428b      	cmp	r3, r1
    182e:	d301      	bcc.n	1834 <__udivsi3+0xa8>
    1830:	01cb      	lsls	r3, r1, #7
    1832:	1ac0      	subs	r0, r0, r3
    1834:	4152      	adcs	r2, r2
    1836:	0983      	lsrs	r3, r0, #6
    1838:	428b      	cmp	r3, r1
    183a:	d301      	bcc.n	1840 <__udivsi3+0xb4>
    183c:	018b      	lsls	r3, r1, #6
    183e:	1ac0      	subs	r0, r0, r3
    1840:	4152      	adcs	r2, r2
    1842:	0943      	lsrs	r3, r0, #5
    1844:	428b      	cmp	r3, r1
    1846:	d301      	bcc.n	184c <__udivsi3+0xc0>
    1848:	014b      	lsls	r3, r1, #5
    184a:	1ac0      	subs	r0, r0, r3
    184c:	4152      	adcs	r2, r2
    184e:	0903      	lsrs	r3, r0, #4
    1850:	428b      	cmp	r3, r1
    1852:	d301      	bcc.n	1858 <__udivsi3+0xcc>
    1854:	010b      	lsls	r3, r1, #4
    1856:	1ac0      	subs	r0, r0, r3
    1858:	4152      	adcs	r2, r2
    185a:	08c3      	lsrs	r3, r0, #3
    185c:	428b      	cmp	r3, r1
    185e:	d301      	bcc.n	1864 <__udivsi3+0xd8>
    1860:	00cb      	lsls	r3, r1, #3
    1862:	1ac0      	subs	r0, r0, r3
    1864:	4152      	adcs	r2, r2
    1866:	0883      	lsrs	r3, r0, #2
    1868:	428b      	cmp	r3, r1
    186a:	d301      	bcc.n	1870 <__udivsi3+0xe4>
    186c:	008b      	lsls	r3, r1, #2
    186e:	1ac0      	subs	r0, r0, r3
    1870:	4152      	adcs	r2, r2
    1872:	0843      	lsrs	r3, r0, #1
    1874:	428b      	cmp	r3, r1
    1876:	d301      	bcc.n	187c <__udivsi3+0xf0>
    1878:	004b      	lsls	r3, r1, #1
    187a:	1ac0      	subs	r0, r0, r3
    187c:	4152      	adcs	r2, r2
    187e:	1a41      	subs	r1, r0, r1
    1880:	d200      	bcs.n	1884 <__udivsi3+0xf8>
    1882:	4601      	mov	r1, r0
    1884:	4152      	adcs	r2, r2
    1886:	4610      	mov	r0, r2
    1888:	4770      	bx	lr
    188a:	e7ff      	b.n	188c <__udivsi3+0x100>
    188c:	b501      	push	{r0, lr}
    188e:	2000      	movs	r0, #0
    1890:	f000 f806 	bl	18a0 <__aeabi_idiv0>
    1894:	bd02      	pop	{r1, pc}
    1896:	46c0      	nop			; (mov r8, r8)

00001898 <__aeabi_uidivmod>:
    1898:	2900      	cmp	r1, #0
    189a:	d0f7      	beq.n	188c <__udivsi3+0x100>
    189c:	e776      	b.n	178c <__udivsi3>
    189e:	4770      	bx	lr

000018a0 <__aeabi_idiv0>:
    18a0:	4770      	bx	lr
    18a2:	46c0      	nop			; (mov r8, r8)

000018a4 <__libc_init_array>:
    18a4:	b570      	push	{r4, r5, r6, lr}
    18a6:	2600      	movs	r6, #0
    18a8:	4d0c      	ldr	r5, [pc, #48]	; (18dc <__libc_init_array+0x38>)
    18aa:	4c0d      	ldr	r4, [pc, #52]	; (18e0 <__libc_init_array+0x3c>)
    18ac:	1b64      	subs	r4, r4, r5
    18ae:	10a4      	asrs	r4, r4, #2
    18b0:	42a6      	cmp	r6, r4
    18b2:	d109      	bne.n	18c8 <__libc_init_array+0x24>
    18b4:	2600      	movs	r6, #0
    18b6:	f000 f851 	bl	195c <_init>
    18ba:	4d0a      	ldr	r5, [pc, #40]	; (18e4 <__libc_init_array+0x40>)
    18bc:	4c0a      	ldr	r4, [pc, #40]	; (18e8 <__libc_init_array+0x44>)
    18be:	1b64      	subs	r4, r4, r5
    18c0:	10a4      	asrs	r4, r4, #2
    18c2:	42a6      	cmp	r6, r4
    18c4:	d105      	bne.n	18d2 <__libc_init_array+0x2e>
    18c6:	bd70      	pop	{r4, r5, r6, pc}
    18c8:	00b3      	lsls	r3, r6, #2
    18ca:	58eb      	ldr	r3, [r5, r3]
    18cc:	4798      	blx	r3
    18ce:	3601      	adds	r6, #1
    18d0:	e7ee      	b.n	18b0 <__libc_init_array+0xc>
    18d2:	00b3      	lsls	r3, r6, #2
    18d4:	58eb      	ldr	r3, [r5, r3]
    18d6:	4798      	blx	r3
    18d8:	3601      	adds	r6, #1
    18da:	e7f2      	b.n	18c2 <__libc_init_array+0x1e>
    18dc:	00001968 	.word	0x00001968
    18e0:	00001968 	.word	0x00001968
    18e4:	00001968 	.word	0x00001968
    18e8:	0000196c 	.word	0x0000196c

000018ec <memset>:
    18ec:	0003      	movs	r3, r0
    18ee:	1882      	adds	r2, r0, r2
    18f0:	4293      	cmp	r3, r2
    18f2:	d100      	bne.n	18f6 <memset+0xa>
    18f4:	4770      	bx	lr
    18f6:	7019      	strb	r1, [r3, #0]
    18f8:	3301      	adds	r3, #1
    18fa:	e7f9      	b.n	18f0 <memset+0x4>
    18fc:	42000800 	.word	0x42000800
    1900:	42000c00 	.word	0x42000c00
    1904:	42001000 	.word	0x42001000
    1908:	42001400 	.word	0x42001400
    190c:	42001800 	.word	0x42001800
    1910:	42001c00 	.word	0x42001c00
    1914:	00000e56 	.word	0x00000e56
    1918:	00000e52 	.word	0x00000e52
    191c:	00000e52 	.word	0x00000e52
    1920:	00000eb8 	.word	0x00000eb8
    1924:	00000eb8 	.word	0x00000eb8
    1928:	00000e6a 	.word	0x00000e6a
    192c:	00000e5c 	.word	0x00000e5c
    1930:	00000e70 	.word	0x00000e70
    1934:	00000ea6 	.word	0x00000ea6
    1938:	00001078 	.word	0x00001078
    193c:	00001058 	.word	0x00001058
    1940:	00001058 	.word	0x00001058
    1944:	000010e4 	.word	0x000010e4
    1948:	0000106a 	.word	0x0000106a
    194c:	00001086 	.word	0x00001086
    1950:	0000105c 	.word	0x0000105c
    1954:	00001094 	.word	0x00001094
    1958:	000010d4 	.word	0x000010d4

0000195c <_init>:
    195c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    195e:	46c0      	nop			; (mov r8, r8)
    1960:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1962:	bc08      	pop	{r3}
    1964:	469e      	mov	lr, r3
    1966:	4770      	bx	lr

00001968 <__init_array_start>:
    1968:	000000dd 	.word	0x000000dd

0000196c <_fini>:
    196c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    196e:	46c0      	nop			; (mov r8, r8)
    1970:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1972:	bc08      	pop	{r3}
    1974:	469e      	mov	lr, r3
    1976:	4770      	bx	lr

00001978 <__fini_array_start>:
    1978:	000000b5 	.word	0x000000b5
