
ATSAMD21_Proving_Fields_Master_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fec  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000000c  20000000  00001fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000098  2000000c  00001ff8  0002000c  2**2
                  ALLOC
  3 .stack        00002004  200000a4  00002090  0002000c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002361a  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003420  00000000  00000000  000436a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00006e39  00000000  00000000  00046ac7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000490  00000000  00000000  0004d900  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000938  00000000  00000000  0004dd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a942  00000000  00000000  0004e6c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b7c7  00000000  00000000  0006900a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008dc56  00000000  00000000  000747d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000c0c  00000000  00000000  00102428  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a8 20 00 20 cd 17 00 00 c9 17 00 00 c9 17 00 00     . . ............
	...
      2c:	c9 17 00 00 00 00 00 00 00 00 00 00 c9 17 00 00     ................
      3c:	c9 17 00 00 c9 17 00 00 c9 17 00 00 c9 17 00 00     ................
      4c:	c9 17 00 00 35 03 00 00 c9 17 00 00 c9 17 00 00     ....5...........
      5c:	c9 17 00 00 c9 17 00 00 c9 17 00 00 c9 17 00 00     ................
      6c:	c9 17 00 00 c9 17 00 00 c9 17 00 00 c9 17 00 00     ................
      7c:	c9 17 00 00 c9 17 00 00 c9 17 00 00 c9 17 00 00     ................
      8c:	c9 17 00 00 c9 17 00 00 c9 17 00 00 c9 17 00 00     ................
      9c:	c9 17 00 00 c9 17 00 00 c9 17 00 00 c9 17 00 00     ................
      ac:	c9 17 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	2000000c 	.word	0x2000000c
      d4:	00000000 	.word	0x00000000
      d8:	00001fec 	.word	0x00001fec

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000010 	.word	0x20000010
     108:	00001fec 	.word	0x00001fec
     10c:	00001fec 	.word	0x00001fec
     110:	00000000 	.word	0x00000000

00000114 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRL.reg |= EIC_CTRL_ENABLE;
     114:	4a04      	ldr	r2, [pc, #16]	; (128 <_extint_enable+0x14>)
     116:	7813      	ldrb	r3, [r2, #0]
     118:	2102      	movs	r1, #2
     11a:	430b      	orrs	r3, r1
     11c:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     11e:	7853      	ldrb	r3, [r2, #1]
     120:	b25b      	sxtb	r3, r3
     122:	2b00      	cmp	r3, #0
     124:	dbfb      	blt.n	11e <_extint_enable+0xa>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     126:	4770      	bx	lr
     128:	40001800 	.word	0x40001800

0000012c <_system_extint_init>:
{
     12c:	b500      	push	{lr}
     12e:	b083      	sub	sp, #12
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     130:	4a12      	ldr	r2, [pc, #72]	; (17c <_system_extint_init+0x50>)
     132:	6993      	ldr	r3, [r2, #24]
     134:	2140      	movs	r1, #64	; 0x40
     136:	430b      	orrs	r3, r1
     138:	6193      	str	r3, [r2, #24]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->source_generator = GCLK_GENERATOR_0;
     13a:	a901      	add	r1, sp, #4
     13c:	2300      	movs	r3, #0
     13e:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(EIC_GCLK_ID, &gclk_chan_conf);
     140:	2005      	movs	r0, #5
     142:	4b0f      	ldr	r3, [pc, #60]	; (180 <_system_extint_init+0x54>)
     144:	4798      	blx	r3
	system_gclk_chan_enable(EIC_GCLK_ID);
     146:	2005      	movs	r0, #5
     148:	4b0e      	ldr	r3, [pc, #56]	; (184 <_system_extint_init+0x58>)
     14a:	4798      	blx	r3
		eics[i]->CTRL.reg |= EIC_CTRL_SWRST;
     14c:	4a0e      	ldr	r2, [pc, #56]	; (188 <_system_extint_init+0x5c>)
     14e:	7813      	ldrb	r3, [r2, #0]
     150:	2101      	movs	r1, #1
     152:	430b      	orrs	r3, r1
     154:	7013      	strb	r3, [r2, #0]
		if (eics[i]->STATUS.reg & EIC_STATUS_SYNCBUSY) {
     156:	7853      	ldrb	r3, [r2, #1]
     158:	b25b      	sxtb	r3, r3
     15a:	2b00      	cmp	r3, #0
     15c:	dbfb      	blt.n	156 <_system_extint_init+0x2a>
     15e:	4b0b      	ldr	r3, [pc, #44]	; (18c <_system_extint_init+0x60>)
     160:	0019      	movs	r1, r3
     162:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     164:	2200      	movs	r2, #0
     166:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     168:	4299      	cmp	r1, r3
     16a:	d1fc      	bne.n	166 <_system_extint_init+0x3a>
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     16c:	2210      	movs	r2, #16
     16e:	4b08      	ldr	r3, [pc, #32]	; (190 <_system_extint_init+0x64>)
     170:	601a      	str	r2, [r3, #0]
	_extint_enable();
     172:	4b08      	ldr	r3, [pc, #32]	; (194 <_system_extint_init+0x68>)
     174:	4798      	blx	r3
}
     176:	b003      	add	sp, #12
     178:	bd00      	pop	{pc}
     17a:	46c0      	nop			; (mov r8, r8)
     17c:	40000400 	.word	0x40000400
     180:	00001671 	.word	0x00001671
     184:	000015e5 	.word	0x000015e5
     188:	40001800 	.word	0x40001800
     18c:	2000004c 	.word	0x2000004c
     190:	e000e100 	.word	0xe000e100
     194:	00000115 	.word	0x00000115

00000198 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     198:	2300      	movs	r3, #0
     19a:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     19c:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     19e:	2201      	movs	r2, #1
     1a0:	7202      	strb	r2, [r0, #8]
	config->wake_if_sleeping    = true;
     1a2:	7242      	strb	r2, [r0, #9]
	config->filter_input_signal = false;
     1a4:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     1a6:	3302      	adds	r3, #2
     1a8:	72c3      	strb	r3, [r0, #11]
}
     1aa:	4770      	bx	lr

000001ac <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     1ae:	b083      	sub	sp, #12
     1b0:	0005      	movs	r5, r0
     1b2:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     1b4:	a901      	add	r1, sp, #4
     1b6:	2300      	movs	r3, #0
     1b8:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     1ba:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     1bc:	7923      	ldrb	r3, [r4, #4]
     1be:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     1c0:	7a23      	ldrb	r3, [r4, #8]
     1c2:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     1c4:	7820      	ldrb	r0, [r4, #0]
     1c6:	4b15      	ldr	r3, [pc, #84]	; (21c <extint_chan_set_config+0x70>)
     1c8:	4798      	blx	r3
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     1ca:	2000      	movs	r0, #0
	if (eic_index < EIC_INST_NUM) {
     1cc:	2d1f      	cmp	r5, #31
     1ce:	d800      	bhi.n	1d2 <extint_chan_set_config+0x26>
		return eics[eic_index];
     1d0:	4813      	ldr	r0, [pc, #76]	; (220 <extint_chan_set_config+0x74>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     1d2:	2207      	movs	r2, #7
     1d4:	402a      	ands	r2, r5
     1d6:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     1d8:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     1da:	7aa3      	ldrb	r3, [r4, #10]
     1dc:	2b00      	cmp	r3, #0
     1de:	d001      	beq.n	1e4 <extint_chan_set_config+0x38>
     1e0:	2308      	movs	r3, #8
     1e2:	431f      	orrs	r7, r3
     1e4:	08eb      	lsrs	r3, r5, #3
     1e6:	009b      	lsls	r3, r3, #2
     1e8:	18c3      	adds	r3, r0, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     1ea:	6999      	ldr	r1, [r3, #24]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1ec:	260f      	movs	r6, #15
     1ee:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     1f0:	43b1      	bics	r1, r6
			(new_config << config_pos);
     1f2:	4097      	lsls	r7, r2
     1f4:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     1f6:	430a      	orrs	r2, r1
		= (EIC_module->CONFIG[channel / 8].reg &
     1f8:	619a      	str	r2, [r3, #24]

	/* Set the channel's new wake up mode setting */
	if (config->wake_if_sleeping) {
     1fa:	7a63      	ldrb	r3, [r4, #9]
     1fc:	2b00      	cmp	r3, #0
     1fe:	d106      	bne.n	20e <extint_chan_set_config+0x62>
		EIC_module->WAKEUP.reg |=  (1UL << channel);
	} else {
		EIC_module->WAKEUP.reg &= ~(1UL << channel);
     200:	6943      	ldr	r3, [r0, #20]
     202:	2201      	movs	r2, #1
     204:	40aa      	lsls	r2, r5
     206:	4393      	bics	r3, r2
     208:	6143      	str	r3, [r0, #20]
	}
}
     20a:	b003      	add	sp, #12
     20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->WAKEUP.reg |=  (1UL << channel);
     20e:	6942      	ldr	r2, [r0, #20]
     210:	2301      	movs	r3, #1
     212:	40ab      	lsls	r3, r5
     214:	4313      	orrs	r3, r2
     216:	6143      	str	r3, [r0, #20]
     218:	e7f7      	b.n	20a <extint_chan_set_config+0x5e>
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	00001769 	.word	0x00001769
     220:	40001800 	.word	0x40001800

00000224 <printMenu>:
// 	
// }



void printMenu(uint8_t pos,uint8_t menuIndex, uint8_t selection){
     224:	b5f0      	push	{r4, r5, r6, r7, lr}
     226:	46ce      	mov	lr, r9
     228:	b500      	push	{lr}
     22a:	b08a      	sub	sp, #40	; 0x28
     22c:	4681      	mov	r9, r0
	char output[30];
	char* menu[4];
	menu[0] = "Option 1";
     22e:	4a28      	ldr	r2, [pc, #160]	; (2d0 <printMenu+0xac>)
     230:	9206      	str	r2, [sp, #24]
	menu[1] = "Option 2";
     232:	4b28      	ldr	r3, [pc, #160]	; (2d4 <printMenu+0xb0>)
     234:	9307      	str	r3, [sp, #28]
	menu[2] = "Option 3";
     236:	4828      	ldr	r0, [pc, #160]	; (2d8 <printMenu+0xb4>)
     238:	9008      	str	r0, [sp, #32]
	menu[3] = "Option 4";
     23a:	4828      	ldr	r0, [pc, #160]	; (2dc <printMenu+0xb8>)
     23c:	9009      	str	r0, [sp, #36]	; 0x24
	char* submenu1[3]; // linked to option 2
	submenu1[0] = "Option 1";
     23e:	9203      	str	r2, [sp, #12]
	submenu1[1] = "Option 2";
     240:	9304      	str	r3, [sp, #16]
	submenu1[2] = "Back";
     242:	4b27      	ldr	r3, [pc, #156]	; (2e0 <printMenu+0xbc>)
     244:	9305      	str	r3, [sp, #20]

	
	switch(menuIndex){
     246:	2901      	cmp	r1, #1
     248:	d005      	beq.n	256 <printMenu+0x32>
     24a:	2902      	cmp	r1, #2
     24c:	d021      	beq.n	292 <printMenu+0x6e>
			}
		break;
	}


     24e:	b00a      	add	sp, #40	; 0x28
     250:	bc04      	pop	{r2}
     252:	4691      	mov	r9, r2
     254:	bdf0      	pop	{r4, r5, r6, r7, pc}
     256:	af06      	add	r7, sp, #24
	switch(menuIndex){
     258:	241e      	movs	r4, #30
     25a:	2500      	movs	r5, #0
     25c:	e00e      	b.n	27c <printMenu+0x58>
					drawString(8, position,menu[i],BLACK,WHITE);
     25e:	b221      	sxth	r1, r4
     260:	2301      	movs	r3, #1
     262:	425b      	negs	r3, r3
     264:	9300      	str	r3, [sp, #0]
     266:	2300      	movs	r3, #0
     268:	683a      	ldr	r2, [r7, #0]
     26a:	2008      	movs	r0, #8
     26c:	4e1d      	ldr	r6, [pc, #116]	; (2e4 <printMenu+0xc0>)
     26e:	47b0      	blx	r6
			for(int i = 0; i<4;i++){
     270:	3501      	adds	r5, #1
     272:	3704      	adds	r7, #4
     274:	340a      	adds	r4, #10
     276:	b2a4      	uxth	r4, r4
     278:	2c46      	cmp	r4, #70	; 0x46
     27a:	d0e8      	beq.n	24e <printMenu+0x2a>
				if (i!=pos){
     27c:	45a9      	cmp	r9, r5
     27e:	d0ee      	beq.n	25e <printMenu+0x3a>
					drawString(8, position,menu[i],WHITE,BLACK);
     280:	b221      	sxth	r1, r4
     282:	2300      	movs	r3, #0
     284:	9300      	str	r3, [sp, #0]
     286:	3b01      	subs	r3, #1
     288:	683a      	ldr	r2, [r7, #0]
     28a:	2008      	movs	r0, #8
     28c:	4e15      	ldr	r6, [pc, #84]	; (2e4 <printMenu+0xc0>)
     28e:	47b0      	blx	r6
     290:	e7ee      	b.n	270 <printMenu+0x4c>
     292:	ae03      	add	r6, sp, #12
	switch(menuIndex){
     294:	241e      	movs	r4, #30
     296:	2700      	movs	r7, #0
     298:	e00e      	b.n	2b8 <printMenu+0x94>
					drawString(8, position,submenu1[i],BLACK,WHITE);
     29a:	b221      	sxth	r1, r4
     29c:	2301      	movs	r3, #1
     29e:	425b      	negs	r3, r3
     2a0:	9300      	str	r3, [sp, #0]
     2a2:	2300      	movs	r3, #0
     2a4:	6832      	ldr	r2, [r6, #0]
     2a6:	2008      	movs	r0, #8
     2a8:	4d0e      	ldr	r5, [pc, #56]	; (2e4 <printMenu+0xc0>)
     2aa:	47a8      	blx	r5
			for(int i = 0; i<3;i++){
     2ac:	3701      	adds	r7, #1
     2ae:	3604      	adds	r6, #4
     2b0:	340a      	adds	r4, #10
     2b2:	b2a4      	uxth	r4, r4
     2b4:	2c3c      	cmp	r4, #60	; 0x3c
     2b6:	d0ca      	beq.n	24e <printMenu+0x2a>
				if (i!=pos){
     2b8:	45b9      	cmp	r9, r7
     2ba:	d0ee      	beq.n	29a <printMenu+0x76>
					drawString(8, position,submenu1[i],WHITE,BLACK);
     2bc:	b221      	sxth	r1, r4
     2be:	2300      	movs	r3, #0
     2c0:	9300      	str	r3, [sp, #0]
     2c2:	3b01      	subs	r3, #1
     2c4:	6832      	ldr	r2, [r6, #0]
     2c6:	2008      	movs	r0, #8
     2c8:	4d06      	ldr	r5, [pc, #24]	; (2e4 <printMenu+0xc0>)
     2ca:	47a8      	blx	r5
     2cc:	e7ee      	b.n	2ac <printMenu+0x88>
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	00001d30 	.word	0x00001d30
     2d4:	00001d3c 	.word	0x00001d3c
     2d8:	00001d48 	.word	0x00001d48
     2dc:	00001d54 	.word	0x00001d54
     2e0:	00001d60 	.word	0x00001d60
     2e4:	00000ef9 	.word	0x00000ef9

000002e8 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     2e8:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     2ea:	2a00      	cmp	r2, #0
     2ec:	d001      	beq.n	2f2 <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     2ee:	0018      	movs	r0, r3
     2f0:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     2f2:	008b      	lsls	r3, r1, #2
     2f4:	4a06      	ldr	r2, [pc, #24]	; (310 <extint_register_callback+0x28>)
     2f6:	589b      	ldr	r3, [r3, r2]
     2f8:	2b00      	cmp	r3, #0
     2fa:	d003      	beq.n	304 <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     2fc:	4283      	cmp	r3, r0
     2fe:	d005      	beq.n	30c <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     300:	231d      	movs	r3, #29
     302:	e7f4      	b.n	2ee <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     304:	0089      	lsls	r1, r1, #2
     306:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     308:	2300      	movs	r3, #0
     30a:	e7f0      	b.n	2ee <extint_register_callback+0x6>
		return STATUS_OK;
     30c:	2300      	movs	r3, #0
     30e:	e7ee      	b.n	2ee <extint_register_callback+0x6>
     310:	2000004c 	.word	0x2000004c

00000314 <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     314:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     316:	2900      	cmp	r1, #0
     318:	d001      	beq.n	31e <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     31a:	0018      	movs	r0, r3
     31c:	4770      	bx	lr
		return NULL;
     31e:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     320:	281f      	cmp	r0, #31
     322:	d800      	bhi.n	326 <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     324:	4a02      	ldr	r2, [pc, #8]	; (330 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     326:	2301      	movs	r3, #1
     328:	4083      	lsls	r3, r0
     32a:	60d3      	str	r3, [r2, #12]
	return STATUS_OK;
     32c:	2300      	movs	r3, #0
     32e:	e7f4      	b.n	31a <extint_chan_enable_callback+0x6>
     330:	40001800 	.word	0x40001800

00000334 <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     334:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     336:	2200      	movs	r2, #0
     338:	4b10      	ldr	r3, [pc, #64]	; (37c <EIC_Handler+0x48>)
     33a:	701a      	strb	r2, [r3, #0]
     33c:	2300      	movs	r3, #0
     33e:	4910      	ldr	r1, [pc, #64]	; (380 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     340:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     342:	4e10      	ldr	r6, [pc, #64]	; (384 <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     344:	4c0d      	ldr	r4, [pc, #52]	; (37c <EIC_Handler+0x48>)
     346:	e00a      	b.n	35e <EIC_Handler+0x2a>
		return eics[eic_index];
     348:	490d      	ldr	r1, [pc, #52]	; (380 <EIC_Handler+0x4c>)
     34a:	e008      	b.n	35e <EIC_Handler+0x2a>
     34c:	7823      	ldrb	r3, [r4, #0]
     34e:	3301      	adds	r3, #1
     350:	b2db      	uxtb	r3, r3
     352:	7023      	strb	r3, [r4, #0]
     354:	2b0f      	cmp	r3, #15
     356:	d810      	bhi.n	37a <EIC_Handler+0x46>
		return NULL;
     358:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     35a:	2b1f      	cmp	r3, #31
     35c:	d9f4      	bls.n	348 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     35e:	0028      	movs	r0, r5
     360:	4018      	ands	r0, r3
     362:	2201      	movs	r2, #1
     364:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     366:	6908      	ldr	r0, [r1, #16]
		if (extint_chan_is_detected(_current_channel)) {
     368:	4210      	tst	r0, r2
     36a:	d0ef      	beq.n	34c <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     36c:	610a      	str	r2, [r1, #16]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     36e:	009b      	lsls	r3, r3, #2
     370:	599b      	ldr	r3, [r3, r6]
     372:	2b00      	cmp	r3, #0
     374:	d0ea      	beq.n	34c <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     376:	4798      	blx	r3
     378:	e7e8      	b.n	34c <EIC_Handler+0x18>
			}
		}
	}
}
     37a:	bd70      	pop	{r4, r5, r6, pc}
     37c:	2000008c 	.word	0x2000008c
     380:	40001800 	.word	0x40001800
     384:	2000004c 	.word	0x2000004c

00000388 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     388:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     38a:	2000      	movs	r0, #0
     38c:	4b08      	ldr	r3, [pc, #32]	; (3b0 <delay_init+0x28>)
     38e:	4798      	blx	r3
     390:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     392:	4c08      	ldr	r4, [pc, #32]	; (3b4 <delay_init+0x2c>)
     394:	21fa      	movs	r1, #250	; 0xfa
     396:	0089      	lsls	r1, r1, #2
     398:	47a0      	blx	r4
     39a:	4b07      	ldr	r3, [pc, #28]	; (3b8 <delay_init+0x30>)
     39c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     39e:	4907      	ldr	r1, [pc, #28]	; (3bc <delay_init+0x34>)
     3a0:	0028      	movs	r0, r5
     3a2:	47a0      	blx	r4
     3a4:	4b06      	ldr	r3, [pc, #24]	; (3c0 <delay_init+0x38>)
     3a6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     3a8:	2205      	movs	r2, #5
     3aa:	4b06      	ldr	r3, [pc, #24]	; (3c4 <delay_init+0x3c>)
     3ac:	601a      	str	r2, [r3, #0]
}
     3ae:	bd70      	pop	{r4, r5, r6, pc}
     3b0:	00001559 	.word	0x00001559
     3b4:	00001bc1 	.word	0x00001bc1
     3b8:	20000000 	.word	0x20000000
     3bc:	000f4240 	.word	0x000f4240
     3c0:	20000004 	.word	0x20000004
     3c4:	e000e010 	.word	0xe000e010

000003c8 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     3c8:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     3ca:	4b08      	ldr	r3, [pc, #32]	; (3ec <delay_cycles_ms+0x24>)
     3cc:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     3ce:	4a08      	ldr	r2, [pc, #32]	; (3f0 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     3d0:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     3d2:	2180      	movs	r1, #128	; 0x80
     3d4:	0249      	lsls	r1, r1, #9
	while (n--) {
     3d6:	3801      	subs	r0, #1
     3d8:	d307      	bcc.n	3ea <delay_cycles_ms+0x22>
	if (n > 0) {
     3da:	2c00      	cmp	r4, #0
     3dc:	d0fb      	beq.n	3d6 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     3de:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     3e0:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     3e2:	6813      	ldr	r3, [r2, #0]
     3e4:	420b      	tst	r3, r1
     3e6:	d0fc      	beq.n	3e2 <delay_cycles_ms+0x1a>
     3e8:	e7f5      	b.n	3d6 <delay_cycles_ms+0xe>
	}
}
     3ea:	bd30      	pop	{r4, r5, pc}
     3ec:	20000000 	.word	0x20000000
     3f0:	e000e010 	.word	0xe000e010

000003f4 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     3f4:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     3f6:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3f8:	2340      	movs	r3, #64	; 0x40
     3fa:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     3fc:	4281      	cmp	r1, r0
     3fe:	d202      	bcs.n	406 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     400:	0018      	movs	r0, r3
     402:	bd10      	pop	{r4, pc}
		baud_calculated++;
     404:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     406:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     408:	1c63      	adds	r3, r4, #1
     40a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     40c:	4288      	cmp	r0, r1
     40e:	d9f9      	bls.n	404 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     410:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     412:	2cff      	cmp	r4, #255	; 0xff
     414:	d8f4      	bhi.n	400 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     416:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     418:	2300      	movs	r3, #0
     41a:	e7f1      	b.n	400 <_sercom_get_sync_baud_val+0xc>

0000041c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     41c:	b510      	push	{r4, lr}
     41e:	b082      	sub	sp, #8
     420:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     422:	4b0e      	ldr	r3, [pc, #56]	; (45c <sercom_set_gclk_generator+0x40>)
     424:	781b      	ldrb	r3, [r3, #0]
     426:	2b00      	cmp	r3, #0
     428:	d007      	beq.n	43a <sercom_set_gclk_generator+0x1e>
     42a:	2900      	cmp	r1, #0
     42c:	d105      	bne.n	43a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     42e:	4b0b      	ldr	r3, [pc, #44]	; (45c <sercom_set_gclk_generator+0x40>)
     430:	785b      	ldrb	r3, [r3, #1]
     432:	4283      	cmp	r3, r0
     434:	d010      	beq.n	458 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     436:	201d      	movs	r0, #29
     438:	e00c      	b.n	454 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     43a:	a901      	add	r1, sp, #4
     43c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     43e:	2013      	movs	r0, #19
     440:	4b07      	ldr	r3, [pc, #28]	; (460 <sercom_set_gclk_generator+0x44>)
     442:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     444:	2013      	movs	r0, #19
     446:	4b07      	ldr	r3, [pc, #28]	; (464 <sercom_set_gclk_generator+0x48>)
     448:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     44a:	4b04      	ldr	r3, [pc, #16]	; (45c <sercom_set_gclk_generator+0x40>)
     44c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     44e:	2201      	movs	r2, #1
     450:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     452:	2000      	movs	r0, #0
}
     454:	b002      	add	sp, #8
     456:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     458:	2000      	movs	r0, #0
     45a:	e7fb      	b.n	454 <sercom_set_gclk_generator+0x38>
     45c:	20000028 	.word	0x20000028
     460:	00001671 	.word	0x00001671
     464:	000015e5 	.word	0x000015e5

00000468 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     468:	4b40      	ldr	r3, [pc, #256]	; (56c <_sercom_get_default_pad+0x104>)
     46a:	4298      	cmp	r0, r3
     46c:	d031      	beq.n	4d2 <_sercom_get_default_pad+0x6a>
     46e:	d90a      	bls.n	486 <_sercom_get_default_pad+0x1e>
     470:	4b3f      	ldr	r3, [pc, #252]	; (570 <_sercom_get_default_pad+0x108>)
     472:	4298      	cmp	r0, r3
     474:	d04d      	beq.n	512 <_sercom_get_default_pad+0xaa>
     476:	4b3f      	ldr	r3, [pc, #252]	; (574 <_sercom_get_default_pad+0x10c>)
     478:	4298      	cmp	r0, r3
     47a:	d05a      	beq.n	532 <_sercom_get_default_pad+0xca>
     47c:	4b3e      	ldr	r3, [pc, #248]	; (578 <_sercom_get_default_pad+0x110>)
     47e:	4298      	cmp	r0, r3
     480:	d037      	beq.n	4f2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     482:	2000      	movs	r0, #0
}
     484:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     486:	4b3d      	ldr	r3, [pc, #244]	; (57c <_sercom_get_default_pad+0x114>)
     488:	4298      	cmp	r0, r3
     48a:	d00c      	beq.n	4a6 <_sercom_get_default_pad+0x3e>
     48c:	4b3c      	ldr	r3, [pc, #240]	; (580 <_sercom_get_default_pad+0x118>)
     48e:	4298      	cmp	r0, r3
     490:	d1f7      	bne.n	482 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     492:	2901      	cmp	r1, #1
     494:	d017      	beq.n	4c6 <_sercom_get_default_pad+0x5e>
     496:	2900      	cmp	r1, #0
     498:	d05d      	beq.n	556 <_sercom_get_default_pad+0xee>
     49a:	2902      	cmp	r1, #2
     49c:	d015      	beq.n	4ca <_sercom_get_default_pad+0x62>
     49e:	2903      	cmp	r1, #3
     4a0:	d015      	beq.n	4ce <_sercom_get_default_pad+0x66>
	return 0;
     4a2:	2000      	movs	r0, #0
     4a4:	e7ee      	b.n	484 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4a6:	2901      	cmp	r1, #1
     4a8:	d007      	beq.n	4ba <_sercom_get_default_pad+0x52>
     4aa:	2900      	cmp	r1, #0
     4ac:	d051      	beq.n	552 <_sercom_get_default_pad+0xea>
     4ae:	2902      	cmp	r1, #2
     4b0:	d005      	beq.n	4be <_sercom_get_default_pad+0x56>
     4b2:	2903      	cmp	r1, #3
     4b4:	d005      	beq.n	4c2 <_sercom_get_default_pad+0x5a>
	return 0;
     4b6:	2000      	movs	r0, #0
     4b8:	e7e4      	b.n	484 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4ba:	4832      	ldr	r0, [pc, #200]	; (584 <_sercom_get_default_pad+0x11c>)
     4bc:	e7e2      	b.n	484 <_sercom_get_default_pad+0x1c>
     4be:	4832      	ldr	r0, [pc, #200]	; (588 <_sercom_get_default_pad+0x120>)
     4c0:	e7e0      	b.n	484 <_sercom_get_default_pad+0x1c>
     4c2:	4832      	ldr	r0, [pc, #200]	; (58c <_sercom_get_default_pad+0x124>)
     4c4:	e7de      	b.n	484 <_sercom_get_default_pad+0x1c>
     4c6:	4832      	ldr	r0, [pc, #200]	; (590 <_sercom_get_default_pad+0x128>)
     4c8:	e7dc      	b.n	484 <_sercom_get_default_pad+0x1c>
     4ca:	4832      	ldr	r0, [pc, #200]	; (594 <_sercom_get_default_pad+0x12c>)
     4cc:	e7da      	b.n	484 <_sercom_get_default_pad+0x1c>
     4ce:	4832      	ldr	r0, [pc, #200]	; (598 <_sercom_get_default_pad+0x130>)
     4d0:	e7d8      	b.n	484 <_sercom_get_default_pad+0x1c>
     4d2:	2901      	cmp	r1, #1
     4d4:	d007      	beq.n	4e6 <_sercom_get_default_pad+0x7e>
     4d6:	2900      	cmp	r1, #0
     4d8:	d03f      	beq.n	55a <_sercom_get_default_pad+0xf2>
     4da:	2902      	cmp	r1, #2
     4dc:	d005      	beq.n	4ea <_sercom_get_default_pad+0x82>
     4de:	2903      	cmp	r1, #3
     4e0:	d005      	beq.n	4ee <_sercom_get_default_pad+0x86>
	return 0;
     4e2:	2000      	movs	r0, #0
     4e4:	e7ce      	b.n	484 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4e6:	482d      	ldr	r0, [pc, #180]	; (59c <_sercom_get_default_pad+0x134>)
     4e8:	e7cc      	b.n	484 <_sercom_get_default_pad+0x1c>
     4ea:	482d      	ldr	r0, [pc, #180]	; (5a0 <_sercom_get_default_pad+0x138>)
     4ec:	e7ca      	b.n	484 <_sercom_get_default_pad+0x1c>
     4ee:	482d      	ldr	r0, [pc, #180]	; (5a4 <_sercom_get_default_pad+0x13c>)
     4f0:	e7c8      	b.n	484 <_sercom_get_default_pad+0x1c>
     4f2:	2901      	cmp	r1, #1
     4f4:	d007      	beq.n	506 <_sercom_get_default_pad+0x9e>
     4f6:	2900      	cmp	r1, #0
     4f8:	d031      	beq.n	55e <_sercom_get_default_pad+0xf6>
     4fa:	2902      	cmp	r1, #2
     4fc:	d005      	beq.n	50a <_sercom_get_default_pad+0xa2>
     4fe:	2903      	cmp	r1, #3
     500:	d005      	beq.n	50e <_sercom_get_default_pad+0xa6>
	return 0;
     502:	2000      	movs	r0, #0
     504:	e7be      	b.n	484 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     506:	4828      	ldr	r0, [pc, #160]	; (5a8 <_sercom_get_default_pad+0x140>)
     508:	e7bc      	b.n	484 <_sercom_get_default_pad+0x1c>
     50a:	4828      	ldr	r0, [pc, #160]	; (5ac <_sercom_get_default_pad+0x144>)
     50c:	e7ba      	b.n	484 <_sercom_get_default_pad+0x1c>
     50e:	4828      	ldr	r0, [pc, #160]	; (5b0 <_sercom_get_default_pad+0x148>)
     510:	e7b8      	b.n	484 <_sercom_get_default_pad+0x1c>
     512:	2901      	cmp	r1, #1
     514:	d007      	beq.n	526 <_sercom_get_default_pad+0xbe>
     516:	2900      	cmp	r1, #0
     518:	d023      	beq.n	562 <_sercom_get_default_pad+0xfa>
     51a:	2902      	cmp	r1, #2
     51c:	d005      	beq.n	52a <_sercom_get_default_pad+0xc2>
     51e:	2903      	cmp	r1, #3
     520:	d005      	beq.n	52e <_sercom_get_default_pad+0xc6>
	return 0;
     522:	2000      	movs	r0, #0
     524:	e7ae      	b.n	484 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     526:	4823      	ldr	r0, [pc, #140]	; (5b4 <_sercom_get_default_pad+0x14c>)
     528:	e7ac      	b.n	484 <_sercom_get_default_pad+0x1c>
     52a:	4823      	ldr	r0, [pc, #140]	; (5b8 <_sercom_get_default_pad+0x150>)
     52c:	e7aa      	b.n	484 <_sercom_get_default_pad+0x1c>
     52e:	4823      	ldr	r0, [pc, #140]	; (5bc <_sercom_get_default_pad+0x154>)
     530:	e7a8      	b.n	484 <_sercom_get_default_pad+0x1c>
     532:	2901      	cmp	r1, #1
     534:	d007      	beq.n	546 <_sercom_get_default_pad+0xde>
     536:	2900      	cmp	r1, #0
     538:	d015      	beq.n	566 <_sercom_get_default_pad+0xfe>
     53a:	2902      	cmp	r1, #2
     53c:	d005      	beq.n	54a <_sercom_get_default_pad+0xe2>
     53e:	2903      	cmp	r1, #3
     540:	d005      	beq.n	54e <_sercom_get_default_pad+0xe6>
	return 0;
     542:	2000      	movs	r0, #0
     544:	e79e      	b.n	484 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     546:	481e      	ldr	r0, [pc, #120]	; (5c0 <_sercom_get_default_pad+0x158>)
     548:	e79c      	b.n	484 <_sercom_get_default_pad+0x1c>
     54a:	481e      	ldr	r0, [pc, #120]	; (5c4 <_sercom_get_default_pad+0x15c>)
     54c:	e79a      	b.n	484 <_sercom_get_default_pad+0x1c>
     54e:	481e      	ldr	r0, [pc, #120]	; (5c8 <_sercom_get_default_pad+0x160>)
     550:	e798      	b.n	484 <_sercom_get_default_pad+0x1c>
     552:	481e      	ldr	r0, [pc, #120]	; (5cc <_sercom_get_default_pad+0x164>)
     554:	e796      	b.n	484 <_sercom_get_default_pad+0x1c>
     556:	2003      	movs	r0, #3
     558:	e794      	b.n	484 <_sercom_get_default_pad+0x1c>
     55a:	481d      	ldr	r0, [pc, #116]	; (5d0 <_sercom_get_default_pad+0x168>)
     55c:	e792      	b.n	484 <_sercom_get_default_pad+0x1c>
     55e:	481d      	ldr	r0, [pc, #116]	; (5d4 <_sercom_get_default_pad+0x16c>)
     560:	e790      	b.n	484 <_sercom_get_default_pad+0x1c>
     562:	481d      	ldr	r0, [pc, #116]	; (5d8 <_sercom_get_default_pad+0x170>)
     564:	e78e      	b.n	484 <_sercom_get_default_pad+0x1c>
     566:	481d      	ldr	r0, [pc, #116]	; (5dc <_sercom_get_default_pad+0x174>)
     568:	e78c      	b.n	484 <_sercom_get_default_pad+0x1c>
     56a:	46c0      	nop			; (mov r8, r8)
     56c:	42001000 	.word	0x42001000
     570:	42001800 	.word	0x42001800
     574:	42001c00 	.word	0x42001c00
     578:	42001400 	.word	0x42001400
     57c:	42000800 	.word	0x42000800
     580:	42000c00 	.word	0x42000c00
     584:	00050003 	.word	0x00050003
     588:	00060003 	.word	0x00060003
     58c:	00070003 	.word	0x00070003
     590:	00010003 	.word	0x00010003
     594:	001e0003 	.word	0x001e0003
     598:	001f0003 	.word	0x001f0003
     59c:	00090003 	.word	0x00090003
     5a0:	000a0003 	.word	0x000a0003
     5a4:	000b0003 	.word	0x000b0003
     5a8:	00110003 	.word	0x00110003
     5ac:	00120003 	.word	0x00120003
     5b0:	00130003 	.word	0x00130003
     5b4:	000d0003 	.word	0x000d0003
     5b8:	000e0003 	.word	0x000e0003
     5bc:	000f0003 	.word	0x000f0003
     5c0:	00170003 	.word	0x00170003
     5c4:	00180003 	.word	0x00180003
     5c8:	00190003 	.word	0x00190003
     5cc:	00040003 	.word	0x00040003
     5d0:	00080003 	.word	0x00080003
     5d4:	00100003 	.word	0x00100003
     5d8:	000c0003 	.word	0x000c0003
     5dc:	00160003 	.word	0x00160003

000005e0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5e0:	b530      	push	{r4, r5, lr}
     5e2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5e4:	4b0b      	ldr	r3, [pc, #44]	; (614 <_sercom_get_sercom_inst_index+0x34>)
     5e6:	466a      	mov	r2, sp
     5e8:	cb32      	ldmia	r3!, {r1, r4, r5}
     5ea:	c232      	stmia	r2!, {r1, r4, r5}
     5ec:	cb32      	ldmia	r3!, {r1, r4, r5}
     5ee:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5f0:	9b00      	ldr	r3, [sp, #0]
     5f2:	4283      	cmp	r3, r0
     5f4:	d00b      	beq.n	60e <_sercom_get_sercom_inst_index+0x2e>
     5f6:	2301      	movs	r3, #1
     5f8:	009a      	lsls	r2, r3, #2
     5fa:	4669      	mov	r1, sp
     5fc:	5852      	ldr	r2, [r2, r1]
     5fe:	4282      	cmp	r2, r0
     600:	d006      	beq.n	610 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     602:	3301      	adds	r3, #1
     604:	2b06      	cmp	r3, #6
     606:	d1f7      	bne.n	5f8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     608:	2000      	movs	r0, #0
}
     60a:	b007      	add	sp, #28
     60c:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     60e:	2300      	movs	r3, #0
			return i;
     610:	b2d8      	uxtb	r0, r3
     612:	e7fa      	b.n	60a <_sercom_get_sercom_inst_index+0x2a>
     614:	00001d68 	.word	0x00001d68

00000618 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
     618:	b5f0      	push	{r4, r5, r6, r7, lr}
     61a:	46d6      	mov	lr, sl
     61c:	464f      	mov	r7, r9
     61e:	b580      	push	{r7, lr}
     620:	b08b      	sub	sp, #44	; 0x2c
     622:	4681      	mov	r9, r0
     624:	000f      	movs	r7, r1
     626:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
     628:	0003      	movs	r3, r0
     62a:	6019      	str	r1, [r3, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
     62c:	680b      	ldr	r3, [r1, #0]
     62e:	079b      	lsls	r3, r3, #30
     630:	d409      	bmi.n	646 <spi_init+0x2e>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     632:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
     634:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
     636:	07db      	lsls	r3, r3, #31
     638:	d400      	bmi.n	63c <spi_init+0x24>
     63a:	e0b1      	b.n	7a0 <spi_init+0x188>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
     63c:	b00b      	add	sp, #44	; 0x2c
     63e:	bc0c      	pop	{r2, r3}
     640:	4691      	mov	r9, r2
     642:	469a      	mov	sl, r3
     644:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
     646:	6a93      	ldr	r3, [r2, #40]	; 0x28
     648:	9305      	str	r3, [sp, #20]
     64a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
     64c:	9306      	str	r3, [sp, #24]
     64e:	6b13      	ldr	r3, [r2, #48]	; 0x30
     650:	9307      	str	r3, [sp, #28]
     652:	6b53      	ldr	r3, [r2, #52]	; 0x34
     654:	9308      	str	r3, [sp, #32]
     656:	2600      	movs	r6, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     658:	ab05      	add	r3, sp, #20
     65a:	9301      	str	r3, [sp, #4]
     65c:	e00a      	b.n	674 <spi_init+0x5c>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     65e:	0038      	movs	r0, r7
     660:	4baf      	ldr	r3, [pc, #700]	; (920 <spi_init+0x308>)
     662:	4798      	blx	r3
     664:	e00c      	b.n	680 <spi_init+0x68>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
     666:	230f      	movs	r3, #15
     668:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
     66a:	4281      	cmp	r1, r0
     66c:	d12d      	bne.n	6ca <spi_init+0xb2>
     66e:	3601      	adds	r6, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     670:	2e04      	cmp	r6, #4
     672:	d02f      	beq.n	6d4 <spi_init+0xbc>
     674:	b2f1      	uxtb	r1, r6
		uint32_t current_pinmux = pad_pinmuxes[pad];
     676:	00b3      	lsls	r3, r6, #2
     678:	9a01      	ldr	r2, [sp, #4]
     67a:	5898      	ldr	r0, [r3, r2]
		if (current_pinmux == PINMUX_DEFAULT) {
     67c:	2800      	cmp	r0, #0
     67e:	d0ee      	beq.n	65e <spi_init+0x46>
		if (current_pinmux == PINMUX_UNUSED) {
     680:	1c43      	adds	r3, r0, #1
     682:	d0f4      	beq.n	66e <spi_init+0x56>
		if ((current_pinmux & 0xFFFF) !=
     684:	0401      	lsls	r1, r0, #16
     686:	0c09      	lsrs	r1, r1, #16
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
     688:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
     68a:	b2c3      	uxtb	r3, r0
     68c:	469c      	mov	ip, r3
		return NULL;
     68e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     690:	0602      	lsls	r2, r0, #24
     692:	d405      	bmi.n	6a0 <spi_init+0x88>
		return &(ports[port_index]->Group[group_index]);
     694:	4663      	mov	r3, ip
     696:	095b      	lsrs	r3, r3, #5
     698:	01db      	lsls	r3, r3, #7
     69a:	4aa2      	ldr	r2, [pc, #648]	; (924 <spi_init+0x30c>)
     69c:	4692      	mov	sl, r2
     69e:	4453      	add	r3, sl
	uint32_t pin_index = (gpio_pin % 32);
     6a0:	221f      	movs	r2, #31
     6a2:	4660      	mov	r0, ip
     6a4:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     6a6:	1898      	adds	r0, r3, r2
     6a8:	3040      	adds	r0, #64	; 0x40
     6aa:	7800      	ldrb	r0, [r0, #0]
     6ac:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
     6ae:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
     6b0:	4655      	mov	r5, sl
     6b2:	07ed      	lsls	r5, r5, #31
     6b4:	d5d9      	bpl.n	66a <spi_init+0x52>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
     6b6:	0852      	lsrs	r2, r2, #1
     6b8:	189b      	adds	r3, r3, r2
     6ba:	3330      	adds	r3, #48	; 0x30
     6bc:	7818      	ldrb	r0, [r3, #0]
     6be:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
     6c0:	4663      	mov	r3, ip
     6c2:	07db      	lsls	r3, r3, #31
     6c4:	d5cf      	bpl.n	666 <spi_init+0x4e>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
     6c6:	0900      	lsrs	r0, r0, #4
     6c8:	e7cf      	b.n	66a <spi_init+0x52>
			module->hw = NULL;
     6ca:	2300      	movs	r3, #0
     6cc:	464a      	mov	r2, r9
     6ce:	6013      	str	r3, [r2, #0]
			return STATUS_ERR_DENIED;
     6d0:	201c      	movs	r0, #28
     6d2:	e7b3      	b.n	63c <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
     6d4:	2013      	movs	r0, #19
     6d6:	4b94      	ldr	r3, [pc, #592]	; (928 <spi_init+0x310>)
     6d8:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     6da:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
     6dc:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
     6de:	2a01      	cmp	r2, #1
     6e0:	d016      	beq.n	710 <spi_init+0xf8>
	if (config->mode == SPI_MODE_SLAVE) {
     6e2:	7821      	ldrb	r1, [r4, #0]
     6e4:	2900      	cmp	r1, #0
     6e6:	d127      	bne.n	738 <spi_init+0x120>
		if (spi_module->CTRLA.reg != addr) {
     6e8:	683b      	ldr	r3, [r7, #0]
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     6ea:	7fe2      	ldrb	r2, [r4, #31]
     6ec:	0412      	lsls	r2, r2, #16
		addr |= (config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     6ee:	7fa0      	ldrb	r0, [r4, #30]
     6f0:	4302      	orrs	r2, r0
			return STATUS_ERR_DENIED;
     6f2:	201c      	movs	r0, #28
		if (spi_module->CTRLA.reg != addr) {
     6f4:	429a      	cmp	r2, r3
     6f6:	d1a1      	bne.n	63c <spi_init+0x24>
		ctrla |= config->mode_specific.slave.frame_format;
     6f8:	69a3      	ldr	r3, [r4, #24]
		ctrlb |= config->mode_specific.slave.address_mode;
     6fa:	8ba2      	ldrh	r2, [r4, #28]
		if (config->mode_specific.slave.preload_enable) {
     6fc:	3004      	adds	r0, #4
     6fe:	5c20      	ldrb	r0, [r4, r0]
     700:	2800      	cmp	r0, #0
     702:	d001      	beq.n	708 <spi_init+0xf0>
     704:	2040      	movs	r0, #64	; 0x40
     706:	4302      	orrs	r2, r0
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x2);
     708:	2008      	movs	r0, #8
     70a:	4303      	orrs	r3, r0
     70c:	431d      	orrs	r5, r3
     70e:	e014      	b.n	73a <spi_init+0x122>
		enum status_code error_code = _sercom_get_sync_baud_val(
     710:	aa04      	add	r2, sp, #16
     712:	0001      	movs	r1, r0
     714:	69a0      	ldr	r0, [r4, #24]
     716:	4b85      	ldr	r3, [pc, #532]	; (92c <spi_init+0x314>)
     718:	4798      	blx	r3
     71a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     71c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     71e:	2b00      	cmp	r3, #0
     720:	d000      	beq.n	724 <spi_init+0x10c>
     722:	e78b      	b.n	63c <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     724:	7b3b      	ldrb	r3, [r7, #12]
     726:	b2db      	uxtb	r3, r3
     728:	aa04      	add	r2, sp, #16
     72a:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
     72c:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
     72e:	429a      	cmp	r2, r3
     730:	d000      	beq.n	734 <spi_init+0x11c>
     732:	e783      	b.n	63c <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
     734:	350c      	adds	r5, #12
     736:	e7d4      	b.n	6e2 <spi_init+0xca>
	uint32_t ctrlb = 0;
     738:	2200      	movs	r2, #0
	ctrla |= config->mux_setting;
     73a:	6863      	ldr	r3, [r4, #4]
     73c:	68a0      	ldr	r0, [r4, #8]
     73e:	4303      	orrs	r3, r0
     740:	68e0      	ldr	r0, [r4, #12]
     742:	4303      	orrs	r3, r0
     744:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
     746:	7c20      	ldrb	r0, [r4, #16]
     748:	4302      	orrs	r2, r0
	if (config->run_in_standby) {
     74a:	7c60      	ldrb	r0, [r4, #17]
     74c:	2800      	cmp	r0, #0
     74e:	d001      	beq.n	754 <spi_init+0x13c>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     750:	2080      	movs	r0, #128	; 0x80
     752:	4303      	orrs	r3, r0
	if (config->receiver_enable) {
     754:	7ca0      	ldrb	r0, [r4, #18]
     756:	2800      	cmp	r0, #0
     758:	d002      	beq.n	760 <spi_init+0x148>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     75a:	2080      	movs	r0, #128	; 0x80
     75c:	0280      	lsls	r0, r0, #10
     75e:	4302      	orrs	r2, r0
	if (config->select_slave_low_detect_enable) {
     760:	7ce0      	ldrb	r0, [r4, #19]
     762:	2800      	cmp	r0, #0
     764:	d002      	beq.n	76c <spi_init+0x154>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     766:	2080      	movs	r0, #128	; 0x80
     768:	0080      	lsls	r0, r0, #2
     76a:	4302      	orrs	r2, r0
	if (config->master_slave_select_enable) {
     76c:	7d20      	ldrb	r0, [r4, #20]
     76e:	2800      	cmp	r0, #0
     770:	d002      	beq.n	778 <spi_init+0x160>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     772:	2080      	movs	r0, #128	; 0x80
     774:	0180      	lsls	r0, r0, #6
     776:	4302      	orrs	r2, r0
	if (spi_module->CTRLA.reg == ctrla &&
     778:	6838      	ldr	r0, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
     77a:	2502      	movs	r5, #2
     77c:	432b      	orrs	r3, r5
	if (spi_module->CTRLA.reg == ctrla &&
     77e:	4283      	cmp	r3, r0
     780:	d004      	beq.n	78c <spi_init+0x174>
	module->hw = NULL;
     782:	2300      	movs	r3, #0
     784:	464a      	mov	r2, r9
     786:	6013      	str	r3, [r2, #0]
	return STATUS_ERR_DENIED;
     788:	201c      	movs	r0, #28
     78a:	e757      	b.n	63c <spi_init+0x24>
			spi_module->CTRLB.reg == ctrlb) {
     78c:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
     78e:	4293      	cmp	r3, r2
     790:	d1f7      	bne.n	782 <spi_init+0x16a>
		module->mode           = config->mode;
     792:	464b      	mov	r3, r9
     794:	7159      	strb	r1, [r3, #5]
		module->character_size = config->character_size;
     796:	7c23      	ldrb	r3, [r4, #16]
     798:	464a      	mov	r2, r9
     79a:	7193      	strb	r3, [r2, #6]
		return STATUS_OK;
     79c:	2000      	movs	r0, #0
     79e:	e74d      	b.n	63c <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7a0:	0008      	movs	r0, r1
     7a2:	4b63      	ldr	r3, [pc, #396]	; (930 <spi_init+0x318>)
     7a4:	4798      	blx	r3
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     7a6:	4a63      	ldr	r2, [pc, #396]	; (934 <spi_init+0x31c>)
     7a8:	6a11      	ldr	r1, [r2, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     7aa:	1c85      	adds	r5, r0, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     7ac:	2301      	movs	r3, #1
     7ae:	40ab      	lsls	r3, r5
     7b0:	430b      	orrs	r3, r1
     7b2:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     7b4:	a909      	add	r1, sp, #36	; 0x24
     7b6:	2624      	movs	r6, #36	; 0x24
     7b8:	5da3      	ldrb	r3, [r4, r6]
     7ba:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7bc:	3014      	adds	r0, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7be:	b2c5      	uxtb	r5, r0
     7c0:	0028      	movs	r0, r5
     7c2:	4b5d      	ldr	r3, [pc, #372]	; (938 <spi_init+0x320>)
     7c4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     7c6:	0028      	movs	r0, r5
     7c8:	4b5c      	ldr	r3, [pc, #368]	; (93c <spi_init+0x324>)
     7ca:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     7cc:	5da0      	ldrb	r0, [r4, r6]
     7ce:	2100      	movs	r1, #0
     7d0:	4b5b      	ldr	r3, [pc, #364]	; (940 <spi_init+0x328>)
     7d2:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
     7d4:	7823      	ldrb	r3, [r4, #0]
     7d6:	2b01      	cmp	r3, #1
     7d8:	d020      	beq.n	81c <spi_init+0x204>
	if (config->mode == SPI_MODE_SLAVE) {
     7da:	7823      	ldrb	r3, [r4, #0]
     7dc:	2b00      	cmp	r3, #0
     7de:	d103      	bne.n	7e8 <spi_init+0x1d0>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x2);
     7e0:	683b      	ldr	r3, [r7, #0]
     7e2:	2208      	movs	r2, #8
     7e4:	4313      	orrs	r3, r2
     7e6:	603b      	str	r3, [r7, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
     7e8:	464b      	mov	r3, r9
     7ea:	681e      	ldr	r6, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     7ec:	ab04      	add	r3, sp, #16
     7ee:	2280      	movs	r2, #128	; 0x80
     7f0:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     7f2:	2200      	movs	r2, #0
     7f4:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     7f6:	2101      	movs	r1, #1
     7f8:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
     7fa:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
     7fc:	7823      	ldrb	r3, [r4, #0]
     7fe:	2b00      	cmp	r3, #0
     800:	d101      	bne.n	806 <spi_init+0x1ee>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     802:	ab04      	add	r3, sp, #16
     804:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     806:	6aa3      	ldr	r3, [r4, #40]	; 0x28
     808:	9305      	str	r3, [sp, #20]
     80a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     80c:	9306      	str	r3, [sp, #24]
     80e:	6b23      	ldr	r3, [r4, #48]	; 0x30
     810:	9307      	str	r3, [sp, #28]
     812:	6b63      	ldr	r3, [r4, #52]	; 0x34
     814:	9308      	str	r3, [sp, #32]
     816:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     818:	ad05      	add	r5, sp, #20
     81a:	e011      	b.n	840 <spi_init+0x228>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
     81c:	683b      	ldr	r3, [r7, #0]
     81e:	220c      	movs	r2, #12
     820:	4313      	orrs	r3, r2
     822:	603b      	str	r3, [r7, #0]
     824:	e7d9      	b.n	7da <spi_init+0x1c2>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     826:	0030      	movs	r0, r6
     828:	4b3d      	ldr	r3, [pc, #244]	; (920 <spi_init+0x308>)
     82a:	4798      	blx	r3
     82c:	e00d      	b.n	84a <spi_init+0x232>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     82e:	a904      	add	r1, sp, #16
     830:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     832:	0c00      	lsrs	r0, r0, #16
     834:	b2c0      	uxtb	r0, r0
     836:	4b43      	ldr	r3, [pc, #268]	; (944 <spi_init+0x32c>)
     838:	4798      	blx	r3
     83a:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     83c:	2f04      	cmp	r7, #4
     83e:	d007      	beq.n	850 <spi_init+0x238>
     840:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     842:	00bb      	lsls	r3, r7, #2
     844:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
     846:	2800      	cmp	r0, #0
     848:	d0ed      	beq.n	826 <spi_init+0x20e>
		if (current_pinmux != PINMUX_UNUSED) {
     84a:	1c43      	adds	r3, r0, #1
     84c:	d1ef      	bne.n	82e <spi_init+0x216>
     84e:	e7f4      	b.n	83a <spi_init+0x222>
	module->mode             = config->mode;
     850:	7823      	ldrb	r3, [r4, #0]
     852:	464a      	mov	r2, r9
     854:	7153      	strb	r3, [r2, #5]
	module->character_size   = config->character_size;
     856:	7c23      	ldrb	r3, [r4, #16]
     858:	7193      	strb	r3, [r2, #6]
	module->receiver_enabled = config->receiver_enable;
     85a:	7ca3      	ldrb	r3, [r4, #18]
     85c:	71d3      	strb	r3, [r2, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
     85e:	7d23      	ldrb	r3, [r4, #20]
     860:	7213      	strb	r3, [r2, #8]
	uint16_t baud = 0;
     862:	2200      	movs	r2, #0
     864:	ab02      	add	r3, sp, #8
     866:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
     868:	7823      	ldrb	r3, [r4, #0]
     86a:	2b01      	cmp	r3, #1
     86c:	d012      	beq.n	894 <spi_init+0x27c>
	if (config->mode == SPI_MODE_SLAVE) {
     86e:	7823      	ldrb	r3, [r4, #0]
     870:	2b00      	cmp	r3, #0
     872:	d127      	bne.n	8c4 <spi_init+0x2ac>
		ctrla = config->mode_specific.slave.frame_format;
     874:	69a0      	ldr	r0, [r4, #24]
		ctrlb = config->mode_specific.slave.address_mode;
     876:	8ba2      	ldrh	r2, [r4, #28]
		spi_module->ADDR.reg |=
     878:	6a73      	ldr	r3, [r6, #36]	; 0x24
				(config->mode_specific.slave.address_mask << SERCOM_SPI_ADDR_ADDRMASK_Pos);
     87a:	7fe1      	ldrb	r1, [r4, #31]
     87c:	0409      	lsls	r1, r1, #16
				(config->mode_specific.slave.address      << SERCOM_SPI_ADDR_ADDR_Pos) |
     87e:	7fa5      	ldrb	r5, [r4, #30]
     880:	4329      	orrs	r1, r5
		spi_module->ADDR.reg |=
     882:	4319      	orrs	r1, r3
     884:	6271      	str	r1, [r6, #36]	; 0x24
		if (config->mode_specific.slave.preload_enable) {
     886:	2320      	movs	r3, #32
     888:	5ce3      	ldrb	r3, [r4, r3]
     88a:	2b00      	cmp	r3, #0
     88c:	d01c      	beq.n	8c8 <spi_init+0x2b0>
			ctrlb |= SERCOM_SPI_CTRLB_PLOADEN;
     88e:	2340      	movs	r3, #64	; 0x40
     890:	431a      	orrs	r2, r3
     892:	e019      	b.n	8c8 <spi_init+0x2b0>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     894:	464b      	mov	r3, r9
     896:	6818      	ldr	r0, [r3, #0]
     898:	4b25      	ldr	r3, [pc, #148]	; (930 <spi_init+0x318>)
     89a:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     89c:	3014      	adds	r0, #20
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
     89e:	b2c0      	uxtb	r0, r0
     8a0:	4b21      	ldr	r3, [pc, #132]	; (928 <spi_init+0x310>)
     8a2:	4798      	blx	r3
     8a4:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
     8a6:	ab02      	add	r3, sp, #8
     8a8:	1d9a      	adds	r2, r3, #6
     8aa:	69a0      	ldr	r0, [r4, #24]
     8ac:	4b1f      	ldr	r3, [pc, #124]	; (92c <spi_init+0x314>)
     8ae:	4798      	blx	r3
     8b0:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
     8b2:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
     8b4:	2b00      	cmp	r3, #0
     8b6:	d000      	beq.n	8ba <spi_init+0x2a2>
     8b8:	e6c0      	b.n	63c <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
     8ba:	ab02      	add	r3, sp, #8
     8bc:	3306      	adds	r3, #6
     8be:	781b      	ldrb	r3, [r3, #0]
     8c0:	7333      	strb	r3, [r6, #12]
     8c2:	e7d4      	b.n	86e <spi_init+0x256>
	uint32_t ctrlb = 0;
     8c4:	2200      	movs	r2, #0
	uint32_t ctrla = 0;
     8c6:	2000      	movs	r0, #0
	ctrla |= config->mux_setting;
     8c8:	6863      	ldr	r3, [r4, #4]
     8ca:	68a1      	ldr	r1, [r4, #8]
     8cc:	430b      	orrs	r3, r1
     8ce:	68e1      	ldr	r1, [r4, #12]
     8d0:	430b      	orrs	r3, r1
     8d2:	4303      	orrs	r3, r0
	ctrlb |= config->character_size;
     8d4:	7c21      	ldrb	r1, [r4, #16]
     8d6:	430a      	orrs	r2, r1
	if (config->run_in_standby || system_is_debugger_present()) {
     8d8:	7c61      	ldrb	r1, [r4, #17]
     8da:	2900      	cmp	r1, #0
     8dc:	d103      	bne.n	8e6 <spi_init+0x2ce>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8de:	491a      	ldr	r1, [pc, #104]	; (948 <spi_init+0x330>)
     8e0:	7889      	ldrb	r1, [r1, #2]
     8e2:	0789      	lsls	r1, r1, #30
     8e4:	d501      	bpl.n	8ea <spi_init+0x2d2>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
     8e6:	2180      	movs	r1, #128	; 0x80
     8e8:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
     8ea:	7ca1      	ldrb	r1, [r4, #18]
     8ec:	2900      	cmp	r1, #0
     8ee:	d002      	beq.n	8f6 <spi_init+0x2de>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
     8f0:	2180      	movs	r1, #128	; 0x80
     8f2:	0289      	lsls	r1, r1, #10
     8f4:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
     8f6:	7ce1      	ldrb	r1, [r4, #19]
     8f8:	2900      	cmp	r1, #0
     8fa:	d002      	beq.n	902 <spi_init+0x2ea>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
     8fc:	2180      	movs	r1, #128	; 0x80
     8fe:	0089      	lsls	r1, r1, #2
     900:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
     902:	7d21      	ldrb	r1, [r4, #20]
     904:	2900      	cmp	r1, #0
     906:	d002      	beq.n	90e <spi_init+0x2f6>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
     908:	2180      	movs	r1, #128	; 0x80
     90a:	0189      	lsls	r1, r1, #6
     90c:	430a      	orrs	r2, r1
	spi_module->CTRLA.reg |= ctrla;
     90e:	6831      	ldr	r1, [r6, #0]
     910:	430b      	orrs	r3, r1
     912:	6033      	str	r3, [r6, #0]
	spi_module->CTRLB.reg |= ctrlb;
     914:	6873      	ldr	r3, [r6, #4]
     916:	431a      	orrs	r2, r3
     918:	6072      	str	r2, [r6, #4]
	return STATUS_OK;
     91a:	2000      	movs	r0, #0
     91c:	e68e      	b.n	63c <spi_init+0x24>
     91e:	46c0      	nop			; (mov r8, r8)
     920:	00000469 	.word	0x00000469
     924:	41004400 	.word	0x41004400
     928:	0000168d 	.word	0x0000168d
     92c:	000003f5 	.word	0x000003f5
     930:	000005e1 	.word	0x000005e1
     934:	40000400 	.word	0x40000400
     938:	00001671 	.word	0x00001671
     93c:	000015e5 	.word	0x000015e5
     940:	0000041d 	.word	0x0000041d
     944:	00001769 	.word	0x00001769
     948:	41002000 	.word	0x41002000

0000094c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
     94c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
     94e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
     950:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
     952:	2c01      	cmp	r4, #1
     954:	d001      	beq.n	95a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
     956:	0018      	movs	r0, r3
     958:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
     95a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
     95c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
     95e:	2c00      	cmp	r4, #0
     960:	d1f9      	bne.n	956 <spi_select_slave+0xa>
		if (select) {
     962:	2a00      	cmp	r2, #0
     964:	d058      	beq.n	a18 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
     966:	784b      	ldrb	r3, [r1, #1]
     968:	2b00      	cmp	r3, #0
     96a:	d044      	beq.n	9f6 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     96c:	6803      	ldr	r3, [r0, #0]
     96e:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
     970:	07db      	lsls	r3, r3, #31
     972:	d410      	bmi.n	996 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
     974:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     976:	09d1      	lsrs	r1, r2, #7
		return NULL;
     978:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     97a:	2900      	cmp	r1, #0
     97c:	d104      	bne.n	988 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
     97e:	0953      	lsrs	r3, r2, #5
     980:	01db      	lsls	r3, r3, #7
     982:	492e      	ldr	r1, [pc, #184]	; (a3c <spi_select_slave+0xf0>)
     984:	468c      	mov	ip, r1
     986:	4463      	add	r3, ip
static inline void port_pin_set_output_level(
		const uint8_t gpio_pin,
		const bool level)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     988:	211f      	movs	r1, #31
     98a:	4011      	ands	r1, r2
     98c:	2201      	movs	r2, #1
     98e:	408a      	lsls	r2, r1

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     990:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
     992:	2305      	movs	r3, #5
     994:	e7df      	b.n	956 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     996:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     998:	09d4      	lsrs	r4, r2, #7
		return NULL;
     99a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     99c:	2c00      	cmp	r4, #0
     99e:	d104      	bne.n	9aa <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
     9a0:	0953      	lsrs	r3, r2, #5
     9a2:	01db      	lsls	r3, r3, #7
     9a4:	4c25      	ldr	r4, [pc, #148]	; (a3c <spi_select_slave+0xf0>)
     9a6:	46a4      	mov	ip, r4
     9a8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     9aa:	241f      	movs	r4, #31
     9ac:	4014      	ands	r4, r2
     9ae:	2201      	movs	r2, #1
     9b0:	40a2      	lsls	r2, r4
	} else {
		port_base->OUTCLR.reg = pin_mask;
     9b2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
     9b4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     9b6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
     9b8:	07d2      	lsls	r2, r2, #31
     9ba:	d501      	bpl.n	9c0 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     9bc:	788a      	ldrb	r2, [r1, #2]
     9be:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
     9c0:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
     9c2:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
     9c4:	2a00      	cmp	r2, #0
     9c6:	d1c6      	bne.n	956 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
     9c8:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
     9ca:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
     9cc:	7e13      	ldrb	r3, [r2, #24]
     9ce:	420b      	tst	r3, r1
     9d0:	d0fc      	beq.n	9cc <spi_select_slave+0x80>
     9d2:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
     9d4:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
     9d6:	0749      	lsls	r1, r1, #29
     9d8:	d5bd      	bpl.n	956 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
     9da:	8b53      	ldrh	r3, [r2, #26]
     9dc:	075b      	lsls	r3, r3, #29
     9de:	d501      	bpl.n	9e4 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
     9e0:	2304      	movs	r3, #4
     9e2:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
     9e4:	7983      	ldrb	r3, [r0, #6]
     9e6:	2b01      	cmp	r3, #1
     9e8:	d002      	beq.n	9f0 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
     9ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
     9ec:	2300      	movs	r3, #0
     9ee:	e7b2      	b.n	956 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
     9f0:	6a93      	ldr	r3, [r2, #40]	; 0x28
     9f2:	2300      	movs	r3, #0
     9f4:	e7af      	b.n	956 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
     9f6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     9f8:	09d1      	lsrs	r1, r2, #7
		return NULL;
     9fa:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     9fc:	2900      	cmp	r1, #0
     9fe:	d104      	bne.n	a0a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
     a00:	0953      	lsrs	r3, r2, #5
     a02:	01db      	lsls	r3, r3, #7
     a04:	490d      	ldr	r1, [pc, #52]	; (a3c <spi_select_slave+0xf0>)
     a06:	468c      	mov	ip, r1
     a08:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a0a:	211f      	movs	r1, #31
     a0c:	4011      	ands	r1, r2
     a0e:	2201      	movs	r2, #1
     a10:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
     a12:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
     a14:	2300      	movs	r3, #0
     a16:	e79e      	b.n	956 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
     a18:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
     a1a:	09d1      	lsrs	r1, r2, #7
		return NULL;
     a1c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
     a1e:	2900      	cmp	r1, #0
     a20:	d104      	bne.n	a2c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
     a22:	0953      	lsrs	r3, r2, #5
     a24:	01db      	lsls	r3, r3, #7
     a26:	4905      	ldr	r1, [pc, #20]	; (a3c <spi_select_slave+0xf0>)
     a28:	468c      	mov	ip, r1
     a2a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a2c:	211f      	movs	r1, #31
     a2e:	4011      	ands	r1, r2
     a30:	2201      	movs	r2, #1
     a32:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
     a34:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
     a36:	2300      	movs	r3, #0
     a38:	e78d      	b.n	956 <spi_select_slave+0xa>
     a3a:	46c0      	nop			; (mov r8, r8)
     a3c:	41004400 	.word	0x41004400

00000a40 <configure_port_pins>:
	LCD_data(madctl);
}


void configure_port_pins(void)
{
     a40:	b500      	push	{lr}
     a42:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     a44:	a901      	add	r1, sp, #4
     a46:	2301      	movs	r3, #1
     a48:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
     a4a:	2200      	movs	r2, #0
     a4c:	708a      	strb	r2, [r1, #2]
	struct port_config config_port_pin;
	port_get_config_defaults(&config_port_pin);
	config_port_pin.direction = PORT_PIN_DIR_OUTPUT;
     a4e:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(PIN_PA16, &config_port_pin);
     a50:	2010      	movs	r0, #16
     a52:	4b02      	ldr	r3, [pc, #8]	; (a5c <configure_port_pins+0x1c>)
     a54:	4798      	blx	r3
}
     a56:	b003      	add	sp, #12
     a58:	bd00      	pop	{pc}
     a5a:	46c0      	nop			; (mov r8, r8)
     a5c:	00001009 	.word	0x00001009

00000a60 <configure_spi_master>:
struct spi_module spi_master_instance;
struct spi_slave_inst slave;


void configure_spi_master(void)
{
     a60:	b530      	push	{r4, r5, lr}
     a62:	b091      	sub	sp, #68	; 0x44
	slave->ss_pin          = config->ss_pin;
     a64:	4c24      	ldr	r4, [pc, #144]	; (af8 <configure_spi_master+0x98>)
     a66:	2311      	movs	r3, #17
     a68:	7023      	strb	r3, [r4, #0]
	slave->address_enabled = config->address_enabled;
     a6a:	2300      	movs	r3, #0
     a6c:	7063      	strb	r3, [r4, #1]
	slave->address         = config->address;
     a6e:	70a3      	strb	r3, [r4, #2]
	config->input_pull = PORT_PIN_PULL_UP;
     a70:	a901      	add	r1, sp, #4
     a72:	2201      	movs	r2, #1
     a74:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
     a76:	708b      	strb	r3, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
     a78:	700a      	strb	r2, [r1, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
     a7a:	2011      	movs	r0, #17
     a7c:	4b1f      	ldr	r3, [pc, #124]	; (afc <configure_spi_master+0x9c>)
     a7e:	4798      	blx	r3
	port_pin_set_output_level(slave->ss_pin, true);
     a80:	7823      	ldrb	r3, [r4, #0]
	if (port_index < PORT_INST_NUM) {
     a82:	09d9      	lsrs	r1, r3, #7
		return NULL;
     a84:	2200      	movs	r2, #0
	if (port_index < PORT_INST_NUM) {
     a86:	2900      	cmp	r1, #0
     a88:	d104      	bne.n	a94 <configure_spi_master+0x34>
		return &(ports[port_index]->Group[group_index]);
     a8a:	095a      	lsrs	r2, r3, #5
     a8c:	01d2      	lsls	r2, r2, #7
     a8e:	491c      	ldr	r1, [pc, #112]	; (b00 <configure_spi_master+0xa0>)
     a90:	468c      	mov	ip, r1
     a92:	4462      	add	r2, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
     a94:	211f      	movs	r1, #31
     a96:	4019      	ands	r1, r3
     a98:	2301      	movs	r3, #1
     a9a:	0018      	movs	r0, r3
     a9c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
     a9e:	6190      	str	r0, [r2, #24]
	config->mode             = SPI_MODE_MASTER;
     aa0:	ac02      	add	r4, sp, #8
     aa2:	7023      	strb	r3, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
     aa4:	2500      	movs	r5, #0
     aa6:	9503      	str	r5, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
     aa8:	9504      	str	r5, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
     aaa:	7425      	strb	r5, [r4, #16]
	config->run_in_standby   = false;
     aac:	7465      	strb	r5, [r4, #17]
	config->receiver_enable  = true;
     aae:	74a3      	strb	r3, [r4, #18]
	config->select_slave_low_detect_enable= true;
     ab0:	74e3      	strb	r3, [r4, #19]
	config->master_slave_select_enable= false;
     ab2:	7525      	strb	r5, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
     ab4:	3323      	adds	r3, #35	; 0x23
     ab6:	54e5      	strb	r5, [r4, r3]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
     ab8:	220c      	movs	r2, #12
     aba:	2100      	movs	r1, #0
     abc:	a808      	add	r0, sp, #32
     abe:	4b11      	ldr	r3, [pc, #68]	; (b04 <configure_spi_master+0xa4>)
     ac0:	4798      	blx	r3
	slave_dev_config.ss_pin = SLAVE_SELECT_PIN;
	spi_attach_slave(&slave, &slave_dev_config);
	/* Configure, initialize and enable SERCOM SPI module */
	spi_get_config_defaults(&config_spi_master);
	/*config_spi_master.transfer_mode = SPI_TRANSFER_MODE_1;*/
	config_spi_master.mux_setting = CONF_MASTER_MUX_SETTING;
     ac2:	60e5      	str	r5, [r4, #12]
	config_spi_master.pinmux_pad0 = CONF_MASTER_PINMUX_PAD0;
     ac4:	4b10      	ldr	r3, [pc, #64]	; (b08 <configure_spi_master+0xa8>)
     ac6:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = CONF_MASTER_PINMUX_PAD1;
     ac8:	4b10      	ldr	r3, [pc, #64]	; (b0c <configure_spi_master+0xac>)
     aca:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = CONF_MASTER_PINMUX_PAD2;
     acc:	2301      	movs	r3, #1
     ace:	425b      	negs	r3, r3
     ad0:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = CONF_MASTER_PINMUX_PAD3;
     ad2:	6363      	str	r3, [r4, #52]	; 0x34
	config_spi_master.mode_specific.master.baudrate =  12000000; //12MHz  = 400ns per signal
     ad4:	4b0e      	ldr	r3, [pc, #56]	; (b10 <configure_spi_master+0xb0>)
     ad6:	61a3      	str	r3, [r4, #24]
	spi_init(&spi_master_instance, CONF_MASTER_SPI_MODULE, &config_spi_master);
     ad8:	4d0e      	ldr	r5, [pc, #56]	; (b14 <configure_spi_master+0xb4>)
     ada:	0022      	movs	r2, r4
     adc:	490e      	ldr	r1, [pc, #56]	; (b18 <configure_spi_master+0xb8>)
     ade:	0028      	movs	r0, r5
     ae0:	4b0e      	ldr	r3, [pc, #56]	; (b1c <configure_spi_master+0xbc>)
     ae2:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
     ae4:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
     ae6:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
     ae8:	2b00      	cmp	r3, #0
     aea:	d1fc      	bne.n	ae6 <configure_spi_master+0x86>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
     aec:	6813      	ldr	r3, [r2, #0]
     aee:	2102      	movs	r1, #2
     af0:	430b      	orrs	r3, r1
     af2:	6013      	str	r3, [r2, #0]
	spi_enable(&spi_master_instance);
}
     af4:	b011      	add	sp, #68	; 0x44
     af6:	bd30      	pop	{r4, r5, pc}
     af8:	2000009c 	.word	0x2000009c
     afc:	00001009 	.word	0x00001009
     b00:	41004400 	.word	0x41004400
     b04:	00001d21 	.word	0x00001d21
     b08:	00040003 	.word	0x00040003
     b0c:	00050003 	.word	0x00050003
     b10:	00b71b00 	.word	0x00b71b00
     b14:	20000090 	.word	0x20000090
     b18:	42000800 	.word	0x42000800
     b1c:	00000619 	.word	0x00000619

00000b20 <spi_io>:
	SercomSpi *const spi_module = &(module->hw->SPI);
     b20:	4b03      	ldr	r3, [pc, #12]	; (b30 <spi_io+0x10>)
     b22:	681b      	ldr	r3, [r3, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
     b24:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
     b26:	07d2      	lsls	r2, r2, #31
     b28:	d500      	bpl.n	b2c <spi_io+0xc>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
     b2a:	6298      	str	r0, [r3, #40]	; 0x28


void spi_io(unsigned char o) {
	spi_write(&spi_master_instance,o);
}
     b2c:	4770      	bx	lr
     b2e:	46c0      	nop			; (mov r8, r8)
     b30:	20000090 	.word	0x20000090

00000b34 <LCD_command>:

void LCD_command(unsigned char com) {
     b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b36:	0007      	movs	r7, r0
		port_base->OUTCLR.reg = pin_mask;
     b38:	2280      	movs	r2, #128	; 0x80
     b3a:	0252      	lsls	r2, r2, #9
     b3c:	4b08      	ldr	r3, [pc, #32]	; (b60 <LCD_command+0x2c>)
     b3e:	615a      	str	r2, [r3, #20]
	port_pin_set_output_level(DAT_PIN,false);
	spi_select_slave(&spi_master_instance, &slave, true);
     b40:	4e08      	ldr	r6, [pc, #32]	; (b64 <LCD_command+0x30>)
     b42:	4d09      	ldr	r5, [pc, #36]	; (b68 <LCD_command+0x34>)
     b44:	2201      	movs	r2, #1
     b46:	0031      	movs	r1, r6
     b48:	0028      	movs	r0, r5
     b4a:	4c08      	ldr	r4, [pc, #32]	; (b6c <LCD_command+0x38>)
     b4c:	47a0      	blx	r4
	spi_io(com);
     b4e:	0038      	movs	r0, r7
     b50:	4b07      	ldr	r3, [pc, #28]	; (b70 <LCD_command+0x3c>)
     b52:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
     b54:	2200      	movs	r2, #0
     b56:	0031      	movs	r1, r6
     b58:	0028      	movs	r0, r5
     b5a:	47a0      	blx	r4
}
     b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b5e:	46c0      	nop			; (mov r8, r8)
     b60:	41004400 	.word	0x41004400
     b64:	2000009c 	.word	0x2000009c
     b68:	20000090 	.word	0x20000090
     b6c:	0000094d 	.word	0x0000094d
     b70:	00000b21 	.word	0x00000b21

00000b74 <LCD_data>:

void LCD_data(unsigned char dat) {
     b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b76:	0007      	movs	r7, r0
		port_base->OUTSET.reg = pin_mask;
     b78:	2280      	movs	r2, #128	; 0x80
     b7a:	0252      	lsls	r2, r2, #9
     b7c:	4b08      	ldr	r3, [pc, #32]	; (ba0 <LCD_data+0x2c>)
     b7e:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(DAT_PIN,true);
	spi_select_slave(&spi_master_instance, &slave, true);
     b80:	4e08      	ldr	r6, [pc, #32]	; (ba4 <LCD_data+0x30>)
     b82:	4d09      	ldr	r5, [pc, #36]	; (ba8 <LCD_data+0x34>)
     b84:	2201      	movs	r2, #1
     b86:	0031      	movs	r1, r6
     b88:	0028      	movs	r0, r5
     b8a:	4c08      	ldr	r4, [pc, #32]	; (bac <LCD_data+0x38>)
     b8c:	47a0      	blx	r4
	spi_io(dat);
     b8e:	0038      	movs	r0, r7
     b90:	4b07      	ldr	r3, [pc, #28]	; (bb0 <LCD_data+0x3c>)
     b92:	4798      	blx	r3
	spi_select_slave(&spi_master_instance, &slave, false);
     b94:	2200      	movs	r2, #0
     b96:	0031      	movs	r1, r6
     b98:	0028      	movs	r0, r5
     b9a:	47a0      	blx	r4
}
     b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b9e:	46c0      	nop			; (mov r8, r8)
     ba0:	41004400 	.word	0x41004400
     ba4:	2000009c 	.word	0x2000009c
     ba8:	20000090 	.word	0x20000090
     bac:	0000094d 	.word	0x0000094d
     bb0:	00000b21 	.word	0x00000b21

00000bb4 <LCD_data16>:

void LCD_data16(unsigned short dat) {
     bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     bb6:	b083      	sub	sp, #12
     bb8:	0004      	movs	r4, r0
     bba:	2280      	movs	r2, #128	; 0x80
     bbc:	0252      	lsls	r2, r2, #9
     bbe:	4b0b      	ldr	r3, [pc, #44]	; (bec <LCD_data16+0x38>)
     bc0:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(DAT_PIN,true);
	spi_select_slave(&spi_master_instance, &slave, true);
     bc2:	4e0b      	ldr	r6, [pc, #44]	; (bf0 <LCD_data16+0x3c>)
     bc4:	4d0b      	ldr	r5, [pc, #44]	; (bf4 <LCD_data16+0x40>)
     bc6:	2201      	movs	r2, #1
     bc8:	0031      	movs	r1, r6
     bca:	0028      	movs	r0, r5
     bcc:	4f0a      	ldr	r7, [pc, #40]	; (bf8 <LCD_data16+0x44>)
     bce:	47b8      	blx	r7
	spi_io(dat>>8);
     bd0:	9401      	str	r4, [sp, #4]
     bd2:	0a20      	lsrs	r0, r4, #8
     bd4:	4c09      	ldr	r4, [pc, #36]	; (bfc <LCD_data16+0x48>)
     bd6:	47a0      	blx	r4
	spi_io(dat);
     bd8:	466b      	mov	r3, sp
     bda:	7918      	ldrb	r0, [r3, #4]
     bdc:	47a0      	blx	r4
	spi_select_slave(&spi_master_instance, &slave, false);
     bde:	2200      	movs	r2, #0
     be0:	0031      	movs	r1, r6
     be2:	0028      	movs	r0, r5
     be4:	47b8      	blx	r7
}
     be6:	b003      	add	sp, #12
     be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	41004400 	.word	0x41004400
     bf0:	2000009c 	.word	0x2000009c
     bf4:	20000090 	.word	0x20000090
     bf8:	0000094d 	.word	0x0000094d
     bfc:	00000b21 	.word	0x00000b21

00000c00 <LCD_init>:




void LCD_init() {
     c00:	b570      	push	{r4, r5, r6, lr}
	configure_spi_master();
     c02:	4b71      	ldr	r3, [pc, #452]	; (dc8 <LCD_init+0x1c8>)
     c04:	4798      	blx	r3
	delay_ms(1);
     c06:	2001      	movs	r0, #1
     c08:	4e70      	ldr	r6, [pc, #448]	; (dcc <LCD_init+0x1cc>)
     c0a:	47b0      	blx	r6
  LCD_command(ST7735_SWRESET);//software reset
     c0c:	2001      	movs	r0, #1
     c0e:	4d70      	ldr	r5, [pc, #448]	; (dd0 <LCD_init+0x1d0>)
     c10:	47a8      	blx	r5
  delay_ms(50);
     c12:	2032      	movs	r0, #50	; 0x32
     c14:	47b0      	blx	r6
	LCD_command(ST7735_SLPOUT);//exit sleep
     c16:	2011      	movs	r0, #17
     c18:	47a8      	blx	r5
	delay_ms(5);
     c1a:	2005      	movs	r0, #5
     c1c:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR1);//Frame Rate Control (In normal mode/Full colors)
     c1e:	20b1      	movs	r0, #177	; 0xb1
     c20:	47a8      	blx	r5
	LCD_data(0x01);
     c22:	2001      	movs	r0, #1
     c24:	4c6b      	ldr	r4, [pc, #428]	; (dd4 <LCD_init+0x1d4>)
     c26:	47a0      	blx	r4
	LCD_data(0x2C);
     c28:	202c      	movs	r0, #44	; 0x2c
     c2a:	47a0      	blx	r4
	LCD_data(0x2D);
     c2c:	202d      	movs	r0, #45	; 0x2d
     c2e:	47a0      	blx	r4
	delay_ms(1);
     c30:	2001      	movs	r0, #1
     c32:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR2);//Frame Rate Control (In normal mode/Full colors)
     c34:	20b2      	movs	r0, #178	; 0xb2
     c36:	47a8      	blx	r5
	LCD_data(0x01);
     c38:	2001      	movs	r0, #1
     c3a:	47a0      	blx	r4
	LCD_data(0x2C);
     c3c:	202c      	movs	r0, #44	; 0x2c
     c3e:	47a0      	blx	r4
	LCD_data(0x2D);
     c40:	202d      	movs	r0, #45	; 0x2d
     c42:	47a0      	blx	r4
	delay_ms(1);
     c44:	2001      	movs	r0, #1
     c46:	47b0      	blx	r6
	LCD_command(ST7735_FRMCTR3);//Frame Rate Control (In normal mode/Full colors)
     c48:	20b3      	movs	r0, #179	; 0xb3
     c4a:	47a8      	blx	r5
	LCD_data(0x01);
     c4c:	2001      	movs	r0, #1
     c4e:	47a0      	blx	r4
	LCD_data(0x2C);
     c50:	202c      	movs	r0, #44	; 0x2c
     c52:	47a0      	blx	r4
	LCD_data(0x2D);
     c54:	202d      	movs	r0, #45	; 0x2d
     c56:	47a0      	blx	r4
	LCD_data(0x01);
     c58:	2001      	movs	r0, #1
     c5a:	47a0      	blx	r4
	LCD_data(0x2C);
     c5c:	202c      	movs	r0, #44	; 0x2c
     c5e:	47a0      	blx	r4
	LCD_data(0x2D);
     c60:	202d      	movs	r0, #45	; 0x2d
     c62:	47a0      	blx	r4
	delay_ms(1);
     c64:	2001      	movs	r0, #1
     c66:	47b0      	blx	r6
	LCD_command(ST7735_INVCTR);//display inversion
     c68:	20b4      	movs	r0, #180	; 0xb4
     c6a:	47a8      	blx	r5
	LCD_data(0x07);
     c6c:	2007      	movs	r0, #7
     c6e:	47a0      	blx	r4
	delay_ms(1);
     c70:	2001      	movs	r0, #1
     c72:	47b0      	blx	r6
	LCD_command(ST7735_PWCTR1);
     c74:	20c0      	movs	r0, #192	; 0xc0
     c76:	47a8      	blx	r5
	LCD_data(0x0A);//4.30 - 0x0A
     c78:	200a      	movs	r0, #10
     c7a:	47a0      	blx	r4
	LCD_data(0x02);//0x05
     c7c:	2002      	movs	r0, #2
     c7e:	47a0      	blx	r4
	LCD_data(0x84);//added auto mode
     c80:	2084      	movs	r0, #132	; 0x84
     c82:	47a0      	blx	r4
	delay_ms(1);
     c84:	2001      	movs	r0, #1
     c86:	47b0      	blx	r6
	LCD_command(ST7735_PWCTR2);
     c88:	20c1      	movs	r0, #193	; 0xc1
     c8a:	47a8      	blx	r5
	LCD_data(0xC5);
     c8c:	20c5      	movs	r0, #197	; 0xc5
     c8e:	47a0      	blx	r4
	delay_ms(1);
     c90:	2001      	movs	r0, #1
     c92:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR3);
     c94:	20c2      	movs	r0, #194	; 0xc2
     c96:	47a8      	blx	r5
	LCD_data(0x0A);
     c98:	200a      	movs	r0, #10
     c9a:	47a0      	blx	r4
	LCD_data(0x00);
     c9c:	2000      	movs	r0, #0
     c9e:	47a0      	blx	r4
	delay_ms(1);
     ca0:	2001      	movs	r0, #1
     ca2:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR4);
     ca4:	20c3      	movs	r0, #195	; 0xc3
     ca6:	47a8      	blx	r5
	LCD_data(0x8A);
     ca8:	208a      	movs	r0, #138	; 0x8a
     caa:	47a0      	blx	r4
	LCD_data(0x2A);
     cac:	202a      	movs	r0, #42	; 0x2a
     cae:	47a0      	blx	r4
	delay_ms(1);
     cb0:	2001      	movs	r0, #1
     cb2:	47b0      	blx	r6
	LCD_command( ST7735_PWCTR5);
     cb4:	20c4      	movs	r0, #196	; 0xc4
     cb6:	47a8      	blx	r5
	LCD_data(0x8A);
     cb8:	208a      	movs	r0, #138	; 0x8a
     cba:	47a0      	blx	r4
	LCD_data(0xEE);
     cbc:	20ee      	movs	r0, #238	; 0xee
     cbe:	47a0      	blx	r4
	delay_ms(1);
     cc0:	2001      	movs	r0, #1
     cc2:	47b0      	blx	r6
	LCD_command(ST7735_VMCTR1);
     cc4:	20c5      	movs	r0, #197	; 0xc5
     cc6:	47a8      	blx	r5
	LCD_data(0x0E);
     cc8:	200e      	movs	r0, #14
     cca:	47a0      	blx	r4
	delay_ms(1);
     ccc:	2001      	movs	r0, #1
     cce:	47b0      	blx	r6
	LCD_command(ST7735_INVOFF);
     cd0:	2020      	movs	r0, #32
     cd2:	47a8      	blx	r5
	LCD_command(ST7735_MADCTL);
     cd4:	2036      	movs	r0, #54	; 0x36
     cd6:	47a8      	blx	r5
	LCD_data(0xC8);
     cd8:	20c8      	movs	r0, #200	; 0xc8
     cda:	47a0      	blx	r4
	delay_ms(1);
     cdc:	2001      	movs	r0, #1
     cde:	47b0      	blx	r6
	LCD_command(ST7735_COLMOD);
     ce0:	203a      	movs	r0, #58	; 0x3a
     ce2:	47a8      	blx	r5
	LCD_data(0x05);
     ce4:	2005      	movs	r0, #5
     ce6:	47a0      	blx	r4
	delay_ms(1);
     ce8:	2001      	movs	r0, #1
     cea:	47b0      	blx	r6
	LCD_command(ST7735_CASET);
     cec:	202a      	movs	r0, #42	; 0x2a
     cee:	47a8      	blx	r5
	LCD_data(0x00);
     cf0:	2000      	movs	r0, #0
     cf2:	47a0      	blx	r4
	LCD_data(0x00);
     cf4:	2000      	movs	r0, #0
     cf6:	47a0      	blx	r4
	LCD_data(0x00);
     cf8:	2000      	movs	r0, #0
     cfa:	47a0      	blx	r4
	LCD_data(0x7F);
     cfc:	207f      	movs	r0, #127	; 0x7f
     cfe:	47a0      	blx	r4
	delay_ms(1);
     d00:	2001      	movs	r0, #1
     d02:	47b0      	blx	r6
	LCD_command(ST7735_RASET);
     d04:	202b      	movs	r0, #43	; 0x2b
     d06:	47a8      	blx	r5
	LCD_data(0x00);
     d08:	2000      	movs	r0, #0
     d0a:	47a0      	blx	r4
	LCD_data(0x00);
     d0c:	2000      	movs	r0, #0
     d0e:	47a0      	blx	r4
	LCD_data(0x00);
     d10:	2000      	movs	r0, #0
     d12:	47a0      	blx	r4
	LCD_data(0x9F);
     d14:	209f      	movs	r0, #159	; 0x9f
     d16:	47a0      	blx	r4
	delay_ms(1);
     d18:	2001      	movs	r0, #1
     d1a:	47b0      	blx	r6
	LCD_command(ST7735_GMCTRP1);
     d1c:	20e0      	movs	r0, #224	; 0xe0
     d1e:	47a8      	blx	r5
	LCD_data(0x02);
     d20:	2002      	movs	r0, #2
     d22:	47a0      	blx	r4
	LCD_data(0x1C);
     d24:	201c      	movs	r0, #28
     d26:	47a0      	blx	r4
	LCD_data(0x07);
     d28:	2007      	movs	r0, #7
     d2a:	47a0      	blx	r4
	LCD_data(0x12);
     d2c:	2012      	movs	r0, #18
     d2e:	47a0      	blx	r4
	LCD_data(0x37);
     d30:	2037      	movs	r0, #55	; 0x37
     d32:	47a0      	blx	r4
	LCD_data(0x32);
     d34:	2032      	movs	r0, #50	; 0x32
     d36:	47a0      	blx	r4
	LCD_data(0x29);
     d38:	2029      	movs	r0, #41	; 0x29
     d3a:	47a0      	blx	r4
	LCD_data(0x2D);
     d3c:	202d      	movs	r0, #45	; 0x2d
     d3e:	47a0      	blx	r4
	LCD_data(0x29);
     d40:	2029      	movs	r0, #41	; 0x29
     d42:	47a0      	blx	r4
	LCD_data(0x25);
     d44:	2025      	movs	r0, #37	; 0x25
     d46:	47a0      	blx	r4
	LCD_data(0x2B);
     d48:	202b      	movs	r0, #43	; 0x2b
     d4a:	47a0      	blx	r4
	LCD_data(0x39);
     d4c:	2039      	movs	r0, #57	; 0x39
     d4e:	47a0      	blx	r4
	LCD_data(0x00);
     d50:	2000      	movs	r0, #0
     d52:	47a0      	blx	r4
	LCD_data(0x01);
     d54:	2001      	movs	r0, #1
     d56:	47a0      	blx	r4
	LCD_data(0x03);
     d58:	2003      	movs	r0, #3
     d5a:	47a0      	blx	r4
	LCD_data(0x10);
     d5c:	2010      	movs	r0, #16
     d5e:	47a0      	blx	r4
	delay_ms(1);
     d60:	2001      	movs	r0, #1
     d62:	47b0      	blx	r6
	LCD_command(ST7735_GMCTRN1);
     d64:	20e1      	movs	r0, #225	; 0xe1
     d66:	47a8      	blx	r5
	LCD_data(0x03);
     d68:	2003      	movs	r0, #3
     d6a:	47a0      	blx	r4
	LCD_data(0x1D);
     d6c:	201d      	movs	r0, #29
     d6e:	47a0      	blx	r4
	LCD_data(0x07);
     d70:	2007      	movs	r0, #7
     d72:	47a0      	blx	r4
	LCD_data(0x06);
     d74:	2006      	movs	r0, #6
     d76:	47a0      	blx	r4
	LCD_data(0x2E);
     d78:	202e      	movs	r0, #46	; 0x2e
     d7a:	47a0      	blx	r4
	LCD_data(0x2C);
     d7c:	202c      	movs	r0, #44	; 0x2c
     d7e:	47a0      	blx	r4
	LCD_data(0x29);
     d80:	2029      	movs	r0, #41	; 0x29
     d82:	47a0      	blx	r4
	LCD_data(0x2D);
     d84:	202d      	movs	r0, #45	; 0x2d
     d86:	47a0      	blx	r4
	LCD_data(0x2E);
     d88:	202e      	movs	r0, #46	; 0x2e
     d8a:	47a0      	blx	r4
	LCD_data(0x2E);
     d8c:	202e      	movs	r0, #46	; 0x2e
     d8e:	47a0      	blx	r4
	LCD_data(0x37);
     d90:	2037      	movs	r0, #55	; 0x37
     d92:	47a0      	blx	r4
	LCD_data(0x3F);
     d94:	203f      	movs	r0, #63	; 0x3f
     d96:	47a0      	blx	r4
	LCD_data(0x00);
     d98:	2000      	movs	r0, #0
     d9a:	47a0      	blx	r4
	LCD_data(0x00);
     d9c:	2000      	movs	r0, #0
     d9e:	47a0      	blx	r4
	LCD_data(0x02);
     da0:	2002      	movs	r0, #2
     da2:	47a0      	blx	r4
	LCD_data(0x10);
     da4:	2010      	movs	r0, #16
     da6:	47a0      	blx	r4
	delay_ms(1);
     da8:	2001      	movs	r0, #1
     daa:	47b0      	blx	r6
	LCD_command(ST7735_NORON);
     dac:	2013      	movs	r0, #19
     dae:	47a8      	blx	r5
	delay_ms(10);
     db0:	200a      	movs	r0, #10
     db2:	47b0      	blx	r6
	LCD_command(ST7735_DISPON);
     db4:	2029      	movs	r0, #41	; 0x29
     db6:	47a8      	blx	r5
	delay_ms(100);
     db8:	2064      	movs	r0, #100	; 0x64
     dba:	47b0      	blx	r6
	LCD_command(ST7735_MADCTL); // rotation
     dbc:	2036      	movs	r0, #54	; 0x36
     dbe:	47a8      	blx	r5
    LCD_data(MADCTL_MY | MADCTL_MV | MADCTL_RGB);
     dc0:	20a0      	movs	r0, #160	; 0xa0
     dc2:	47a0      	blx	r4
}
     dc4:	bd70      	pop	{r4, r5, r6, pc}
     dc6:	46c0      	nop			; (mov r8, r8)
     dc8:	00000a61 	.word	0x00000a61
     dcc:	000003c9 	.word	0x000003c9
     dd0:	00000b35 	.word	0x00000b35
     dd4:	00000b75 	.word	0x00000b75

00000dd8 <LCD_setAddr>:
  // check boundary
  LCD_setAddr(x,y,x+1,y+1);
  LCD_data16(color);
}

void LCD_setAddr(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1) {
     dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
     dda:	b083      	sub	sp, #12
     ddc:	0004      	movs	r4, r0
     dde:	000e      	movs	r6, r1
     de0:	0017      	movs	r7, r2
     de2:	9301      	str	r3, [sp, #4]
  LCD_command(ST7735_CASET); // Column
     de4:	202a      	movs	r0, #42	; 0x2a
     de6:	4d08      	ldr	r5, [pc, #32]	; (e08 <LCD_setAddr+0x30>)
     de8:	47a8      	blx	r5
  LCD_data16(x0);
     dea:	0020      	movs	r0, r4
     dec:	4c07      	ldr	r4, [pc, #28]	; (e0c <LCD_setAddr+0x34>)
     dee:	47a0      	blx	r4
	LCD_data16(x1);
     df0:	0038      	movs	r0, r7
     df2:	47a0      	blx	r4
	LCD_command(ST7735_RASET); // Page
     df4:	202b      	movs	r0, #43	; 0x2b
     df6:	47a8      	blx	r5
	LCD_data16(y0);
     df8:	0030      	movs	r0, r6
     dfa:	47a0      	blx	r4
	LCD_data16(y1);
     dfc:	9801      	ldr	r0, [sp, #4]
     dfe:	47a0      	blx	r4
	LCD_command(ST7735_RAMWR); // Into RAM
     e00:	202c      	movs	r0, #44	; 0x2c
     e02:	47a8      	blx	r5
}
     e04:	b003      	add	sp, #12
     e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e08:	00000b35 	.word	0x00000b35
     e0c:	00000bb5 	.word	0x00000bb5

00000e10 <LCD_drawPixel>:
void LCD_drawPixel(unsigned short x, unsigned short y, unsigned short color) {
     e10:	b570      	push	{r4, r5, r6, lr}
     e12:	0014      	movs	r4, r2
  LCD_setAddr(x,y,x+1,y+1);
     e14:	1c4b      	adds	r3, r1, #1
     e16:	b29b      	uxth	r3, r3
     e18:	1c42      	adds	r2, r0, #1
     e1a:	b292      	uxth	r2, r2
     e1c:	4d02      	ldr	r5, [pc, #8]	; (e28 <LCD_drawPixel+0x18>)
     e1e:	47a8      	blx	r5
  LCD_data16(color);
     e20:	0020      	movs	r0, r4
     e22:	4b02      	ldr	r3, [pc, #8]	; (e2c <LCD_drawPixel+0x1c>)
     e24:	4798      	blx	r3
}
     e26:	bd70      	pop	{r4, r5, r6, pc}
     e28:	00000dd9 	.word	0x00000dd9
     e2c:	00000bb5 	.word	0x00000bb5

00000e30 <LCD_drawXLine>:
void LCD_drawXLine(short x,int c){
     e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	for(i=0;i<MAX_X;i++){
     e32:	2400      	movs	r4, #0
		LCD_drawPixel(i,x,c);
     e34:	b28e      	uxth	r6, r1
     e36:	b285      	uxth	r5, r0
     e38:	4f04      	ldr	r7, [pc, #16]	; (e4c <LCD_drawXLine+0x1c>)
     e3a:	b2a0      	uxth	r0, r4
     e3c:	0032      	movs	r2, r6
     e3e:	0029      	movs	r1, r5
     e40:	47b8      	blx	r7
	for(i=0;i<MAX_X;i++){
     e42:	3401      	adds	r4, #1
     e44:	2ca0      	cmp	r4, #160	; 0xa0
     e46:	d1f8      	bne.n	e3a <LCD_drawXLine+0xa>
}
     e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     e4a:	46c0      	nop			; (mov r8, r8)
     e4c:	00000e11 	.word	0x00000e11

00000e50 <drawChar>:
void drawChar(short x, short y, unsigned char c, short fg, short bg){
     e50:	b5f0      	push	{r4, r5, r6, r7, lr}
     e52:	46de      	mov	lr, fp
     e54:	4657      	mov	r7, sl
     e56:	464e      	mov	r6, r9
     e58:	4645      	mov	r5, r8
     e5a:	b5e0      	push	{r5, r6, r7, lr}
     e5c:	b085      	sub	sp, #20
     e5e:	9103      	str	r1, [sp, #12]
     e60:	9301      	str	r3, [sp, #4]
     e62:	ab0e      	add	r3, sp, #56	; 0x38
     e64:	2400      	movs	r4, #0
     e66:	5f1b      	ldrsh	r3, [r3, r4]
     e68:	9302      	str	r3, [sp, #8]
    if ((MAX_X-x>7)&&(MAX_Y-y>7)){
     e6a:	23a0      	movs	r3, #160	; 0xa0
     e6c:	1a1b      	subs	r3, r3, r0
     e6e:	2b07      	cmp	r3, #7
     e70:	dd37      	ble.n	ee2 <drawChar+0x92>
     e72:	2380      	movs	r3, #128	; 0x80
     e74:	1a5b      	subs	r3, r3, r1
     e76:	2b07      	cmp	r3, #7
     e78:	dd33      	ble.n	ee2 <drawChar+0x92>
     e7a:	3a20      	subs	r2, #32
     e7c:	b2d2      	uxtb	r2, r2
     e7e:	0093      	lsls	r3, r2, #2
     e80:	189a      	adds	r2, r3, r2
     e82:	4b1b      	ldr	r3, [pc, #108]	; (ef0 <drawChar+0xa0>)
     e84:	469b      	mov	fp, r3
     e86:	4493      	add	fp, r2
     e88:	b286      	uxth	r6, r0
     e8a:	1d73      	adds	r3, r6, #5
     e8c:	b29b      	uxth	r3, r3
     e8e:	4698      	mov	r8, r3
                    LCD_drawPixel(x+i,y+j,bg);
     e90:	4b18      	ldr	r3, [pc, #96]	; (ef4 <drawChar+0xa4>)
     e92:	469a      	mov	sl, r3
                    LCD_drawPixel(x+i,y+j,fg);
     e94:	4699      	mov	r9, r3
     e96:	9600      	str	r6, [sp, #0]
     e98:	e01c      	b.n	ed4 <drawChar+0x84>
                    LCD_drawPixel(x+i,y+j,bg);
     e9a:	466b      	mov	r3, sp
     e9c:	891a      	ldrh	r2, [r3, #8]
     e9e:	0021      	movs	r1, r4
     ea0:	9800      	ldr	r0, [sp, #0]
     ea2:	47d0      	blx	sl
            for(j=0;j<8;j++){
     ea4:	3501      	adds	r5, #1
     ea6:	3401      	adds	r4, #1
     ea8:	b2a4      	uxth	r4, r4
     eaa:	2d08      	cmp	r5, #8
     eac:	d009      	beq.n	ec2 <drawChar+0x72>
                if ((pixels>>j)&1==1){
     eae:	0033      	movs	r3, r6
     eb0:	412b      	asrs	r3, r5
     eb2:	421f      	tst	r7, r3
     eb4:	d0f1      	beq.n	e9a <drawChar+0x4a>
                    LCD_drawPixel(x+i,y+j,fg);
     eb6:	466b      	mov	r3, sp
     eb8:	889a      	ldrh	r2, [r3, #4]
     eba:	0021      	movs	r1, r4
     ebc:	9800      	ldr	r0, [sp, #0]
     ebe:	47c8      	blx	r9
     ec0:	e7f0      	b.n	ea4 <drawChar+0x54>
     ec2:	2301      	movs	r3, #1
     ec4:	469c      	mov	ip, r3
     ec6:	44e3      	add	fp, ip
     ec8:	9e00      	ldr	r6, [sp, #0]
     eca:	3601      	adds	r6, #1
     ecc:	b2b3      	uxth	r3, r6
     ece:	9300      	str	r3, [sp, #0]
        for(i=0;i<5;i++){
     ed0:	4543      	cmp	r3, r8
     ed2:	d006      	beq.n	ee2 <drawChar+0x92>
            char pixels = ASCII[row][i]; // so we have a list of pixies to go through
     ed4:	465b      	mov	r3, fp
     ed6:	781e      	ldrb	r6, [r3, #0]
     ed8:	466b      	mov	r3, sp
     eda:	899c      	ldrh	r4, [r3, #12]
            for(j=0;j<8;j++){
     edc:	2500      	movs	r5, #0
                if ((pixels>>j)&1==1){
     ede:	2701      	movs	r7, #1
     ee0:	e7e5      	b.n	eae <drawChar+0x5e>
}
     ee2:	b005      	add	sp, #20
     ee4:	bc3c      	pop	{r2, r3, r4, r5}
     ee6:	4690      	mov	r8, r2
     ee8:	4699      	mov	r9, r3
     eea:	46a2      	mov	sl, r4
     eec:	46ab      	mov	fp, r5
     eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ef0:	00001d80 	.word	0x00001d80
     ef4:	00000e11 	.word	0x00000e11

00000ef8 <drawString>:
void drawString(short x, short y, char* str, short fg, short bg){
     ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
     efa:	b085      	sub	sp, #20
     efc:	9102      	str	r1, [sp, #8]
     efe:	0017      	movs	r7, r2
     f00:	9303      	str	r3, [sp, #12]
     f02:	ab0a      	add	r3, sp, #40	; 0x28
     f04:	2600      	movs	r6, #0
     f06:	5f9e      	ldrsh	r6, [r3, r6]
    while(str[i]){
     f08:	7812      	ldrb	r2, [r2, #0]
     f0a:	2a00      	cmp	r2, #0
     f0c:	d00d      	beq.n	f2a <drawString+0x32>
     f0e:	b284      	uxth	r4, r0
     f10:	3701      	adds	r7, #1
        drawChar(x+5*i,y,str[i],fg,bg);
     f12:	4d07      	ldr	r5, [pc, #28]	; (f30 <drawString+0x38>)
     f14:	b220      	sxth	r0, r4
     f16:	9600      	str	r6, [sp, #0]
     f18:	9b03      	ldr	r3, [sp, #12]
     f1a:	9902      	ldr	r1, [sp, #8]
     f1c:	47a8      	blx	r5
    while(str[i]){
     f1e:	783a      	ldrb	r2, [r7, #0]
     f20:	3405      	adds	r4, #5
     f22:	b2a4      	uxth	r4, r4
     f24:	3701      	adds	r7, #1
     f26:	2a00      	cmp	r2, #0
     f28:	d1f4      	bne.n	f14 <drawString+0x1c>
}
     f2a:	b005      	add	sp, #20
     f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
     f2e:	46c0      	nop			; (mov r8, r8)
     f30:	00000e51 	.word	0x00000e51

00000f34 <LCD_clearScreen>:

void LCD_clearScreen(unsigned short color) {
     f34:	b570      	push	{r4, r5, r6, lr}
     f36:	0006      	movs	r6, r0
  int i;
  LCD_setAddr(0,0,_GRAMWIDTH,_GRAMHEIGH);
     f38:	2380      	movs	r3, #128	; 0x80
     f3a:	22a0      	movs	r2, #160	; 0xa0
     f3c:	2100      	movs	r1, #0
     f3e:	2000      	movs	r0, #0
     f40:	4c05      	ldr	r4, [pc, #20]	; (f58 <LCD_clearScreen+0x24>)
     f42:	47a0      	blx	r4
     f44:	24a0      	movs	r4, #160	; 0xa0
     f46:	01e4      	lsls	r4, r4, #7
	for (i = 0;i < _GRAMSIZE; i++){
		LCD_data16(color);
     f48:	4d04      	ldr	r5, [pc, #16]	; (f5c <LCD_clearScreen+0x28>)
     f4a:	0030      	movs	r0, r6
     f4c:	47a8      	blx	r5
     f4e:	3c01      	subs	r4, #1
	for (i = 0;i < _GRAMSIZE; i++){
     f50:	2c00      	cmp	r4, #0
     f52:	d1fa      	bne.n	f4a <LCD_clearScreen+0x16>
	}
     f54:	bd70      	pop	{r4, r5, r6, pc}
     f56:	46c0      	nop			; (mov r8, r8)
     f58:	00000dd9 	.word	0x00000dd9
     f5c:	00000bb5 	.word	0x00000bb5

00000f60 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     f60:	4b0c      	ldr	r3, [pc, #48]	; (f94 <cpu_irq_enter_critical+0x34>)
     f62:	681b      	ldr	r3, [r3, #0]
     f64:	2b00      	cmp	r3, #0
     f66:	d106      	bne.n	f76 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     f68:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     f6c:	2b00      	cmp	r3, #0
     f6e:	d007      	beq.n	f80 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     f70:	2200      	movs	r2, #0
     f72:	4b09      	ldr	r3, [pc, #36]	; (f98 <cpu_irq_enter_critical+0x38>)
     f74:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     f76:	4a07      	ldr	r2, [pc, #28]	; (f94 <cpu_irq_enter_critical+0x34>)
     f78:	6813      	ldr	r3, [r2, #0]
     f7a:	3301      	adds	r3, #1
     f7c:	6013      	str	r3, [r2, #0]
}
     f7e:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     f80:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f82:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     f86:	2200      	movs	r2, #0
     f88:	4b04      	ldr	r3, [pc, #16]	; (f9c <cpu_irq_enter_critical+0x3c>)
     f8a:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     f8c:	3201      	adds	r2, #1
     f8e:	4b02      	ldr	r3, [pc, #8]	; (f98 <cpu_irq_enter_critical+0x38>)
     f90:	701a      	strb	r2, [r3, #0]
     f92:	e7f0      	b.n	f76 <cpu_irq_enter_critical+0x16>
     f94:	2000002c 	.word	0x2000002c
     f98:	20000030 	.word	0x20000030
     f9c:	20000008 	.word	0x20000008

00000fa0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     fa0:	4b08      	ldr	r3, [pc, #32]	; (fc4 <cpu_irq_leave_critical+0x24>)
     fa2:	681a      	ldr	r2, [r3, #0]
     fa4:	3a01      	subs	r2, #1
     fa6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     fa8:	681b      	ldr	r3, [r3, #0]
     faa:	2b00      	cmp	r3, #0
     fac:	d109      	bne.n	fc2 <cpu_irq_leave_critical+0x22>
     fae:	4b06      	ldr	r3, [pc, #24]	; (fc8 <cpu_irq_leave_critical+0x28>)
     fb0:	781b      	ldrb	r3, [r3, #0]
     fb2:	2b00      	cmp	r3, #0
     fb4:	d005      	beq.n	fc2 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     fb6:	2201      	movs	r2, #1
     fb8:	4b04      	ldr	r3, [pc, #16]	; (fcc <cpu_irq_leave_critical+0x2c>)
     fba:	701a      	strb	r2, [r3, #0]
     fbc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     fc0:	b662      	cpsie	i
	}
}
     fc2:	4770      	bx	lr
     fc4:	2000002c 	.word	0x2000002c
     fc8:	20000030 	.word	0x20000030
     fcc:	20000008 	.word	0x20000008

00000fd0 <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
     fd2:	b083      	sub	sp, #12
	config->input_pull = PORT_PIN_PULL_UP;
     fd4:	ac01      	add	r4, sp, #4
     fd6:	2501      	movs	r5, #1
     fd8:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     fda:	2700      	movs	r7, #0
     fdc:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     fde:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     fe0:	0021      	movs	r1, r4
     fe2:	203e      	movs	r0, #62	; 0x3e
     fe4:	4e06      	ldr	r6, [pc, #24]	; (1000 <system_board_init+0x30>)
     fe6:	47b0      	blx	r6
		port_base->OUTSET.reg = pin_mask;
     fe8:	2280      	movs	r2, #128	; 0x80
     fea:	05d2      	lsls	r2, r2, #23
     fec:	4b05      	ldr	r3, [pc, #20]	; (1004 <system_board_init+0x34>)
     fee:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     ff0:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     ff2:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     ff4:	0021      	movs	r1, r4
     ff6:	200f      	movs	r0, #15
     ff8:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     ffa:	b003      	add	sp, #12
     ffc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     ffe:	46c0      	nop			; (mov r8, r8)
    1000:	00001009 	.word	0x00001009
    1004:	41004480 	.word	0x41004480

00001008 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1008:	b500      	push	{lr}
    100a:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    100c:	ab01      	add	r3, sp, #4
    100e:	2280      	movs	r2, #128	; 0x80
    1010:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1012:	780a      	ldrb	r2, [r1, #0]
    1014:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1016:	784a      	ldrb	r2, [r1, #1]
    1018:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    101a:	788a      	ldrb	r2, [r1, #2]
    101c:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    101e:	0019      	movs	r1, r3
    1020:	4b01      	ldr	r3, [pc, #4]	; (1028 <port_pin_set_config+0x20>)
    1022:	4798      	blx	r3
}
    1024:	b003      	add	sp, #12
    1026:	bd00      	pop	{pc}
    1028:	00001769 	.word	0x00001769

0000102c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    102c:	b510      	push	{r4, lr}
	switch (clock_source) {
    102e:	2808      	cmp	r0, #8
    1030:	d803      	bhi.n	103a <system_clock_source_get_hz+0xe>
    1032:	0080      	lsls	r0, r0, #2
    1034:	4b1c      	ldr	r3, [pc, #112]	; (10a8 <system_clock_source_get_hz+0x7c>)
    1036:	581b      	ldr	r3, [r3, r0]
    1038:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
    103a:	2000      	movs	r0, #0
    103c:	e032      	b.n	10a4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    103e:	4b1b      	ldr	r3, [pc, #108]	; (10ac <system_clock_source_get_hz+0x80>)
    1040:	6918      	ldr	r0, [r3, #16]
    1042:	e02f      	b.n	10a4 <system_clock_source_get_hz+0x78>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1044:	4b1a      	ldr	r3, [pc, #104]	; (10b0 <system_clock_source_get_hz+0x84>)
    1046:	6a1b      	ldr	r3, [r3, #32]
    1048:	059b      	lsls	r3, r3, #22
    104a:	0f9b      	lsrs	r3, r3, #30
    104c:	4819      	ldr	r0, [pc, #100]	; (10b4 <system_clock_source_get_hz+0x88>)
    104e:	40d8      	lsrs	r0, r3
    1050:	e028      	b.n	10a4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    1052:	4b16      	ldr	r3, [pc, #88]	; (10ac <system_clock_source_get_hz+0x80>)
    1054:	6958      	ldr	r0, [r3, #20]
    1056:	e025      	b.n	10a4 <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1058:	4b14      	ldr	r3, [pc, #80]	; (10ac <system_clock_source_get_hz+0x80>)
    105a:	681b      	ldr	r3, [r3, #0]
			return 0;
    105c:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    105e:	079b      	lsls	r3, r3, #30
    1060:	d520      	bpl.n	10a4 <system_clock_source_get_hz+0x78>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1062:	4913      	ldr	r1, [pc, #76]	; (10b0 <system_clock_source_get_hz+0x84>)
    1064:	2210      	movs	r2, #16
    1066:	68cb      	ldr	r3, [r1, #12]
    1068:	421a      	tst	r2, r3
    106a:	d0fc      	beq.n	1066 <system_clock_source_get_hz+0x3a>
		switch(_system_clock_inst.dfll.control &
    106c:	4b0f      	ldr	r3, [pc, #60]	; (10ac <system_clock_source_get_hz+0x80>)
    106e:	681a      	ldr	r2, [r3, #0]
    1070:	2324      	movs	r3, #36	; 0x24
    1072:	4013      	ands	r3, r2
    1074:	2b04      	cmp	r3, #4
    1076:	d001      	beq.n	107c <system_clock_source_get_hz+0x50>
			return 48000000UL;
    1078:	480f      	ldr	r0, [pc, #60]	; (10b8 <system_clock_source_get_hz+0x8c>)
    107a:	e013      	b.n	10a4 <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    107c:	2000      	movs	r0, #0
    107e:	4b0f      	ldr	r3, [pc, #60]	; (10bc <system_clock_source_get_hz+0x90>)
    1080:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    1082:	4b0a      	ldr	r3, [pc, #40]	; (10ac <system_clock_source_get_hz+0x80>)
    1084:	689b      	ldr	r3, [r3, #8]
    1086:	041b      	lsls	r3, r3, #16
    1088:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    108a:	4358      	muls	r0, r3
    108c:	e00a      	b.n	10a4 <system_clock_source_get_hz+0x78>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    108e:	2350      	movs	r3, #80	; 0x50
    1090:	4a07      	ldr	r2, [pc, #28]	; (10b0 <system_clock_source_get_hz+0x84>)
    1092:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    1094:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
    1096:	075b      	lsls	r3, r3, #29
    1098:	d504      	bpl.n	10a4 <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    109a:	4b04      	ldr	r3, [pc, #16]	; (10ac <system_clock_source_get_hz+0x80>)
    109c:	68d8      	ldr	r0, [r3, #12]
    109e:	e001      	b.n	10a4 <system_clock_source_get_hz+0x78>
		return 32768UL;
    10a0:	2080      	movs	r0, #128	; 0x80
    10a2:	0200      	lsls	r0, r0, #8
	}
}
    10a4:	bd10      	pop	{r4, pc}
    10a6:	46c0      	nop			; (mov r8, r8)
    10a8:	00001f60 	.word	0x00001f60
    10ac:	20000034 	.word	0x20000034
    10b0:	40000800 	.word	0x40000800
    10b4:	007a1200 	.word	0x007a1200
    10b8:	02dc6c00 	.word	0x02dc6c00
    10bc:	0000168d 	.word	0x0000168d

000010c0 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    10c0:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    10c2:	490c      	ldr	r1, [pc, #48]	; (10f4 <system_clock_source_osc8m_set_config+0x34>)
    10c4:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    10c6:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10c8:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    10ca:	7840      	ldrb	r0, [r0, #1]
    10cc:	2201      	movs	r2, #1
    10ce:	4010      	ands	r0, r2
    10d0:	0180      	lsls	r0, r0, #6
    10d2:	2640      	movs	r6, #64	; 0x40
    10d4:	43b3      	bics	r3, r6
    10d6:	4303      	orrs	r3, r0
    10d8:	402a      	ands	r2, r5
    10da:	01d2      	lsls	r2, r2, #7
    10dc:	2080      	movs	r0, #128	; 0x80
    10de:	4383      	bics	r3, r0
    10e0:	4313      	orrs	r3, r2
    10e2:	2203      	movs	r2, #3
    10e4:	4022      	ands	r2, r4
    10e6:	0212      	lsls	r2, r2, #8
    10e8:	4803      	ldr	r0, [pc, #12]	; (10f8 <system_clock_source_osc8m_set_config+0x38>)
    10ea:	4003      	ands	r3, r0
    10ec:	4313      	orrs	r3, r2
    10ee:	620b      	str	r3, [r1, #32]
}
    10f0:	bd70      	pop	{r4, r5, r6, pc}
    10f2:	46c0      	nop			; (mov r8, r8)
    10f4:	40000800 	.word	0x40000800
    10f8:	fffffcff 	.word	0xfffffcff

000010fc <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    10fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    10fe:	46de      	mov	lr, fp
    1100:	4657      	mov	r7, sl
    1102:	464e      	mov	r6, r9
    1104:	4645      	mov	r5, r8
    1106:	b5e0      	push	{r5, r6, r7, lr}
    1108:	0001      	movs	r1, r0
	SYSCTRL_XOSC32K_Type temp = SYSCTRL->XOSC32K;
    110a:	4b26      	ldr	r3, [pc, #152]	; (11a4 <system_clock_source_xosc32k_set_config+0xa8>)
    110c:	469b      	mov	fp, r3
    110e:	8a9b      	ldrh	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    1110:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    1112:	7800      	ldrb	r0, [r0, #0]
    1114:	4242      	negs	r2, r0
    1116:	4142      	adcs	r2, r0
    1118:	4691      	mov	r9, r2
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.AAMPEN = config->auto_gain_control;
    111a:	7888      	ldrb	r0, [r1, #2]
	temp.bit.EN1K = config->enable_1khz_output;
    111c:	78ca      	ldrb	r2, [r1, #3]
    111e:	4694      	mov	ip, r2
	temp.bit.EN32K = config->enable_32khz_output;
    1120:	790a      	ldrb	r2, [r1, #4]
    1122:	4690      	mov	r8, r2

	temp.bit.ONDEMAND = config->on_demand;
    1124:	7b4e      	ldrb	r6, [r1, #13]
	temp.bit.RUNSTDBY = config->run_in_standby;
    1126:	7b0f      	ldrb	r7, [r1, #12]
	temp.bit.WRTLOCK  = config->write_once;
    1128:	7b8c      	ldrb	r4, [r1, #14]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    112a:	688a      	ldr	r2, [r1, #8]
    112c:	491e      	ldr	r1, [pc, #120]	; (11a8 <system_clock_source_xosc32k_set_config+0xac>)
    112e:	614a      	str	r2, [r1, #20]

	SYSCTRL->XOSC32K = temp;
    1130:	2101      	movs	r1, #1
    1132:	464a      	mov	r2, r9
    1134:	0092      	lsls	r2, r2, #2
    1136:	4691      	mov	r9, r2
    1138:	2204      	movs	r2, #4
    113a:	4393      	bics	r3, r2
    113c:	464a      	mov	r2, r9
    113e:	4313      	orrs	r3, r2
    1140:	4642      	mov	r2, r8
    1142:	400a      	ands	r2, r1
    1144:	00d2      	lsls	r2, r2, #3
    1146:	4690      	mov	r8, r2
    1148:	2208      	movs	r2, #8
    114a:	4393      	bics	r3, r2
    114c:	4642      	mov	r2, r8
    114e:	4313      	orrs	r3, r2
    1150:	4662      	mov	r2, ip
    1152:	400a      	ands	r2, r1
    1154:	0112      	lsls	r2, r2, #4
    1156:	4694      	mov	ip, r2
    1158:	2210      	movs	r2, #16
    115a:	4393      	bics	r3, r2
    115c:	4662      	mov	r2, ip
    115e:	4313      	orrs	r3, r2
    1160:	4008      	ands	r0, r1
    1162:	0140      	lsls	r0, r0, #5
    1164:	2220      	movs	r2, #32
    1166:	4393      	bics	r3, r2
    1168:	4303      	orrs	r3, r0
    116a:	400f      	ands	r7, r1
    116c:	01bf      	lsls	r7, r7, #6
    116e:	2040      	movs	r0, #64	; 0x40
    1170:	4383      	bics	r3, r0
    1172:	433b      	orrs	r3, r7
    1174:	400e      	ands	r6, r1
    1176:	01f6      	lsls	r6, r6, #7
    1178:	3040      	adds	r0, #64	; 0x40
    117a:	4383      	bics	r3, r0
    117c:	4333      	orrs	r3, r6
    117e:	3879      	subs	r0, #121	; 0x79
    1180:	4005      	ands	r5, r0
    1182:	022d      	lsls	r5, r5, #8
    1184:	4809      	ldr	r0, [pc, #36]	; (11ac <system_clock_source_xosc32k_set_config+0xb0>)
    1186:	4003      	ands	r3, r0
    1188:	432b      	orrs	r3, r5
    118a:	4021      	ands	r1, r4
    118c:	0309      	lsls	r1, r1, #12
    118e:	4808      	ldr	r0, [pc, #32]	; (11b0 <system_clock_source_xosc32k_set_config+0xb4>)
    1190:	4003      	ands	r3, r0
    1192:	430b      	orrs	r3, r1
    1194:	465a      	mov	r2, fp
    1196:	8293      	strh	r3, [r2, #20]
}
    1198:	bc3c      	pop	{r2, r3, r4, r5}
    119a:	4690      	mov	r8, r2
    119c:	4699      	mov	r9, r3
    119e:	46a2      	mov	sl, r4
    11a0:	46ab      	mov	fp, r5
    11a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11a4:	40000800 	.word	0x40000800
    11a8:	20000034 	.word	0x20000034
    11ac:	fffff8ff 	.word	0xfffff8ff
    11b0:	ffffefff 	.word	0xffffefff

000011b4 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    11b4:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    11b6:	7a03      	ldrb	r3, [r0, #8]
    11b8:	069b      	lsls	r3, r3, #26
    11ba:	0c1b      	lsrs	r3, r3, #16
			SYSCTRL_DFLLVAL_FINE(config->fine_value);
    11bc:	8942      	ldrh	r2, [r0, #10]
    11be:	0592      	lsls	r2, r2, #22
    11c0:	0d92      	lsrs	r2, r2, #22
			SYSCTRL_DFLLVAL_COARSE(config->coarse_value) |
    11c2:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    11c4:	4918      	ldr	r1, [pc, #96]	; (1228 <system_clock_source_dfll_set_config+0x74>)
    11c6:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    11c8:	7983      	ldrb	r3, [r0, #6]
    11ca:	79c2      	ldrb	r2, [r0, #7]
    11cc:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    11ce:	8842      	ldrh	r2, [r0, #2]
    11d0:	8884      	ldrh	r4, [r0, #4]
    11d2:	4322      	orrs	r2, r4
    11d4:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    11d6:	7842      	ldrb	r2, [r0, #1]
    11d8:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    11da:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    11dc:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    11de:	7803      	ldrb	r3, [r0, #0]
    11e0:	2b04      	cmp	r3, #4
    11e2:	d011      	beq.n	1208 <system_clock_source_dfll_set_config+0x54>
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    11e4:	2b20      	cmp	r3, #32
    11e6:	d10e      	bne.n	1206 <system_clock_source_dfll_set_config+0x52>

		_system_clock_inst.dfll.mul =
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    11e8:	7b03      	ldrb	r3, [r0, #12]
    11ea:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    11ec:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    11ee:	4313      	orrs	r3, r2
    11f0:	89c2      	ldrh	r2, [r0, #14]
    11f2:	0412      	lsls	r2, r2, #16
    11f4:	490d      	ldr	r1, [pc, #52]	; (122c <system_clock_source_dfll_set_config+0x78>)
    11f6:	400a      	ands	r2, r1
    11f8:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    11fa:	4a0b      	ldr	r2, [pc, #44]	; (1228 <system_clock_source_dfll_set_config+0x74>)
    11fc:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    11fe:	6811      	ldr	r1, [r2, #0]
    1200:	4b0b      	ldr	r3, [pc, #44]	; (1230 <system_clock_source_dfll_set_config+0x7c>)
    1202:	430b      	orrs	r3, r1
    1204:	6013      	str	r3, [r2, #0]
				SYSCTRL_DFLLCTRL_MODE | SYSCTRL_DFLLCTRL_BPLCKC;
	}
}
    1206:	bd10      	pop	{r4, pc}
				SYSCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    1208:	7b03      	ldrb	r3, [r0, #12]
    120a:	069b      	lsls	r3, r3, #26
				SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
    120c:	8a02      	ldrh	r2, [r0, #16]
				SYSCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    120e:	4313      	orrs	r3, r2
    1210:	89c2      	ldrh	r2, [r0, #14]
    1212:	0412      	lsls	r2, r2, #16
    1214:	4905      	ldr	r1, [pc, #20]	; (122c <system_clock_source_dfll_set_config+0x78>)
    1216:	400a      	ands	r2, r1
    1218:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    121a:	4a03      	ldr	r2, [pc, #12]	; (1228 <system_clock_source_dfll_set_config+0x74>)
    121c:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    121e:	6813      	ldr	r3, [r2, #0]
    1220:	2104      	movs	r1, #4
    1222:	430b      	orrs	r3, r1
    1224:	6013      	str	r3, [r2, #0]
    1226:	e7ee      	b.n	1206 <system_clock_source_dfll_set_config+0x52>
    1228:	20000034 	.word	0x20000034
    122c:	03ff0000 	.word	0x03ff0000
    1230:	00000424 	.word	0x00000424

00001234 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1234:	2808      	cmp	r0, #8
    1236:	d803      	bhi.n	1240 <system_clock_source_enable+0xc>
    1238:	0080      	lsls	r0, r0, #2
    123a:	4b25      	ldr	r3, [pc, #148]	; (12d0 <system_clock_source_enable+0x9c>)
    123c:	581b      	ldr	r3, [r3, r0]
    123e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1240:	2017      	movs	r0, #23
    1242:	e044      	b.n	12ce <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1244:	4a23      	ldr	r2, [pc, #140]	; (12d4 <system_clock_source_enable+0xa0>)
    1246:	6a13      	ldr	r3, [r2, #32]
    1248:	2102      	movs	r1, #2
    124a:	430b      	orrs	r3, r1
    124c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    124e:	2000      	movs	r0, #0
    1250:	e03d      	b.n	12ce <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1252:	4a20      	ldr	r2, [pc, #128]	; (12d4 <system_clock_source_enable+0xa0>)
    1254:	6993      	ldr	r3, [r2, #24]
    1256:	2102      	movs	r1, #2
    1258:	430b      	orrs	r3, r1
    125a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    125c:	2000      	movs	r0, #0
		break;
    125e:	e036      	b.n	12ce <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1260:	4a1c      	ldr	r2, [pc, #112]	; (12d4 <system_clock_source_enable+0xa0>)
    1262:	8a13      	ldrh	r3, [r2, #16]
    1264:	2102      	movs	r1, #2
    1266:	430b      	orrs	r3, r1
    1268:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    126a:	2000      	movs	r0, #0
		break;
    126c:	e02f      	b.n	12ce <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    126e:	4a19      	ldr	r2, [pc, #100]	; (12d4 <system_clock_source_enable+0xa0>)
    1270:	8a93      	ldrh	r3, [r2, #20]
    1272:	2102      	movs	r1, #2
    1274:	430b      	orrs	r3, r1
    1276:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1278:	2000      	movs	r0, #0
		break;
    127a:	e028      	b.n	12ce <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    127c:	4916      	ldr	r1, [pc, #88]	; (12d8 <system_clock_source_enable+0xa4>)
    127e:	680b      	ldr	r3, [r1, #0]
    1280:	2202      	movs	r2, #2
    1282:	4313      	orrs	r3, r2
    1284:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
    1286:	4b13      	ldr	r3, [pc, #76]	; (12d4 <system_clock_source_enable+0xa0>)
    1288:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    128a:	0019      	movs	r1, r3
    128c:	320e      	adds	r2, #14
    128e:	68cb      	ldr	r3, [r1, #12]
    1290:	421a      	tst	r2, r3
    1292:	d0fc      	beq.n	128e <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1294:	4a10      	ldr	r2, [pc, #64]	; (12d8 <system_clock_source_enable+0xa4>)
    1296:	6891      	ldr	r1, [r2, #8]
    1298:	4b0e      	ldr	r3, [pc, #56]	; (12d4 <system_clock_source_enable+0xa0>)
    129a:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    129c:	6852      	ldr	r2, [r2, #4]
    129e:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
    12a0:	2200      	movs	r2, #0
    12a2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    12a4:	0019      	movs	r1, r3
    12a6:	3210      	adds	r2, #16
    12a8:	68cb      	ldr	r3, [r1, #12]
    12aa:	421a      	tst	r2, r3
    12ac:	d0fc      	beq.n	12a8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    12ae:	4b0a      	ldr	r3, [pc, #40]	; (12d8 <system_clock_source_enable+0xa4>)
    12b0:	681b      	ldr	r3, [r3, #0]
    12b2:	b29b      	uxth	r3, r3
    12b4:	4a07      	ldr	r2, [pc, #28]	; (12d4 <system_clock_source_enable+0xa0>)
    12b6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
    12b8:	2000      	movs	r0, #0
    12ba:	e008      	b.n	12ce <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
    12bc:	4905      	ldr	r1, [pc, #20]	; (12d4 <system_clock_source_enable+0xa0>)
    12be:	2244      	movs	r2, #68	; 0x44
    12c0:	5c8b      	ldrb	r3, [r1, r2]
    12c2:	2002      	movs	r0, #2
    12c4:	4303      	orrs	r3, r0
    12c6:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    12c8:	2000      	movs	r0, #0
		break;
    12ca:	e000      	b.n	12ce <system_clock_source_enable+0x9a>
		return STATUS_OK;
    12cc:	2000      	movs	r0, #0
}
    12ce:	4770      	bx	lr
    12d0:	00001f84 	.word	0x00001f84
    12d4:	40000800 	.word	0x40000800
    12d8:	20000034 	.word	0x20000034

000012dc <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    12dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    12de:	b08f      	sub	sp, #60	; 0x3c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    12e0:	22c2      	movs	r2, #194	; 0xc2
    12e2:	00d2      	lsls	r2, r2, #3
    12e4:	4b47      	ldr	r3, [pc, #284]	; (1404 <system_clock_init+0x128>)
    12e6:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    12e8:	4947      	ldr	r1, [pc, #284]	; (1408 <system_clock_init+0x12c>)
    12ea:	684b      	ldr	r3, [r1, #4]
    12ec:	221e      	movs	r2, #30
    12ee:	4393      	bics	r3, r2
    12f0:	3a1c      	subs	r2, #28
    12f2:	4313      	orrs	r3, r2
    12f4:	604b      	str	r3, [r1, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_2;
    12f6:	ab01      	add	r3, sp, #4
    12f8:	701a      	strb	r2, [r3, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    12fa:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    12fc:	4d43      	ldr	r5, [pc, #268]	; (140c <system_clock_init+0x130>)
    12fe:	b2e0      	uxtb	r0, r4
    1300:	a901      	add	r1, sp, #4
    1302:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1304:	3401      	adds	r4, #1
    1306:	2c25      	cmp	r4, #37	; 0x25
    1308:	d1f9      	bne.n	12fe <system_clock_init+0x22>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    130a:	a80a      	add	r0, sp, #40	; 0x28
    130c:	2300      	movs	r3, #0
    130e:	7003      	strb	r3, [r0, #0]
	config->auto_gain_control   = false;
    1310:	7083      	strb	r3, [r0, #2]
	config->frequency           = 32768UL;
    1312:	2280      	movs	r2, #128	; 0x80
    1314:	0212      	lsls	r2, r2, #8
    1316:	6082      	str	r2, [r0, #8]
	config->enable_1khz_output  = false;
    1318:	70c3      	strb	r3, [r0, #3]
	config->enable_32khz_output = true;
    131a:	2201      	movs	r2, #1
    131c:	7102      	strb	r2, [r0, #4]
	config->run_in_standby      = false;
    131e:	7303      	strb	r3, [r0, #12]
	config->write_once          = false;
    1320:	7383      	strb	r3, [r0, #14]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    1322:	3205      	adds	r2, #5
    1324:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.auto_gain_control   = CONF_CLOCK_XOSC32K_AUTO_AMPLITUDE_CONTROL;
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    1326:	7343      	strb	r3, [r0, #13]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    1328:	4b39      	ldr	r3, [pc, #228]	; (1410 <system_clock_init+0x134>)
    132a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    132c:	2005      	movs	r0, #5
    132e:	4b39      	ldr	r3, [pc, #228]	; (1414 <system_clock_init+0x138>)
    1330:	4798      	blx	r3
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    1332:	4934      	ldr	r1, [pc, #208]	; (1404 <system_clock_init+0x128>)
    1334:	2202      	movs	r2, #2
    1336:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    1338:	421a      	tst	r2, r3
    133a:	d0fc      	beq.n	1336 <system_clock_init+0x5a>
	if (CONF_CLOCK_XOSC32K_ON_DEMAND) {
		SYSCTRL->XOSC32K.bit.ONDEMAND = 1;
    133c:	4a31      	ldr	r2, [pc, #196]	; (1404 <system_clock_init+0x128>)
    133e:	8a93      	ldrh	r3, [r2, #20]
    1340:	2180      	movs	r1, #128	; 0x80
    1342:	430b      	orrs	r3, r1
    1344:	8293      	strh	r3, [r2, #20]
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    1346:	ab05      	add	r3, sp, #20
    1348:	2100      	movs	r1, #0
    134a:	2200      	movs	r2, #0
    134c:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    134e:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    1350:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    1352:	71da      	strb	r2, [r3, #7]
	config->fine_value      = 0xff / 4; /* Midpoint */
    1354:	313f      	adds	r1, #63	; 0x3f
    1356:	8159      	strh	r1, [r3, #10]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    1358:	393b      	subs	r1, #59	; 0x3b
    135a:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    135c:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
    135e:	4b2e      	ldr	r3, [pc, #184]	; (1418 <system_clock_init+0x13c>)
    1360:	681b      	ldr	r3, [r3, #0]
    1362:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the coarse calibration value is not correct. */
	if (coarse == 0x3f) {
    1364:	2b3f      	cmp	r3, #63	; 0x3f
    1366:	d04b      	beq.n	1400 <system_clock_init+0x124>
		coarse = 0x1f;
	}
	dfll_conf.coarse_value = coarse;
    1368:	a805      	add	r0, sp, #20
    136a:	7203      	strb	r3, [r0, #8]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    136c:	23b7      	movs	r3, #183	; 0xb7
    136e:	00db      	lsls	r3, r3, #3
    1370:	8203      	strh	r3, [r0, #16]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    1372:	2307      	movs	r3, #7
    1374:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    1376:	3338      	adds	r3, #56	; 0x38
    1378:	81c3      	strh	r3, [r0, #14]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    137a:	4b28      	ldr	r3, [pc, #160]	; (141c <system_clock_init+0x140>)
    137c:	4798      	blx	r3
	config->run_in_standby  = false;
    137e:	a804      	add	r0, sp, #16
    1380:	2500      	movs	r5, #0
    1382:	7045      	strb	r5, [r0, #1]
	config->on_demand       = true;
    1384:	2601      	movs	r6, #1
    1386:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1388:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    138a:	4b25      	ldr	r3, [pc, #148]	; (1420 <system_clock_init+0x144>)
    138c:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    138e:	2006      	movs	r0, #6
    1390:	4f20      	ldr	r7, [pc, #128]	; (1414 <system_clock_init+0x138>)
    1392:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1394:	4b23      	ldr	r3, [pc, #140]	; (1424 <system_clock_init+0x148>)
    1396:	4798      	blx	r3
	config->division_factor    = 1;
    1398:	ac01      	add	r4, sp, #4
    139a:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    139c:	7065      	strb	r5, [r4, #1]
	config->run_in_standby     = false;
    139e:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    13a0:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    13a2:	2305      	movs	r3, #5
    13a4:	7023      	strb	r3, [r4, #0]
    13a6:	0021      	movs	r1, r4
    13a8:	2001      	movs	r0, #1
    13aa:	4b1f      	ldr	r3, [pc, #124]	; (1428 <system_clock_init+0x14c>)
    13ac:	4798      	blx	r3
    13ae:	2001      	movs	r0, #1
    13b0:	4b1e      	ldr	r3, [pc, #120]	; (142c <system_clock_init+0x150>)
    13b2:	4798      	blx	r3
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    13b4:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    13b6:	0021      	movs	r1, r4
    13b8:	2000      	movs	r0, #0
    13ba:	4b14      	ldr	r3, [pc, #80]	; (140c <system_clock_init+0x130>)
    13bc:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
    13be:	2000      	movs	r0, #0
    13c0:	4b1b      	ldr	r3, [pc, #108]	; (1430 <system_clock_init+0x154>)
    13c2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    13c4:	2007      	movs	r0, #7
    13c6:	47b8      	blx	r7
	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
    13c8:	490e      	ldr	r1, [pc, #56]	; (1404 <system_clock_init+0x128>)
    13ca:	22d0      	movs	r2, #208	; 0xd0
    13cc:	68cb      	ldr	r3, [r1, #12]
    13ce:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    13d0:	2bd0      	cmp	r3, #208	; 0xd0
    13d2:	d1fb      	bne.n	13cc <system_clock_init+0xf0>
	PM->CPUSEL.reg = (uint32_t)divider;
    13d4:	4a17      	ldr	r2, [pc, #92]	; (1434 <system_clock_init+0x158>)
    13d6:	2300      	movs	r3, #0
    13d8:	7213      	strb	r3, [r2, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    13da:	7253      	strb	r3, [r2, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    13dc:	7293      	strb	r3, [r2, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    13de:	72d3      	strb	r3, [r2, #11]
	config->division_factor    = 1;
    13e0:	a901      	add	r1, sp, #4
    13e2:	2201      	movs	r2, #1
    13e4:	604a      	str	r2, [r1, #4]
	config->high_when_disabled = false;
    13e6:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    13e8:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    13ea:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    13ec:	3307      	adds	r3, #7
    13ee:	700b      	strb	r3, [r1, #0]
    13f0:	2000      	movs	r0, #0
    13f2:	4b0d      	ldr	r3, [pc, #52]	; (1428 <system_clock_init+0x14c>)
    13f4:	4798      	blx	r3
    13f6:	2000      	movs	r0, #0
    13f8:	4b0c      	ldr	r3, [pc, #48]	; (142c <system_clock_init+0x150>)
    13fa:	4798      	blx	r3
#endif
}
    13fc:	b00f      	add	sp, #60	; 0x3c
    13fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    1400:	3b20      	subs	r3, #32
    1402:	e7b1      	b.n	1368 <system_clock_init+0x8c>
    1404:	40000800 	.word	0x40000800
    1408:	41004000 	.word	0x41004000
    140c:	00001671 	.word	0x00001671
    1410:	000010fd 	.word	0x000010fd
    1414:	00001235 	.word	0x00001235
    1418:	00806024 	.word	0x00806024
    141c:	000011b5 	.word	0x000011b5
    1420:	000010c1 	.word	0x000010c1
    1424:	00001439 	.word	0x00001439
    1428:	0000145d 	.word	0x0000145d
    142c:	00001515 	.word	0x00001515
    1430:	000015e5 	.word	0x000015e5
    1434:	40000400 	.word	0x40000400

00001438 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1438:	4a06      	ldr	r2, [pc, #24]	; (1454 <system_gclk_init+0x1c>)
    143a:	6993      	ldr	r3, [r2, #24]
    143c:	2108      	movs	r1, #8
    143e:	430b      	orrs	r3, r1
    1440:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1442:	2201      	movs	r2, #1
    1444:	4b04      	ldr	r3, [pc, #16]	; (1458 <system_gclk_init+0x20>)
    1446:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1448:	0019      	movs	r1, r3
    144a:	780b      	ldrb	r3, [r1, #0]
    144c:	4213      	tst	r3, r2
    144e:	d1fc      	bne.n	144a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1450:	4770      	bx	lr
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	40000400 	.word	0x40000400
    1458:	40000c00 	.word	0x40000c00

0000145c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    145c:	b570      	push	{r4, r5, r6, lr}
    145e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1460:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1462:	780d      	ldrb	r5, [r1, #0]
    1464:	022d      	lsls	r5, r5, #8
    1466:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1468:	784b      	ldrb	r3, [r1, #1]
    146a:	2b00      	cmp	r3, #0
    146c:	d002      	beq.n	1474 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    146e:	2380      	movs	r3, #128	; 0x80
    1470:	02db      	lsls	r3, r3, #11
    1472:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1474:	7a4b      	ldrb	r3, [r1, #9]
    1476:	2b00      	cmp	r3, #0
    1478:	d002      	beq.n	1480 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    147a:	2380      	movs	r3, #128	; 0x80
    147c:	031b      	lsls	r3, r3, #12
    147e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1480:	6848      	ldr	r0, [r1, #4]
    1482:	2801      	cmp	r0, #1
    1484:	d910      	bls.n	14a8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1486:	1e43      	subs	r3, r0, #1
    1488:	4218      	tst	r0, r3
    148a:	d134      	bne.n	14f6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    148c:	2802      	cmp	r0, #2
    148e:	d930      	bls.n	14f2 <system_gclk_gen_set_config+0x96>
    1490:	2302      	movs	r3, #2
    1492:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1494:	3201      	adds	r2, #1
						mask <<= 1) {
    1496:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1498:	4298      	cmp	r0, r3
    149a:	d8fb      	bhi.n	1494 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    149c:	0212      	lsls	r2, r2, #8
    149e:	4332      	orrs	r2, r6
    14a0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    14a2:	2380      	movs	r3, #128	; 0x80
    14a4:	035b      	lsls	r3, r3, #13
    14a6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    14a8:	7a0b      	ldrb	r3, [r1, #8]
    14aa:	2b00      	cmp	r3, #0
    14ac:	d002      	beq.n	14b4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    14ae:	2380      	movs	r3, #128	; 0x80
    14b0:	039b      	lsls	r3, r3, #14
    14b2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14b4:	4a13      	ldr	r2, [pc, #76]	; (1504 <system_gclk_gen_set_config+0xa8>)
    14b6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    14b8:	b25b      	sxtb	r3, r3
    14ba:	2b00      	cmp	r3, #0
    14bc:	dbfb      	blt.n	14b6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    14be:	4b12      	ldr	r3, [pc, #72]	; (1508 <system_gclk_gen_set_config+0xac>)
    14c0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    14c2:	4b12      	ldr	r3, [pc, #72]	; (150c <system_gclk_gen_set_config+0xb0>)
    14c4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14c6:	4a0f      	ldr	r2, [pc, #60]	; (1504 <system_gclk_gen_set_config+0xa8>)
    14c8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    14ca:	b25b      	sxtb	r3, r3
    14cc:	2b00      	cmp	r3, #0
    14ce:	dbfb      	blt.n	14c8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    14d0:	4b0c      	ldr	r3, [pc, #48]	; (1504 <system_gclk_gen_set_config+0xa8>)
    14d2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    14d4:	001a      	movs	r2, r3
    14d6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    14d8:	b25b      	sxtb	r3, r3
    14da:	2b00      	cmp	r3, #0
    14dc:	dbfb      	blt.n	14d6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    14de:	4a09      	ldr	r2, [pc, #36]	; (1504 <system_gclk_gen_set_config+0xa8>)
    14e0:	6853      	ldr	r3, [r2, #4]
    14e2:	2180      	movs	r1, #128	; 0x80
    14e4:	0249      	lsls	r1, r1, #9
    14e6:	400b      	ands	r3, r1
    14e8:	431d      	orrs	r5, r3
    14ea:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    14ec:	4b08      	ldr	r3, [pc, #32]	; (1510 <system_gclk_gen_set_config+0xb4>)
    14ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14f0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    14f2:	2200      	movs	r2, #0
    14f4:	e7d2      	b.n	149c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    14f6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    14f8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    14fa:	2380      	movs	r3, #128	; 0x80
    14fc:	029b      	lsls	r3, r3, #10
    14fe:	431d      	orrs	r5, r3
    1500:	e7d2      	b.n	14a8 <system_gclk_gen_set_config+0x4c>
    1502:	46c0      	nop			; (mov r8, r8)
    1504:	40000c00 	.word	0x40000c00
    1508:	00000f61 	.word	0x00000f61
    150c:	40000c08 	.word	0x40000c08
    1510:	00000fa1 	.word	0x00000fa1

00001514 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1514:	b510      	push	{r4, lr}
    1516:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1518:	4a0b      	ldr	r2, [pc, #44]	; (1548 <system_gclk_gen_enable+0x34>)
    151a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    151c:	b25b      	sxtb	r3, r3
    151e:	2b00      	cmp	r3, #0
    1520:	dbfb      	blt.n	151a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1522:	4b0a      	ldr	r3, [pc, #40]	; (154c <system_gclk_gen_enable+0x38>)
    1524:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1526:	4b0a      	ldr	r3, [pc, #40]	; (1550 <system_gclk_gen_enable+0x3c>)
    1528:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    152a:	4a07      	ldr	r2, [pc, #28]	; (1548 <system_gclk_gen_enable+0x34>)
    152c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    152e:	b25b      	sxtb	r3, r3
    1530:	2b00      	cmp	r3, #0
    1532:	dbfb      	blt.n	152c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1534:	4a04      	ldr	r2, [pc, #16]	; (1548 <system_gclk_gen_enable+0x34>)
    1536:	6851      	ldr	r1, [r2, #4]
    1538:	2380      	movs	r3, #128	; 0x80
    153a:	025b      	lsls	r3, r3, #9
    153c:	430b      	orrs	r3, r1
    153e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1540:	4b04      	ldr	r3, [pc, #16]	; (1554 <system_gclk_gen_enable+0x40>)
    1542:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1544:	bd10      	pop	{r4, pc}
    1546:	46c0      	nop			; (mov r8, r8)
    1548:	40000c00 	.word	0x40000c00
    154c:	00000f61 	.word	0x00000f61
    1550:	40000c04 	.word	0x40000c04
    1554:	00000fa1 	.word	0x00000fa1

00001558 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1558:	b570      	push	{r4, r5, r6, lr}
    155a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    155c:	4a1a      	ldr	r2, [pc, #104]	; (15c8 <system_gclk_gen_get_hz+0x70>)
    155e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1560:	b25b      	sxtb	r3, r3
    1562:	2b00      	cmp	r3, #0
    1564:	dbfb      	blt.n	155e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1566:	4b19      	ldr	r3, [pc, #100]	; (15cc <system_gclk_gen_get_hz+0x74>)
    1568:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    156a:	4b19      	ldr	r3, [pc, #100]	; (15d0 <system_gclk_gen_get_hz+0x78>)
    156c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    156e:	4a16      	ldr	r2, [pc, #88]	; (15c8 <system_gclk_gen_get_hz+0x70>)
    1570:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1572:	b25b      	sxtb	r3, r3
    1574:	2b00      	cmp	r3, #0
    1576:	dbfb      	blt.n	1570 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1578:	4e13      	ldr	r6, [pc, #76]	; (15c8 <system_gclk_gen_get_hz+0x70>)
    157a:	6870      	ldr	r0, [r6, #4]
    157c:	04c0      	lsls	r0, r0, #19
    157e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1580:	4b14      	ldr	r3, [pc, #80]	; (15d4 <system_gclk_gen_get_hz+0x7c>)
    1582:	4798      	blx	r3
    1584:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1586:	4b12      	ldr	r3, [pc, #72]	; (15d0 <system_gclk_gen_get_hz+0x78>)
    1588:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    158a:	6876      	ldr	r6, [r6, #4]
    158c:	02f6      	lsls	r6, r6, #11
    158e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1590:	4b11      	ldr	r3, [pc, #68]	; (15d8 <system_gclk_gen_get_hz+0x80>)
    1592:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1594:	4a0c      	ldr	r2, [pc, #48]	; (15c8 <system_gclk_gen_get_hz+0x70>)
    1596:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1598:	b25b      	sxtb	r3, r3
    159a:	2b00      	cmp	r3, #0
    159c:	dbfb      	blt.n	1596 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    159e:	4b0a      	ldr	r3, [pc, #40]	; (15c8 <system_gclk_gen_get_hz+0x70>)
    15a0:	689c      	ldr	r4, [r3, #8]
    15a2:	0224      	lsls	r4, r4, #8
    15a4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    15a6:	4b0d      	ldr	r3, [pc, #52]	; (15dc <system_gclk_gen_get_hz+0x84>)
    15a8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    15aa:	2e00      	cmp	r6, #0
    15ac:	d107      	bne.n	15be <system_gclk_gen_get_hz+0x66>
    15ae:	2c01      	cmp	r4, #1
    15b0:	d907      	bls.n	15c2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    15b2:	0021      	movs	r1, r4
    15b4:	0028      	movs	r0, r5
    15b6:	4b0a      	ldr	r3, [pc, #40]	; (15e0 <system_gclk_gen_get_hz+0x88>)
    15b8:	4798      	blx	r3
    15ba:	0005      	movs	r5, r0
    15bc:	e001      	b.n	15c2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    15be:	3401      	adds	r4, #1
    15c0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    15c2:	0028      	movs	r0, r5
    15c4:	bd70      	pop	{r4, r5, r6, pc}
    15c6:	46c0      	nop			; (mov r8, r8)
    15c8:	40000c00 	.word	0x40000c00
    15cc:	00000f61 	.word	0x00000f61
    15d0:	40000c04 	.word	0x40000c04
    15d4:	0000102d 	.word	0x0000102d
    15d8:	40000c08 	.word	0x40000c08
    15dc:	00000fa1 	.word	0x00000fa1
    15e0:	00001bc1 	.word	0x00001bc1

000015e4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    15e4:	b510      	push	{r4, lr}
    15e6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    15e8:	4b06      	ldr	r3, [pc, #24]	; (1604 <system_gclk_chan_enable+0x20>)
    15ea:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    15ec:	4b06      	ldr	r3, [pc, #24]	; (1608 <system_gclk_chan_enable+0x24>)
    15ee:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    15f0:	4a06      	ldr	r2, [pc, #24]	; (160c <system_gclk_chan_enable+0x28>)
    15f2:	8853      	ldrh	r3, [r2, #2]
    15f4:	2180      	movs	r1, #128	; 0x80
    15f6:	01c9      	lsls	r1, r1, #7
    15f8:	430b      	orrs	r3, r1
    15fa:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    15fc:	4b04      	ldr	r3, [pc, #16]	; (1610 <system_gclk_chan_enable+0x2c>)
    15fe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1600:	bd10      	pop	{r4, pc}
    1602:	46c0      	nop			; (mov r8, r8)
    1604:	00000f61 	.word	0x00000f61
    1608:	40000c02 	.word	0x40000c02
    160c:	40000c00 	.word	0x40000c00
    1610:	00000fa1 	.word	0x00000fa1

00001614 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1614:	b510      	push	{r4, lr}
    1616:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1618:	4b0f      	ldr	r3, [pc, #60]	; (1658 <system_gclk_chan_disable+0x44>)
    161a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    161c:	4b0f      	ldr	r3, [pc, #60]	; (165c <system_gclk_chan_disable+0x48>)
    161e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1620:	4a0f      	ldr	r2, [pc, #60]	; (1660 <system_gclk_chan_disable+0x4c>)
    1622:	8853      	ldrh	r3, [r2, #2]
    1624:	051b      	lsls	r3, r3, #20
    1626:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1628:	8853      	ldrh	r3, [r2, #2]
    162a:	490e      	ldr	r1, [pc, #56]	; (1664 <system_gclk_chan_disable+0x50>)
    162c:	400b      	ands	r3, r1
    162e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1630:	8853      	ldrh	r3, [r2, #2]
    1632:	490d      	ldr	r1, [pc, #52]	; (1668 <system_gclk_chan_disable+0x54>)
    1634:	400b      	ands	r3, r1
    1636:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1638:	0011      	movs	r1, r2
    163a:	2280      	movs	r2, #128	; 0x80
    163c:	01d2      	lsls	r2, r2, #7
    163e:	884b      	ldrh	r3, [r1, #2]
    1640:	4213      	tst	r3, r2
    1642:	d1fc      	bne.n	163e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1644:	4906      	ldr	r1, [pc, #24]	; (1660 <system_gclk_chan_disable+0x4c>)
    1646:	884a      	ldrh	r2, [r1, #2]
    1648:	0203      	lsls	r3, r0, #8
    164a:	4806      	ldr	r0, [pc, #24]	; (1664 <system_gclk_chan_disable+0x50>)
    164c:	4002      	ands	r2, r0
    164e:	4313      	orrs	r3, r2
    1650:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1652:	4b06      	ldr	r3, [pc, #24]	; (166c <system_gclk_chan_disable+0x58>)
    1654:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1656:	bd10      	pop	{r4, pc}
    1658:	00000f61 	.word	0x00000f61
    165c:	40000c02 	.word	0x40000c02
    1660:	40000c00 	.word	0x40000c00
    1664:	fffff0ff 	.word	0xfffff0ff
    1668:	ffffbfff 	.word	0xffffbfff
    166c:	00000fa1 	.word	0x00000fa1

00001670 <system_gclk_chan_set_config>:
{
    1670:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1672:	780c      	ldrb	r4, [r1, #0]
    1674:	0224      	lsls	r4, r4, #8
    1676:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1678:	4b02      	ldr	r3, [pc, #8]	; (1684 <system_gclk_chan_set_config+0x14>)
    167a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    167c:	b2a4      	uxth	r4, r4
    167e:	4b02      	ldr	r3, [pc, #8]	; (1688 <system_gclk_chan_set_config+0x18>)
    1680:	805c      	strh	r4, [r3, #2]
}
    1682:	bd10      	pop	{r4, pc}
    1684:	00001615 	.word	0x00001615
    1688:	40000c00 	.word	0x40000c00

0000168c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    168c:	b510      	push	{r4, lr}
    168e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1690:	4b06      	ldr	r3, [pc, #24]	; (16ac <system_gclk_chan_get_hz+0x20>)
    1692:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1694:	4b06      	ldr	r3, [pc, #24]	; (16b0 <system_gclk_chan_get_hz+0x24>)
    1696:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1698:	4b06      	ldr	r3, [pc, #24]	; (16b4 <system_gclk_chan_get_hz+0x28>)
    169a:	885c      	ldrh	r4, [r3, #2]
    169c:	0524      	lsls	r4, r4, #20
    169e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    16a0:	4b05      	ldr	r3, [pc, #20]	; (16b8 <system_gclk_chan_get_hz+0x2c>)
    16a2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    16a4:	0020      	movs	r0, r4
    16a6:	4b05      	ldr	r3, [pc, #20]	; (16bc <system_gclk_chan_get_hz+0x30>)
    16a8:	4798      	blx	r3
}
    16aa:	bd10      	pop	{r4, pc}
    16ac:	00000f61 	.word	0x00000f61
    16b0:	40000c02 	.word	0x40000c02
    16b4:	40000c00 	.word	0x40000c00
    16b8:	00000fa1 	.word	0x00000fa1
    16bc:	00001559 	.word	0x00001559

000016c0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    16c0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    16c2:	78d3      	ldrb	r3, [r2, #3]
    16c4:	2b00      	cmp	r3, #0
    16c6:	d135      	bne.n	1734 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    16c8:	7813      	ldrb	r3, [r2, #0]
    16ca:	2b80      	cmp	r3, #128	; 0x80
    16cc:	d029      	beq.n	1722 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    16ce:	061b      	lsls	r3, r3, #24
    16d0:	2480      	movs	r4, #128	; 0x80
    16d2:	0264      	lsls	r4, r4, #9
    16d4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    16d6:	7854      	ldrb	r4, [r2, #1]
    16d8:	2502      	movs	r5, #2
    16da:	43ac      	bics	r4, r5
    16dc:	d106      	bne.n	16ec <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    16de:	7894      	ldrb	r4, [r2, #2]
    16e0:	2c00      	cmp	r4, #0
    16e2:	d120      	bne.n	1726 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    16e4:	2480      	movs	r4, #128	; 0x80
    16e6:	02a4      	lsls	r4, r4, #10
    16e8:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    16ea:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    16ec:	7854      	ldrb	r4, [r2, #1]
    16ee:	3c01      	subs	r4, #1
    16f0:	2c01      	cmp	r4, #1
    16f2:	d91c      	bls.n	172e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    16f4:	040d      	lsls	r5, r1, #16
    16f6:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    16f8:	24a0      	movs	r4, #160	; 0xa0
    16fa:	05e4      	lsls	r4, r4, #23
    16fc:	432c      	orrs	r4, r5
    16fe:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1700:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1702:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1704:	24d0      	movs	r4, #208	; 0xd0
    1706:	0624      	lsls	r4, r4, #24
    1708:	432c      	orrs	r4, r5
    170a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    170c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    170e:	78d4      	ldrb	r4, [r2, #3]
    1710:	2c00      	cmp	r4, #0
    1712:	d122      	bne.n	175a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1714:	035b      	lsls	r3, r3, #13
    1716:	d51c      	bpl.n	1752 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1718:	7893      	ldrb	r3, [r2, #2]
    171a:	2b01      	cmp	r3, #1
    171c:	d01e      	beq.n	175c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    171e:	6141      	str	r1, [r0, #20]
    1720:	e017      	b.n	1752 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1722:	2300      	movs	r3, #0
    1724:	e7d7      	b.n	16d6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1726:	24c0      	movs	r4, #192	; 0xc0
    1728:	02e4      	lsls	r4, r4, #11
    172a:	4323      	orrs	r3, r4
    172c:	e7dd      	b.n	16ea <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    172e:	4c0d      	ldr	r4, [pc, #52]	; (1764 <_system_pinmux_config+0xa4>)
    1730:	4023      	ands	r3, r4
    1732:	e7df      	b.n	16f4 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1734:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1736:	040c      	lsls	r4, r1, #16
    1738:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    173a:	23a0      	movs	r3, #160	; 0xa0
    173c:	05db      	lsls	r3, r3, #23
    173e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1740:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1742:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1744:	23d0      	movs	r3, #208	; 0xd0
    1746:	061b      	lsls	r3, r3, #24
    1748:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    174a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    174c:	78d3      	ldrb	r3, [r2, #3]
    174e:	2b00      	cmp	r3, #0
    1750:	d103      	bne.n	175a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1752:	7853      	ldrb	r3, [r2, #1]
    1754:	3b01      	subs	r3, #1
    1756:	2b01      	cmp	r3, #1
    1758:	d902      	bls.n	1760 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    175a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    175c:	6181      	str	r1, [r0, #24]
    175e:	e7f8      	b.n	1752 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1760:	6081      	str	r1, [r0, #8]
}
    1762:	e7fa      	b.n	175a <_system_pinmux_config+0x9a>
    1764:	fffbffff 	.word	0xfffbffff

00001768 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1768:	b510      	push	{r4, lr}
    176a:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    176c:	09c1      	lsrs	r1, r0, #7
		return NULL;
    176e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1770:	2900      	cmp	r1, #0
    1772:	d104      	bne.n	177e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1774:	0943      	lsrs	r3, r0, #5
    1776:	01db      	lsls	r3, r3, #7
    1778:	4905      	ldr	r1, [pc, #20]	; (1790 <system_pinmux_pin_set_config+0x28>)
    177a:	468c      	mov	ip, r1
    177c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    177e:	241f      	movs	r4, #31
    1780:	4020      	ands	r0, r4
    1782:	2101      	movs	r1, #1
    1784:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1786:	0018      	movs	r0, r3
    1788:	4b02      	ldr	r3, [pc, #8]	; (1794 <system_pinmux_pin_set_config+0x2c>)
    178a:	4798      	blx	r3
}
    178c:	bd10      	pop	{r4, pc}
    178e:	46c0      	nop			; (mov r8, r8)
    1790:	41004400 	.word	0x41004400
    1794:	000016c1 	.word	0x000016c1

00001798 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1798:	4770      	bx	lr
	...

0000179c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    179c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    179e:	4b05      	ldr	r3, [pc, #20]	; (17b4 <system_init+0x18>)
    17a0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    17a2:	4b05      	ldr	r3, [pc, #20]	; (17b8 <system_init+0x1c>)
    17a4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    17a6:	4b05      	ldr	r3, [pc, #20]	; (17bc <system_init+0x20>)
    17a8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    17aa:	4b05      	ldr	r3, [pc, #20]	; (17c0 <system_init+0x24>)
    17ac:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    17ae:	4b05      	ldr	r3, [pc, #20]	; (17c4 <system_init+0x28>)
    17b0:	4798      	blx	r3
}
    17b2:	bd10      	pop	{r4, pc}
    17b4:	000012dd 	.word	0x000012dd
    17b8:	00000fd1 	.word	0x00000fd1
    17bc:	00001799 	.word	0x00001799
    17c0:	0000012d 	.word	0x0000012d
    17c4:	00001799 	.word	0x00001799

000017c8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    17c8:	e7fe      	b.n	17c8 <Dummy_Handler>
	...

000017cc <Reset_Handler>:
{
    17cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    17ce:	4a2a      	ldr	r2, [pc, #168]	; (1878 <Reset_Handler+0xac>)
    17d0:	4b2a      	ldr	r3, [pc, #168]	; (187c <Reset_Handler+0xb0>)
    17d2:	429a      	cmp	r2, r3
    17d4:	d011      	beq.n	17fa <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    17d6:	001a      	movs	r2, r3
    17d8:	4b29      	ldr	r3, [pc, #164]	; (1880 <Reset_Handler+0xb4>)
    17da:	429a      	cmp	r2, r3
    17dc:	d20d      	bcs.n	17fa <Reset_Handler+0x2e>
    17de:	4a29      	ldr	r2, [pc, #164]	; (1884 <Reset_Handler+0xb8>)
    17e0:	3303      	adds	r3, #3
    17e2:	1a9b      	subs	r3, r3, r2
    17e4:	089b      	lsrs	r3, r3, #2
    17e6:	3301      	adds	r3, #1
    17e8:	009b      	lsls	r3, r3, #2
    17ea:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    17ec:	4823      	ldr	r0, [pc, #140]	; (187c <Reset_Handler+0xb0>)
    17ee:	4922      	ldr	r1, [pc, #136]	; (1878 <Reset_Handler+0xac>)
    17f0:	588c      	ldr	r4, [r1, r2]
    17f2:	5084      	str	r4, [r0, r2]
    17f4:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    17f6:	429a      	cmp	r2, r3
    17f8:	d1fa      	bne.n	17f0 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    17fa:	4a23      	ldr	r2, [pc, #140]	; (1888 <Reset_Handler+0xbc>)
    17fc:	4b23      	ldr	r3, [pc, #140]	; (188c <Reset_Handler+0xc0>)
    17fe:	429a      	cmp	r2, r3
    1800:	d20a      	bcs.n	1818 <Reset_Handler+0x4c>
    1802:	43d3      	mvns	r3, r2
    1804:	4921      	ldr	r1, [pc, #132]	; (188c <Reset_Handler+0xc0>)
    1806:	185b      	adds	r3, r3, r1
    1808:	2103      	movs	r1, #3
    180a:	438b      	bics	r3, r1
    180c:	3304      	adds	r3, #4
    180e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1810:	2100      	movs	r1, #0
    1812:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1814:	4293      	cmp	r3, r2
    1816:	d1fc      	bne.n	1812 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1818:	4a1d      	ldr	r2, [pc, #116]	; (1890 <Reset_Handler+0xc4>)
    181a:	21ff      	movs	r1, #255	; 0xff
    181c:	4b1d      	ldr	r3, [pc, #116]	; (1894 <Reset_Handler+0xc8>)
    181e:	438b      	bics	r3, r1
    1820:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    1822:	39fd      	subs	r1, #253	; 0xfd
    1824:	2390      	movs	r3, #144	; 0x90
    1826:	005b      	lsls	r3, r3, #1
    1828:	4a1b      	ldr	r2, [pc, #108]	; (1898 <Reset_Handler+0xcc>)
    182a:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    182c:	4a1b      	ldr	r2, [pc, #108]	; (189c <Reset_Handler+0xd0>)
    182e:	78d3      	ldrb	r3, [r2, #3]
    1830:	2503      	movs	r5, #3
    1832:	43ab      	bics	r3, r5
    1834:	2402      	movs	r4, #2
    1836:	4323      	orrs	r3, r4
    1838:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    183a:	78d3      	ldrb	r3, [r2, #3]
    183c:	270c      	movs	r7, #12
    183e:	43bb      	bics	r3, r7
    1840:	2608      	movs	r6, #8
    1842:	4333      	orrs	r3, r6
    1844:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    1846:	4b16      	ldr	r3, [pc, #88]	; (18a0 <Reset_Handler+0xd4>)
    1848:	7b98      	ldrb	r0, [r3, #14]
    184a:	2230      	movs	r2, #48	; 0x30
    184c:	4390      	bics	r0, r2
    184e:	2220      	movs	r2, #32
    1850:	4310      	orrs	r0, r2
    1852:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    1854:	7b99      	ldrb	r1, [r3, #14]
    1856:	43b9      	bics	r1, r7
    1858:	4331      	orrs	r1, r6
    185a:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    185c:	7b9a      	ldrb	r2, [r3, #14]
    185e:	43aa      	bics	r2, r5
    1860:	4322      	orrs	r2, r4
    1862:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1864:	4a0f      	ldr	r2, [pc, #60]	; (18a4 <Reset_Handler+0xd8>)
    1866:	6853      	ldr	r3, [r2, #4]
    1868:	2180      	movs	r1, #128	; 0x80
    186a:	430b      	orrs	r3, r1
    186c:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    186e:	4b0e      	ldr	r3, [pc, #56]	; (18a8 <Reset_Handler+0xdc>)
    1870:	4798      	blx	r3
        main();
    1872:	4b0e      	ldr	r3, [pc, #56]	; (18ac <Reset_Handler+0xe0>)
    1874:	4798      	blx	r3
    1876:	e7fe      	b.n	1876 <Reset_Handler+0xaa>
    1878:	00001fec 	.word	0x00001fec
    187c:	20000000 	.word	0x20000000
    1880:	2000000c 	.word	0x2000000c
    1884:	20000004 	.word	0x20000004
    1888:	2000000c 	.word	0x2000000c
    188c:	200000a4 	.word	0x200000a4
    1890:	e000ed00 	.word	0xe000ed00
    1894:	00000000 	.word	0x00000000
    1898:	41007000 	.word	0x41007000
    189c:	41005000 	.word	0x41005000
    18a0:	41004800 	.word	0x41004800
    18a4:	41004000 	.word	0x41004000
    18a8:	00001cd9 	.word	0x00001cd9
    18ac:	000019d9 	.word	0x000019d9

000018b0 <extint_down_callback>:
volatile uint8_t selection;
volatile uint8_t menuIndex;
volatile uint8_t update_flag;

void extint_down_callback(void)
{
    18b0:	b510      	push	{r4, lr}
	count--;
    18b2:	4a06      	ldr	r2, [pc, #24]	; (18cc <extint_down_callback+0x1c>)
    18b4:	7813      	ldrb	r3, [r2, #0]
    18b6:	3b01      	subs	r3, #1
    18b8:	b2db      	uxtb	r3, r3
    18ba:	7013      	strb	r3, [r2, #0]
	update_flag = 1;
    18bc:	2201      	movs	r2, #1
    18be:	4b04      	ldr	r3, [pc, #16]	; (18d0 <extint_down_callback+0x20>)
    18c0:	701a      	strb	r2, [r3, #0]
    delay_ms(200);
    18c2:	20c8      	movs	r0, #200	; 0xc8
    18c4:	4b03      	ldr	r3, [pc, #12]	; (18d4 <extint_down_callback+0x24>)
    18c6:	4798      	blx	r3
}
    18c8:	bd10      	pop	{r4, pc}
    18ca:	46c0      	nop			; (mov r8, r8)
    18cc:	200000a2 	.word	0x200000a2
    18d0:	200000a0 	.word	0x200000a0
    18d4:	000003c9 	.word	0x000003c9

000018d8 <extint_up_callback>:
void extint_up_callback(void)
{
    18d8:	b510      	push	{r4, lr}
	count++;
    18da:	4a06      	ldr	r2, [pc, #24]	; (18f4 <extint_up_callback+0x1c>)
    18dc:	7813      	ldrb	r3, [r2, #0]
    18de:	3301      	adds	r3, #1
    18e0:	b2db      	uxtb	r3, r3
    18e2:	7013      	strb	r3, [r2, #0]
	update_flag = 1;
    18e4:	2201      	movs	r2, #1
    18e6:	4b04      	ldr	r3, [pc, #16]	; (18f8 <extint_up_callback+0x20>)
    18e8:	701a      	strb	r2, [r3, #0]
	delay_ms(200);
    18ea:	20c8      	movs	r0, #200	; 0xc8
    18ec:	4b03      	ldr	r3, [pc, #12]	; (18fc <extint_up_callback+0x24>)
    18ee:	4798      	blx	r3
}
    18f0:	bd10      	pop	{r4, pc}
    18f2:	46c0      	nop			; (mov r8, r8)
    18f4:	200000a2 	.word	0x200000a2
    18f8:	200000a0 	.word	0x200000a0
    18fc:	000003c9 	.word	0x000003c9

00001900 <extint_click_callback>:

void extint_click_callback(void)
{	
    1900:	b510      	push	{r4, lr}
	selection = count;
    1902:	4a07      	ldr	r2, [pc, #28]	; (1920 <extint_click_callback+0x20>)
    1904:	7813      	ldrb	r3, [r2, #0]
    1906:	b2db      	uxtb	r3, r3
    1908:	4906      	ldr	r1, [pc, #24]	; (1924 <extint_click_callback+0x24>)
    190a:	700b      	strb	r3, [r1, #0]
	count = 0;
    190c:	2300      	movs	r3, #0
    190e:	7013      	strb	r3, [r2, #0]
	update_flag = 1;
    1910:	2201      	movs	r2, #1
    1912:	4b05      	ldr	r3, [pc, #20]	; (1928 <extint_click_callback+0x28>)
    1914:	701a      	strb	r2, [r3, #0]
	delay_ms(200);
    1916:	20c8      	movs	r0, #200	; 0xc8
    1918:	4b04      	ldr	r3, [pc, #16]	; (192c <extint_click_callback+0x2c>)
    191a:	4798      	blx	r3
}
    191c:	bd10      	pop	{r4, pc}
    191e:	46c0      	nop			; (mov r8, r8)
    1920:	200000a2 	.word	0x200000a2
    1924:	200000a1 	.word	0x200000a1
    1928:	200000a0 	.word	0x200000a0
    192c:	000003c9 	.word	0x000003c9

00001930 <configure_extint_channel>:

void configure_extint_channel(void)
{
    1930:	b5f0      	push	{r4, r5, r6, r7, lr}
    1932:	46c6      	mov	lr, r8
    1934:	b500      	push	{lr}
    1936:	b084      	sub	sp, #16
	struct extint_chan_conf config_extint_chan;
	extint_chan_get_config_defaults(&config_extint_chan);
    1938:	ac01      	add	r4, sp, #4
    193a:	0020      	movs	r0, r4
    193c:	4b12      	ldr	r3, [pc, #72]	; (1988 <configure_extint_channel+0x58>)
    193e:	4698      	mov	r8, r3
    1940:	4798      	blx	r3
	config_extint_chan.gpio_pin = PIN_PB11A_EIC_EXTINT11;
    1942:	232b      	movs	r3, #43	; 0x2b
    1944:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = MUX_PB11A_EIC_EXTINT11;
    1946:	2700      	movs	r7, #0
    1948:	6067      	str	r7, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    194a:	2501      	movs	r5, #1
    194c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    194e:	72e5      	strb	r5, [r4, #11]
	extint_chan_set_config(11, &config_extint_chan);
    1950:	0021      	movs	r1, r4
    1952:	200b      	movs	r0, #11
    1954:	4e0d      	ldr	r6, [pc, #52]	; (198c <configure_extint_channel+0x5c>)
    1956:	47b0      	blx	r6
	extint_chan_get_config_defaults(&config_extint_chan);
    1958:	0020      	movs	r0, r4
    195a:	47c0      	blx	r8
	config_extint_chan.gpio_pin = PIN_PB10A_EIC_EXTINT10;
    195c:	232a      	movs	r3, #42	; 0x2a
    195e:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = MUX_PB10A_EIC_EXTINT10;
    1960:	6067      	str	r7, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1962:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    1964:	72e5      	strb	r5, [r4, #11]
	extint_chan_set_config(10, &config_extint_chan);
    1966:	0021      	movs	r1, r4
    1968:	200a      	movs	r0, #10
    196a:	47b0      	blx	r6
	extint_chan_get_config_defaults(&config_extint_chan);
    196c:	0020      	movs	r0, r4
    196e:	47c0      	blx	r8
	config_extint_chan.gpio_pin = PIN_PA09A_EIC_EXTINT9;
    1970:	2309      	movs	r3, #9
    1972:	9301      	str	r3, [sp, #4]
	config_extint_chan.gpio_pin_mux = MUX_PA09A_EIC_EXTINT9;
    1974:	6067      	str	r7, [r4, #4]
	config_extint_chan.gpio_pin_pull = EXTINT_PULL_UP;
    1976:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    1978:	72e5      	strb	r5, [r4, #11]
	extint_chan_set_config(9, &config_extint_chan);
    197a:	0021      	movs	r1, r4
    197c:	2009      	movs	r0, #9
    197e:	47b0      	blx	r6

}
    1980:	b004      	add	sp, #16
    1982:	bc04      	pop	{r2}
    1984:	4690      	mov	r8, r2
    1986:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1988:	00000199 	.word	0x00000199
    198c:	000001ad 	.word	0x000001ad

00001990 <configure_extint_callbacks>:
void configure_extint_callbacks(void)
{
    1990:	b570      	push	{r4, r5, r6, lr}
	extint_register_callback(extint_down_callback, 11, EXTINT_CALLBACK_TYPE_DETECT);
    1992:	2200      	movs	r2, #0
    1994:	210b      	movs	r1, #11
    1996:	480b      	ldr	r0, [pc, #44]	; (19c4 <configure_extint_callbacks+0x34>)
    1998:	4d0b      	ldr	r5, [pc, #44]	; (19c8 <configure_extint_callbacks+0x38>)
    199a:	47a8      	blx	r5
	extint_chan_enable_callback(11,EXTINT_CALLBACK_TYPE_DETECT);
    199c:	2100      	movs	r1, #0
    199e:	200b      	movs	r0, #11
    19a0:	4c0a      	ldr	r4, [pc, #40]	; (19cc <configure_extint_callbacks+0x3c>)
    19a2:	47a0      	blx	r4
	extint_register_callback(extint_up_callback, 10, EXTINT_CALLBACK_TYPE_DETECT);
    19a4:	2200      	movs	r2, #0
    19a6:	210a      	movs	r1, #10
    19a8:	4809      	ldr	r0, [pc, #36]	; (19d0 <configure_extint_callbacks+0x40>)
    19aa:	47a8      	blx	r5
	extint_chan_enable_callback(10,EXTINT_CALLBACK_TYPE_DETECT);
    19ac:	2100      	movs	r1, #0
    19ae:	200a      	movs	r0, #10
    19b0:	47a0      	blx	r4
	extint_register_callback(extint_click_callback, 9, EXTINT_CALLBACK_TYPE_DETECT);
    19b2:	2200      	movs	r2, #0
    19b4:	2109      	movs	r1, #9
    19b6:	4807      	ldr	r0, [pc, #28]	; (19d4 <configure_extint_callbacks+0x44>)
    19b8:	47a8      	blx	r5
	extint_chan_enable_callback(9,EXTINT_CALLBACK_TYPE_DETECT);
    19ba:	2100      	movs	r1, #0
    19bc:	2009      	movs	r0, #9
    19be:	47a0      	blx	r4
}
    19c0:	bd70      	pop	{r4, r5, r6, pc}
    19c2:	46c0      	nop			; (mov r8, r8)
    19c4:	000018b1 	.word	0x000018b1
    19c8:	000002e9 	.word	0x000002e9
    19cc:	00000315 	.word	0x00000315
    19d0:	000018d9 	.word	0x000018d9
    19d4:	00001901 	.word	0x00001901

000019d8 <main>:




int main (void)
{
    19d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    19da:	46de      	mov	lr, fp
    19dc:	4657      	mov	r7, sl
    19de:	464e      	mov	r6, r9
    19e0:	4645      	mov	r5, r8
    19e2:	b5e0      	push	{r5, r6, r7, lr}
    19e4:	b08b      	sub	sp, #44	; 0x2c

	uint8_t output[30];
	system_init();
    19e6:	4b65      	ldr	r3, [pc, #404]	; (1b7c <main+0x1a4>)
    19e8:	4798      	blx	r3
	configure_extint_channel();
    19ea:	4b65      	ldr	r3, [pc, #404]	; (1b80 <main+0x1a8>)
    19ec:	4798      	blx	r3
	configure_extint_callbacks();
    19ee:	4b65      	ldr	r3, [pc, #404]	; (1b84 <main+0x1ac>)
    19f0:	4798      	blx	r3
	delay_init();
    19f2:	4b65      	ldr	r3, [pc, #404]	; (1b88 <main+0x1b0>)
    19f4:	4798      	blx	r3
	configure_port_pins();
    19f6:	4b65      	ldr	r3, [pc, #404]	; (1b8c <main+0x1b4>)
    19f8:	4798      	blx	r3

	LCD_init();
    19fa:	4b65      	ldr	r3, [pc, #404]	; (1b90 <main+0x1b8>)
    19fc:	4798      	blx	r3
	LCD_clearScreen(BLACK);
    19fe:	2000      	movs	r0, #0
    1a00:	4b64      	ldr	r3, [pc, #400]	; (1b94 <main+0x1bc>)
    1a02:	4798      	blx	r3
	sprintf(output,"Welcome back!");
    1a04:	ac02      	add	r4, sp, #8
    1a06:	4b64      	ldr	r3, [pc, #400]	; (1b98 <main+0x1c0>)
    1a08:	0027      	movs	r7, r4
    1a0a:	cb07      	ldmia	r3!, {r0, r1, r2}
    1a0c:	c707      	stmia	r7!, {r0, r1, r2}
    1a0e:	881b      	ldrh	r3, [r3, #0]
    1a10:	803b      	strh	r3, [r7, #0]
	drawString(8,8,output,WHITE,BLACK);
    1a12:	2600      	movs	r6, #0
    1a14:	9600      	str	r6, [sp, #0]
    1a16:	2301      	movs	r3, #1
    1a18:	425b      	negs	r3, r3
    1a1a:	0022      	movs	r2, r4
    1a1c:	2108      	movs	r1, #8
    1a1e:	2008      	movs	r0, #8
    1a20:	4d5e      	ldr	r5, [pc, #376]	; (1b9c <main+0x1c4>)
    1a22:	46a8      	mov	r8, r5
    1a24:	47a8      	blx	r5
	sprintf(output,"Proving Fields v0.1");
    1a26:	4b5e      	ldr	r3, [pc, #376]	; (1ba0 <main+0x1c8>)
    1a28:	0022      	movs	r2, r4
    1a2a:	cb23      	ldmia	r3!, {r0, r1, r5}
    1a2c:	c223      	stmia	r2!, {r0, r1, r5}
    1a2e:	cb06      	ldmia	r3!, {r1, r2}
    1a30:	c706      	stmia	r7!, {r1, r2}
	drawString(8,16,output,WHITE,BLACK);
    1a32:	9600      	str	r6, [sp, #0]
    1a34:	2301      	movs	r3, #1
    1a36:	425b      	negs	r3, r3
    1a38:	0022      	movs	r2, r4
    1a3a:	2110      	movs	r1, #16
    1a3c:	2008      	movs	r0, #8
    1a3e:	47c0      	blx	r8
	LCD_drawXLine(26,WHITE);
    1a40:	4958      	ldr	r1, [pc, #352]	; (1ba4 <main+0x1cc>)
    1a42:	201a      	movs	r0, #26
    1a44:	4b58      	ldr	r3, [pc, #352]	; (1ba8 <main+0x1d0>)
    1a46:	4798      	blx	r3
	printMenu(0,1,0);
    1a48:	2200      	movs	r2, #0
    1a4a:	2101      	movs	r1, #1
    1a4c:	2000      	movs	r0, #0
    1a4e:	4b57      	ldr	r3, [pc, #348]	; (1bac <main+0x1d4>)
    1a50:	4798      	blx	r3
	count = 0;
    1a52:	4b57      	ldr	r3, [pc, #348]	; (1bb0 <main+0x1d8>)
    1a54:	701e      	strb	r6, [r3, #0]
	update_flag = 0;
    1a56:	4b57      	ldr	r3, [pc, #348]	; (1bb4 <main+0x1dc>)
    1a58:	701e      	strb	r6, [r3, #0]
	selection = 0;
    1a5a:	4b57      	ldr	r3, [pc, #348]	; (1bb8 <main+0x1e0>)
    1a5c:	701e      	strb	r6, [r3, #0]
	menuIndex = 1;
    1a5e:	2201      	movs	r2, #1
    1a60:	4b56      	ldr	r3, [pc, #344]	; (1bbc <main+0x1e4>)
    1a62:	701a      	strb	r2, [r3, #0]
	uint8_t limit = 3;
    1a64:	3603      	adds	r6, #3

	/* This skeleton code simply sets the LED to the state of the button. */
	while (1) {

		/* Is button pressed? */
		if (update_flag){
    1a66:	4c53      	ldr	r4, [pc, #332]	; (1bb4 <main+0x1dc>)
			if (count<0){
    1a68:	4d51      	ldr	r5, [pc, #324]	; (1bb0 <main+0x1d8>)
				count = 0;
			}
			else if (count>limit){
				count = limit;
    1a6a:	002f      	movs	r7, r5
    1a6c:	e015      	b.n	1a9a <main+0xc2>
			}
			
			if (menuIndex==1 && selection == 2){
    1a6e:	4b53      	ldr	r3, [pc, #332]	; (1bbc <main+0x1e4>)
    1a70:	781b      	ldrb	r3, [r3, #0]
    1a72:	2b01      	cmp	r3, #1
    1a74:	d01b      	beq.n	1aae <main+0xd6>
				drawString(8,8,output,WHITE,BLACK);
				sprintf(output,"Proving Fields v0.1");
				drawString(8,16,output,WHITE,BLACK);
				LCD_drawXLine(26,WHITE);
			}
			else if (menuIndex==2 && selection == 2){
    1a76:	4b51      	ldr	r3, [pc, #324]	; (1bbc <main+0x1e4>)
    1a78:	781b      	ldrb	r3, [r3, #0]
    1a7a:	2b02      	cmp	r3, #2
    1a7c:	d04a      	beq.n	1b14 <main+0x13c>
				drawString(8,8,output,WHITE,BLACK);
				sprintf(output,"Proving Fields v0.1");
				drawString(8,16,output,WHITE,BLACK);
				LCD_drawXLine(26,WHITE);
			}
			printMenu(count,menuIndex,selection);
    1a7e:	4b4c      	ldr	r3, [pc, #304]	; (1bb0 <main+0x1d8>)
    1a80:	7818      	ldrb	r0, [r3, #0]
    1a82:	b2c0      	uxtb	r0, r0
    1a84:	4b4d      	ldr	r3, [pc, #308]	; (1bbc <main+0x1e4>)
    1a86:	7819      	ldrb	r1, [r3, #0]
    1a88:	b2c9      	uxtb	r1, r1
    1a8a:	4b4b      	ldr	r3, [pc, #300]	; (1bb8 <main+0x1e0>)
    1a8c:	781a      	ldrb	r2, [r3, #0]
    1a8e:	b2d2      	uxtb	r2, r2
    1a90:	4b46      	ldr	r3, [pc, #280]	; (1bac <main+0x1d4>)
    1a92:	4798      	blx	r3
			update_flag = 0;
    1a94:	2200      	movs	r2, #0
    1a96:	4b47      	ldr	r3, [pc, #284]	; (1bb4 <main+0x1dc>)
    1a98:	701a      	strb	r2, [r3, #0]
		if (update_flag){
    1a9a:	7823      	ldrb	r3, [r4, #0]
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d0fc      	beq.n	1a9a <main+0xc2>
			if (count<0){
    1aa0:	782b      	ldrb	r3, [r5, #0]
			else if (count>limit){
    1aa2:	782b      	ldrb	r3, [r5, #0]
    1aa4:	b2db      	uxtb	r3, r3
    1aa6:	429e      	cmp	r6, r3
    1aa8:	d2e1      	bcs.n	1a6e <main+0x96>
				count = limit;
    1aaa:	703e      	strb	r6, [r7, #0]
    1aac:	e7df      	b.n	1a6e <main+0x96>
			if (menuIndex==1 && selection == 2){
    1aae:	4b42      	ldr	r3, [pc, #264]	; (1bb8 <main+0x1e0>)
    1ab0:	781b      	ldrb	r3, [r3, #0]
    1ab2:	2b02      	cmp	r3, #2
    1ab4:	d1df      	bne.n	1a76 <main+0x9e>
				menuIndex = 2;
    1ab6:	2202      	movs	r2, #2
    1ab8:	4b40      	ldr	r3, [pc, #256]	; (1bbc <main+0x1e4>)
    1aba:	701a      	strb	r2, [r3, #0]
				selection = 0;
    1abc:	2300      	movs	r3, #0
    1abe:	469a      	mov	sl, r3
    1ac0:	4b3d      	ldr	r3, [pc, #244]	; (1bb8 <main+0x1e0>)
    1ac2:	4652      	mov	r2, sl
    1ac4:	701a      	strb	r2, [r3, #0]
				LCD_clearScreen(BLACK);
    1ac6:	2000      	movs	r0, #0
    1ac8:	4b32      	ldr	r3, [pc, #200]	; (1b94 <main+0x1bc>)
    1aca:	4798      	blx	r3
				sprintf(output,"Welcome back!");
    1acc:	ab02      	add	r3, sp, #8
    1ace:	4698      	mov	r8, r3
    1ad0:	4b31      	ldr	r3, [pc, #196]	; (1b98 <main+0x1c0>)
    1ad2:	4642      	mov	r2, r8
    1ad4:	cb43      	ldmia	r3!, {r0, r1, r6}
    1ad6:	c243      	stmia	r2!, {r0, r1, r6}
    1ad8:	881b      	ldrh	r3, [r3, #0]
    1ada:	8013      	strh	r3, [r2, #0]
				drawString(8,8,output,WHITE,BLACK);
    1adc:	4653      	mov	r3, sl
    1ade:	9300      	str	r3, [sp, #0]
    1ae0:	3b01      	subs	r3, #1
    1ae2:	4642      	mov	r2, r8
    1ae4:	2108      	movs	r1, #8
    1ae6:	2008      	movs	r0, #8
    1ae8:	4e2c      	ldr	r6, [pc, #176]	; (1b9c <main+0x1c4>)
    1aea:	46b3      	mov	fp, r6
    1aec:	47b0      	blx	r6
				sprintf(output,"Proving Fields v0.1");
    1aee:	4b2c      	ldr	r3, [pc, #176]	; (1ba0 <main+0x1c8>)
    1af0:	4642      	mov	r2, r8
    1af2:	cb43      	ldmia	r3!, {r0, r1, r6}
    1af4:	c243      	stmia	r2!, {r0, r1, r6}
    1af6:	cb03      	ldmia	r3!, {r0, r1}
    1af8:	c203      	stmia	r2!, {r0, r1}
				drawString(8,16,output,WHITE,BLACK);
    1afa:	4653      	mov	r3, sl
    1afc:	9300      	str	r3, [sp, #0]
    1afe:	3b01      	subs	r3, #1
    1b00:	4642      	mov	r2, r8
    1b02:	2110      	movs	r1, #16
    1b04:	2008      	movs	r0, #8
    1b06:	47d8      	blx	fp
				LCD_drawXLine(26,WHITE);
    1b08:	4926      	ldr	r1, [pc, #152]	; (1ba4 <main+0x1cc>)
    1b0a:	201a      	movs	r0, #26
    1b0c:	4b26      	ldr	r3, [pc, #152]	; (1ba8 <main+0x1d0>)
    1b0e:	4798      	blx	r3
				limit = 2;
    1b10:	2602      	movs	r6, #2
				LCD_drawXLine(26,WHITE);
    1b12:	e7b4      	b.n	1a7e <main+0xa6>
			else if (menuIndex==2 && selection == 2){
    1b14:	4b28      	ldr	r3, [pc, #160]	; (1bb8 <main+0x1e0>)
    1b16:	781b      	ldrb	r3, [r3, #0]
    1b18:	2b02      	cmp	r3, #2
    1b1a:	d1b0      	bne.n	1a7e <main+0xa6>
				menuIndex = 1;
    1b1c:	2201      	movs	r2, #1
    1b1e:	4b27      	ldr	r3, [pc, #156]	; (1bbc <main+0x1e4>)
    1b20:	701a      	strb	r2, [r3, #0]
				selection = 0;
    1b22:	2300      	movs	r3, #0
    1b24:	469a      	mov	sl, r3
    1b26:	4b24      	ldr	r3, [pc, #144]	; (1bb8 <main+0x1e0>)
    1b28:	4652      	mov	r2, sl
    1b2a:	701a      	strb	r2, [r3, #0]
				LCD_clearScreen(BLACK);
    1b2c:	2000      	movs	r0, #0
    1b2e:	4b19      	ldr	r3, [pc, #100]	; (1b94 <main+0x1bc>)
    1b30:	4798      	blx	r3
				sprintf(output,"Welcome back!");
    1b32:	ab02      	add	r3, sp, #8
    1b34:	4698      	mov	r8, r3
    1b36:	4b18      	ldr	r3, [pc, #96]	; (1b98 <main+0x1c0>)
    1b38:	4642      	mov	r2, r8
    1b3a:	cb43      	ldmia	r3!, {r0, r1, r6}
    1b3c:	c243      	stmia	r2!, {r0, r1, r6}
    1b3e:	881b      	ldrh	r3, [r3, #0]
    1b40:	8013      	strh	r3, [r2, #0]
				drawString(8,8,output,WHITE,BLACK);
    1b42:	4653      	mov	r3, sl
    1b44:	9300      	str	r3, [sp, #0]
    1b46:	3b01      	subs	r3, #1
    1b48:	4642      	mov	r2, r8
    1b4a:	2108      	movs	r1, #8
    1b4c:	2008      	movs	r0, #8
    1b4e:	4e13      	ldr	r6, [pc, #76]	; (1b9c <main+0x1c4>)
    1b50:	46b3      	mov	fp, r6
    1b52:	47b0      	blx	r6
				sprintf(output,"Proving Fields v0.1");
    1b54:	4b12      	ldr	r3, [pc, #72]	; (1ba0 <main+0x1c8>)
    1b56:	4642      	mov	r2, r8
    1b58:	cb43      	ldmia	r3!, {r0, r1, r6}
    1b5a:	c243      	stmia	r2!, {r0, r1, r6}
    1b5c:	cb03      	ldmia	r3!, {r0, r1}
    1b5e:	c203      	stmia	r2!, {r0, r1}
				drawString(8,16,output,WHITE,BLACK);
    1b60:	4653      	mov	r3, sl
    1b62:	9300      	str	r3, [sp, #0]
    1b64:	3b01      	subs	r3, #1
    1b66:	4642      	mov	r2, r8
    1b68:	2110      	movs	r1, #16
    1b6a:	2008      	movs	r0, #8
    1b6c:	47d8      	blx	fp
				LCD_drawXLine(26,WHITE);
    1b6e:	490d      	ldr	r1, [pc, #52]	; (1ba4 <main+0x1cc>)
    1b70:	201a      	movs	r0, #26
    1b72:	4b0d      	ldr	r3, [pc, #52]	; (1ba8 <main+0x1d0>)
    1b74:	4798      	blx	r3
				limit = 3;
    1b76:	2603      	movs	r6, #3
    1b78:	e781      	b.n	1a7e <main+0xa6>
    1b7a:	46c0      	nop			; (mov r8, r8)
    1b7c:	0000179d 	.word	0x0000179d
    1b80:	00001931 	.word	0x00001931
    1b84:	00001991 	.word	0x00001991
    1b88:	00000389 	.word	0x00000389
    1b8c:	00000a41 	.word	0x00000a41
    1b90:	00000c01 	.word	0x00000c01
    1b94:	00000f35 	.word	0x00000f35
    1b98:	00001fa8 	.word	0x00001fa8
    1b9c:	00000ef9 	.word	0x00000ef9
    1ba0:	00001fb8 	.word	0x00001fb8
    1ba4:	0000ffff 	.word	0x0000ffff
    1ba8:	00000e31 	.word	0x00000e31
    1bac:	00000225 	.word	0x00000225
    1bb0:	200000a2 	.word	0x200000a2
    1bb4:	200000a0 	.word	0x200000a0
    1bb8:	200000a1 	.word	0x200000a1
    1bbc:	2000009f 	.word	0x2000009f

00001bc0 <__udivsi3>:
    1bc0:	2200      	movs	r2, #0
    1bc2:	0843      	lsrs	r3, r0, #1
    1bc4:	428b      	cmp	r3, r1
    1bc6:	d374      	bcc.n	1cb2 <__udivsi3+0xf2>
    1bc8:	0903      	lsrs	r3, r0, #4
    1bca:	428b      	cmp	r3, r1
    1bcc:	d35f      	bcc.n	1c8e <__udivsi3+0xce>
    1bce:	0a03      	lsrs	r3, r0, #8
    1bd0:	428b      	cmp	r3, r1
    1bd2:	d344      	bcc.n	1c5e <__udivsi3+0x9e>
    1bd4:	0b03      	lsrs	r3, r0, #12
    1bd6:	428b      	cmp	r3, r1
    1bd8:	d328      	bcc.n	1c2c <__udivsi3+0x6c>
    1bda:	0c03      	lsrs	r3, r0, #16
    1bdc:	428b      	cmp	r3, r1
    1bde:	d30d      	bcc.n	1bfc <__udivsi3+0x3c>
    1be0:	22ff      	movs	r2, #255	; 0xff
    1be2:	0209      	lsls	r1, r1, #8
    1be4:	ba12      	rev	r2, r2
    1be6:	0c03      	lsrs	r3, r0, #16
    1be8:	428b      	cmp	r3, r1
    1bea:	d302      	bcc.n	1bf2 <__udivsi3+0x32>
    1bec:	1212      	asrs	r2, r2, #8
    1bee:	0209      	lsls	r1, r1, #8
    1bf0:	d065      	beq.n	1cbe <__udivsi3+0xfe>
    1bf2:	0b03      	lsrs	r3, r0, #12
    1bf4:	428b      	cmp	r3, r1
    1bf6:	d319      	bcc.n	1c2c <__udivsi3+0x6c>
    1bf8:	e000      	b.n	1bfc <__udivsi3+0x3c>
    1bfa:	0a09      	lsrs	r1, r1, #8
    1bfc:	0bc3      	lsrs	r3, r0, #15
    1bfe:	428b      	cmp	r3, r1
    1c00:	d301      	bcc.n	1c06 <__udivsi3+0x46>
    1c02:	03cb      	lsls	r3, r1, #15
    1c04:	1ac0      	subs	r0, r0, r3
    1c06:	4152      	adcs	r2, r2
    1c08:	0b83      	lsrs	r3, r0, #14
    1c0a:	428b      	cmp	r3, r1
    1c0c:	d301      	bcc.n	1c12 <__udivsi3+0x52>
    1c0e:	038b      	lsls	r3, r1, #14
    1c10:	1ac0      	subs	r0, r0, r3
    1c12:	4152      	adcs	r2, r2
    1c14:	0b43      	lsrs	r3, r0, #13
    1c16:	428b      	cmp	r3, r1
    1c18:	d301      	bcc.n	1c1e <__udivsi3+0x5e>
    1c1a:	034b      	lsls	r3, r1, #13
    1c1c:	1ac0      	subs	r0, r0, r3
    1c1e:	4152      	adcs	r2, r2
    1c20:	0b03      	lsrs	r3, r0, #12
    1c22:	428b      	cmp	r3, r1
    1c24:	d301      	bcc.n	1c2a <__udivsi3+0x6a>
    1c26:	030b      	lsls	r3, r1, #12
    1c28:	1ac0      	subs	r0, r0, r3
    1c2a:	4152      	adcs	r2, r2
    1c2c:	0ac3      	lsrs	r3, r0, #11
    1c2e:	428b      	cmp	r3, r1
    1c30:	d301      	bcc.n	1c36 <__udivsi3+0x76>
    1c32:	02cb      	lsls	r3, r1, #11
    1c34:	1ac0      	subs	r0, r0, r3
    1c36:	4152      	adcs	r2, r2
    1c38:	0a83      	lsrs	r3, r0, #10
    1c3a:	428b      	cmp	r3, r1
    1c3c:	d301      	bcc.n	1c42 <__udivsi3+0x82>
    1c3e:	028b      	lsls	r3, r1, #10
    1c40:	1ac0      	subs	r0, r0, r3
    1c42:	4152      	adcs	r2, r2
    1c44:	0a43      	lsrs	r3, r0, #9
    1c46:	428b      	cmp	r3, r1
    1c48:	d301      	bcc.n	1c4e <__udivsi3+0x8e>
    1c4a:	024b      	lsls	r3, r1, #9
    1c4c:	1ac0      	subs	r0, r0, r3
    1c4e:	4152      	adcs	r2, r2
    1c50:	0a03      	lsrs	r3, r0, #8
    1c52:	428b      	cmp	r3, r1
    1c54:	d301      	bcc.n	1c5a <__udivsi3+0x9a>
    1c56:	020b      	lsls	r3, r1, #8
    1c58:	1ac0      	subs	r0, r0, r3
    1c5a:	4152      	adcs	r2, r2
    1c5c:	d2cd      	bcs.n	1bfa <__udivsi3+0x3a>
    1c5e:	09c3      	lsrs	r3, r0, #7
    1c60:	428b      	cmp	r3, r1
    1c62:	d301      	bcc.n	1c68 <__udivsi3+0xa8>
    1c64:	01cb      	lsls	r3, r1, #7
    1c66:	1ac0      	subs	r0, r0, r3
    1c68:	4152      	adcs	r2, r2
    1c6a:	0983      	lsrs	r3, r0, #6
    1c6c:	428b      	cmp	r3, r1
    1c6e:	d301      	bcc.n	1c74 <__udivsi3+0xb4>
    1c70:	018b      	lsls	r3, r1, #6
    1c72:	1ac0      	subs	r0, r0, r3
    1c74:	4152      	adcs	r2, r2
    1c76:	0943      	lsrs	r3, r0, #5
    1c78:	428b      	cmp	r3, r1
    1c7a:	d301      	bcc.n	1c80 <__udivsi3+0xc0>
    1c7c:	014b      	lsls	r3, r1, #5
    1c7e:	1ac0      	subs	r0, r0, r3
    1c80:	4152      	adcs	r2, r2
    1c82:	0903      	lsrs	r3, r0, #4
    1c84:	428b      	cmp	r3, r1
    1c86:	d301      	bcc.n	1c8c <__udivsi3+0xcc>
    1c88:	010b      	lsls	r3, r1, #4
    1c8a:	1ac0      	subs	r0, r0, r3
    1c8c:	4152      	adcs	r2, r2
    1c8e:	08c3      	lsrs	r3, r0, #3
    1c90:	428b      	cmp	r3, r1
    1c92:	d301      	bcc.n	1c98 <__udivsi3+0xd8>
    1c94:	00cb      	lsls	r3, r1, #3
    1c96:	1ac0      	subs	r0, r0, r3
    1c98:	4152      	adcs	r2, r2
    1c9a:	0883      	lsrs	r3, r0, #2
    1c9c:	428b      	cmp	r3, r1
    1c9e:	d301      	bcc.n	1ca4 <__udivsi3+0xe4>
    1ca0:	008b      	lsls	r3, r1, #2
    1ca2:	1ac0      	subs	r0, r0, r3
    1ca4:	4152      	adcs	r2, r2
    1ca6:	0843      	lsrs	r3, r0, #1
    1ca8:	428b      	cmp	r3, r1
    1caa:	d301      	bcc.n	1cb0 <__udivsi3+0xf0>
    1cac:	004b      	lsls	r3, r1, #1
    1cae:	1ac0      	subs	r0, r0, r3
    1cb0:	4152      	adcs	r2, r2
    1cb2:	1a41      	subs	r1, r0, r1
    1cb4:	d200      	bcs.n	1cb8 <__udivsi3+0xf8>
    1cb6:	4601      	mov	r1, r0
    1cb8:	4152      	adcs	r2, r2
    1cba:	4610      	mov	r0, r2
    1cbc:	4770      	bx	lr
    1cbe:	e7ff      	b.n	1cc0 <__udivsi3+0x100>
    1cc0:	b501      	push	{r0, lr}
    1cc2:	2000      	movs	r0, #0
    1cc4:	f000 f806 	bl	1cd4 <__aeabi_idiv0>
    1cc8:	bd02      	pop	{r1, pc}
    1cca:	46c0      	nop			; (mov r8, r8)

00001ccc <__aeabi_uidivmod>:
    1ccc:	2900      	cmp	r1, #0
    1cce:	d0f7      	beq.n	1cc0 <__udivsi3+0x100>
    1cd0:	e776      	b.n	1bc0 <__udivsi3>
    1cd2:	4770      	bx	lr

00001cd4 <__aeabi_idiv0>:
    1cd4:	4770      	bx	lr
    1cd6:	46c0      	nop			; (mov r8, r8)

00001cd8 <__libc_init_array>:
    1cd8:	b570      	push	{r4, r5, r6, lr}
    1cda:	2600      	movs	r6, #0
    1cdc:	4d0c      	ldr	r5, [pc, #48]	; (1d10 <__libc_init_array+0x38>)
    1cde:	4c0d      	ldr	r4, [pc, #52]	; (1d14 <__libc_init_array+0x3c>)
    1ce0:	1b64      	subs	r4, r4, r5
    1ce2:	10a4      	asrs	r4, r4, #2
    1ce4:	42a6      	cmp	r6, r4
    1ce6:	d109      	bne.n	1cfc <__libc_init_array+0x24>
    1ce8:	2600      	movs	r6, #0
    1cea:	f000 f96f 	bl	1fcc <_init>
    1cee:	4d0a      	ldr	r5, [pc, #40]	; (1d18 <__libc_init_array+0x40>)
    1cf0:	4c0a      	ldr	r4, [pc, #40]	; (1d1c <__libc_init_array+0x44>)
    1cf2:	1b64      	subs	r4, r4, r5
    1cf4:	10a4      	asrs	r4, r4, #2
    1cf6:	42a6      	cmp	r6, r4
    1cf8:	d105      	bne.n	1d06 <__libc_init_array+0x2e>
    1cfa:	bd70      	pop	{r4, r5, r6, pc}
    1cfc:	00b3      	lsls	r3, r6, #2
    1cfe:	58eb      	ldr	r3, [r5, r3]
    1d00:	4798      	blx	r3
    1d02:	3601      	adds	r6, #1
    1d04:	e7ee      	b.n	1ce4 <__libc_init_array+0xc>
    1d06:	00b3      	lsls	r3, r6, #2
    1d08:	58eb      	ldr	r3, [r5, r3]
    1d0a:	4798      	blx	r3
    1d0c:	3601      	adds	r6, #1
    1d0e:	e7f2      	b.n	1cf6 <__libc_init_array+0x1e>
    1d10:	00001fd8 	.word	0x00001fd8
    1d14:	00001fd8 	.word	0x00001fd8
    1d18:	00001fd8 	.word	0x00001fd8
    1d1c:	00001fdc 	.word	0x00001fdc

00001d20 <memset>:
    1d20:	0003      	movs	r3, r0
    1d22:	1882      	adds	r2, r0, r2
    1d24:	4293      	cmp	r3, r2
    1d26:	d100      	bne.n	1d2a <memset+0xa>
    1d28:	4770      	bx	lr
    1d2a:	7019      	strb	r1, [r3, #0]
    1d2c:	3301      	adds	r3, #1
    1d2e:	e7f9      	b.n	1d24 <memset+0x4>
    1d30:	6974704f 	.word	0x6974704f
    1d34:	31206e6f 	.word	0x31206e6f
    1d38:	00000000 	.word	0x00000000
    1d3c:	6974704f 	.word	0x6974704f
    1d40:	32206e6f 	.word	0x32206e6f
    1d44:	00000000 	.word	0x00000000
    1d48:	6974704f 	.word	0x6974704f
    1d4c:	33206e6f 	.word	0x33206e6f
    1d50:	00000000 	.word	0x00000000
    1d54:	6974704f 	.word	0x6974704f
    1d58:	34206e6f 	.word	0x34206e6f
    1d5c:	00000000 	.word	0x00000000
    1d60:	6b636142 	.word	0x6b636142
    1d64:	00000000 	.word	0x00000000
    1d68:	42000800 	.word	0x42000800
    1d6c:	42000c00 	.word	0x42000c00
    1d70:	42001000 	.word	0x42001000
    1d74:	42001400 	.word	0x42001400
    1d78:	42001800 	.word	0x42001800
    1d7c:	42001c00 	.word	0x42001c00

00001d80 <ASCII>:
    1d80:	00000000 5f000000 07000000 14000700     ......._........
    1d90:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
    1da0:	00502255 00000305 41221c00 22410000     U"P......."A..A"
    1db0:	0814001c 0814083e 08083e08 00305000     ....>....>...P0.
    1dc0:	08080800 60000808 20000060 02040810     .......``.. ....
    1dd0:	4549513e 7f42003e 61420040 21464951     >QIE>.B.@.BaQIF!
    1de0:	314b4541 7f121418 45452710 4a3c3945     AEK1.....'EEE9<J
    1df0:	01304949 03050971 49494936 49490636     II0.q...6III6.II
    1e00:	36001e29 00000036 00003656 41221408     )..66...V6...."A
    1e10:	14141400 41001414 02081422 06095101     .......A"....Q..
    1e20:	41794932 11117e3e 497f7e11 3e364949     2IyA>~...~.III6>
    1e30:	22414141 2241417f 49497f1c 097f4149     AAA".AA"..IIIA..
    1e40:	3e010909 7a494941 0808087f 7f41007f     ...>AIIz......A.
    1e50:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
    1e60:	0c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
    1e70:	0909097f 51413e06 097f5e21 46462919     .....>AQ!^...)FF
    1e80:	31494949 017f0101 40403f01 201f3f40     III1.....?@@@?. 
    1e90:	3f1f2040 3f403840 14081463 70080763     @ .?@8@?c...c..p
    1ea0:	51610708 00434549 0041417f 10080402     ..aQIEC..AA.....
    1eb0:	41410020 0204007f 40040201 40404040      .AA.......@@@@@
    1ec0:	04020100 54542000 487f7854 38384444     ..... TTTx.HDD88
    1ed0:	20444444 48444438 5454387f 7e081854     DDD 8DDH.8TTT..~
    1ee0:	0c020109 3e525252 0404087f 7d440078     ....RRR>....x.D}
    1ef0:	40200040 7f003d44 00442810 407f4100     @. @D=...(D..A.@
    1f00:	18047c00 087c7804 38780404 38444444     .|...x|...x8DDD8
    1f10:	1414147c 14140808 087c7c18 48080404     |........||....H
    1f20:	20545454 40443f04 40403c20 201c7c20     TTT .?D@ <@@ |. 
    1f30:	3c1c2040 3c403040 28102844 50500c44     @ .<@0@<D(.(D.PP
    1f40:	64443c50 00444c54 00413608 007f0000     P<DdTLD..6A.....
    1f50:	36410000 08100008 00081008 06090906     ..A6............
    1f60:	0000103e 0000103a 0000103a 000010a0     >...:...:.......
    1f70:	000010a0 00001052 00001044 00001058     ....R...D...X...
    1f80:	0000108e 00001260 00001240 00001240     ....`...@...@...
    1f90:	000012cc 00001252 0000126e 00001244     ....R...n...D...
    1fa0:	0000127c 000012bc 636c6557 20656d6f     |.......Welcome 
    1fb0:	6b636162 00000021 766f7250 20676e69     back!...Proving 
    1fc0:	6c656946 76207364 00312e30              Fields v0.1.

00001fcc <_init>:
    1fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fce:	46c0      	nop			; (mov r8, r8)
    1fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fd2:	bc08      	pop	{r3}
    1fd4:	469e      	mov	lr, r3
    1fd6:	4770      	bx	lr

00001fd8 <__init_array_start>:
    1fd8:	000000dd 	.word	0x000000dd

00001fdc <_fini>:
    1fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fde:	46c0      	nop			; (mov r8, r8)
    1fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1fe2:	bc08      	pop	{r3}
    1fe4:	469e      	mov	lr, r3
    1fe6:	4770      	bx	lr

00001fe8 <__fini_array_start>:
    1fe8:	000000b5 	.word	0x000000b5
